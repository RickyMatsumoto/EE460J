Adversarial Variational Bayes:
Unifying Variational Autoencoders and Generative Adversarial Networks

Lars Mescheder 1

Sebastian Nowozin 2

Andreas Geiger 1 3

Abstract
Variational Autoencoders (VAEs) are expressive
latent variable models that can be used to learn
complex probability distributions from training
data. However, the quality of the resulting model
crucially relies on the expressiveness of the in-
ference model. We introduce Adversarial Vari-
ational Bayes (AVB), a technique for training
Variational Autoencoders with arbitrarily expres-
sive inference models. We achieve this by in-
troducing an auxiliary discriminative network
that allows to rephrase the maximum-likelihood-
problem as a two-player game, hence establish-
ing a principled connection between VAEs and
Generative Adversarial Networks (GANs). We
show that in the nonparametric limit our method
yields an exact maximum-likelihood assignment
for the parameters of the generative model, as
well as the exact posterior distribution over the
latent variables given an observation. Contrary
to competing approaches which combine VAEs
with GANs, our approach has a clear theoretical
justiﬁcation, retains most advantages of standard
Variational Autoencoders and is easy to imple-
ment.

1. Introduction

Generative models in machine learning are models that can
be trained on an unlabeled dataset and are capable of gener-
ating new data points after training is completed. As gen-
erating new content requires a good understanding of the
training data at hand, such models are often regarded as a
key ingredient to unsupervised learning.

In recent years, generative models have become more and

1Autonomous Vision Group, MPI T¨ubingen 2Microsoft
3Computer Vision
Research Cambridge
and Geometry
Group, ETH Z¨urich. Correspondence to: Lars Mescheder
<lars.mescheder@tuebingen.mpg.de>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

f

Figure 1. We propose a method which enables neural samplers
with intractable density for Variational Bayes and as inference
models for learning latent variable models. This toy exam-
ple demonstrates our method’s ability to accurately approximate
complex posterior distributions like the one shown on the right.

more powerful. While many model classes such as Pixel-
RNNs (van den Oord et al., 2016b), PixelCNNs (van den
Oord et al., 2016a), real NVP (Dinh et al., 2016) and Plug
& Play generative networks (Nguyen et al., 2016) have
been introduced and studied, the two most prominent ones
are Variational Autoencoders (VAEs) (Kingma & Welling,
2013; Rezende et al., 2014) and Generative Adversarial
Networks (GANs) (Goodfellow et al., 2014).

Both VAEs and GANs come with their own advantages
and disadvantages: while GANs generally yield visually
sharper results when applied to learning a representation
of natural images, VAEs are attractive because they natu-
rally yield both a generative model and an inference model.
Moreover, it was reported, that VAEs often lead to better
log-likelihoods (Wu et al., 2016). The recently introduced
BiGANs (Donahue et al., 2016; Dumoulin et al., 2016) add
an inference model to GANs. However, it was observed
that the reconstruction results often only vaguely resemble
the input and often do so only semantically and not in terms
of pixel values.

The failure of VAEs to generate sharp images is often at-
tributed to the fact that the inference models used during
training are usually not expressive enough to capture the
true posterior distribution. Indeed, recent work shows that
using more expressive model classes can lead to substan-
tially better results (Kingma et al., 2016), both visually
and in terms of log-likelihood bounds. Recent work (Chen
et al., 2016) also suggests that highly expressive inference
models are essential in presence of a strong decoder to al-
low the model to make use of the latent space at all.

Adversarial Variational Bayes

In this paper, we present Adversarial Variational Bayes
(AVB) 1 , a technique for training Variational Autoencoders
with arbitrarily ﬂexible inference models parameterized by
neural networks. We can show that in the nonparametric
limit we obtain a maximum-likelihood assignment for the
generative model together with the correct posterior distri-
bution.

While there were some attempts at combining VAEs and
GANs (Makhzani et al., 2015; Larsen et al., 2015), most
of these attempts are not motivated from a maximum-
likelihood point of view and therefore usually do not lead
to maximum-likelihood assignments. For example, in Ad-
versarial Autoencoders (AAEs) (Makhzani et al., 2015) the
Kullback-Leibler regularization term that appears in the
training objective for VAEs is replaced with an adversarial
loss that encourages the aggregated posterior to be close to
the prior over the latent variables. Even though AAEs do
not maximize a lower bound to the maximum-likelihood
objective, we show in Section 6.2 that AAEs can be in-
terpreted as an approximation to our approach, thereby es-
tablishing a connection of AAEs to maximum-likelihood
learning.

Outside the context of generative models, AVB yields a
new method for performing Variational Bayes (VB) with
neural samplers. This is illustrated in Figure 1, where we
used AVB to train a neural network to sample from a non-
trival unnormalized probability density. This allows to ac-
curately approximate the posterior distribution of a prob-
abilistic model, e.g.
for Bayesian parameter estimation.
The only other variational methods we are aware of that
can deal with such expressive inference models are based
on Stein Discrepancy (Ranganath et al., 2016; Liu & Feng,
2016). However, those methods usually do not directly tar-
get the reverse Kullback-Leibler-Divergence and can there-
fore not be used to approximate the variational lower bound
for learning a latent variable model. Our contributions are
as follows:

• We enable the usage of arbitrarily complex inference
models for Variational Autoencoders using adversarial
training.

• We give theoretical insights into our method, show-
ing that in the nonparametric limit our method recov-
ers the true posterior distribution as well as a true
maximum-likelihood assignment for the parameters
of the generative model.

1 Concurrently to our work, several researchers have de-
scribed similar ideas. Some ideas of this paper were described
independently by Husz´ar in a blog post on http://www.
inference.vc and in Husz´ar (2017). The idea to use adversar-
ial training to improve the encoder network was also suggested by
Goodfellow in an exploratory talk he gave at NIPS 2016 and by Li
& Liu (2016). A similar idea was also mentioned by Karaletsos
(2016) in the context of message passing in graphical models.

Encoder

Encoder

(cid:15)1

(cid:15)2

+/∗

x

f

z

g

x

x

(cid:15)1

f

z

g

x

(cid:15)2

+/∗

+/∗

Decoder

Decoder

(a) Standard VAE

(b) Our model

Figure 2. Schematic comparison of a standard VAE and a VAE
with black-box inference model, where (cid:15)1 and (cid:15)2 denote samples
from some noise distribution. While more complicated inference
models for Variational Autoencoders are possible, they are usually
not as ﬂexible as our black-box approach.

• We empirically demonstrate that our model is able
to learn rich posterior distributions and show that the
model is able to generate compelling samples for com-
plex data sets.

2. Background

As our model is an extension of Variational Autoencoders
(VAEs) (Kingma & Welling, 2013; Rezende et al., 2014),
we start with a brief review of VAEs.

VAEs are speciﬁed by a parametric generative model pθ(x |
z) of the visible variables given the latent variables, a prior
p(z) over the latent variables and an approximate inference
model qφ(z | x) over the latent variables given the visible
variables. It can be shown that

log pθ(x) ≥ −KL(qφ(z | x), p(z))

+ Eqφ(z|x) log pθ(x | z).

(2.1)

The right hand side of (2.1) is called the variational lower
bound or evidence lower bound (ELBO). If there is φ such
that qφ(z | x) = pθ(z | x), we would have

log pθ(x) = max

−KL(qφ(z | x), p(z))

φ

+ Eqφ(z|x) log pθ(x | z).

(2.2)

However, in general this is not true, so that we only have
an inequality in (2.2).

When performing maximum-likelihood training, our goal
is to optimize the marginal log-likelihood

EpD(x) log pθ(x),

(2.3)

Adversarial Variational Bayes

where pD is the data distribution. Unfortunately, com-
puting log pθ(x) requires marginalizing out z in pθ(x, z)
which is usually intractable. Variational Bayes uses in-
equality (2.1) to rephrase the intractable problem of opti-
mizing (2.3) into

max
θ

max
φ

EpD(x)

(cid:104)
−KL(qφ(z | x), p(z))

(cid:105)
+ Eqφ(z|x) log pθ(x | z)

.

(2.4)

Due to inequality (2.1), we still optimize a lower bound to
the true maximum-likelihood objective (2.3).

Naturally, the quality of this lower bound depends on the
expressiveness of the inference model qφ(z | x). Usually,
qφ(z | x) is taken to be a Gaussian distribution with diago-
nal covariance matrix whose mean and variance vectors are
parameterized by neural networks with x as input (Kingma
& Welling, 2013; Rezende et al., 2014). While this model
is very ﬂexible in its dependence on x, its dependence on
z is very restrictive, potentially limiting the quality of the
resulting generative model.
Indeed, it was observed that
applying standard Variational Autoencoders to natural im-
ages often results in blurry images (Larsen et al., 2015).

3. Method

In this work we show how we can instead use a black-box
inference model qφ(z | x) and use adversarial training to
obtain an approximate maximum likelihood assignment θ∗
to θ and a close approximation qφ∗ (z | x) to the true pos-
terior pθ∗ (z | x). This is visualized in Figure 2: on the left
hand side the structure of a typical VAE is shown. The right
hand side shows our ﬂexible black-box inference model. In
contrast to a VAE with Gaussian inference model, we in-
clude the noise (cid:15)1 as additional input to the inference model
instead of adding it at the very end, thereby allowing the in-
ference network to learn complex probability distributions.

3.1. Derivation

The idea of our approach is to circumvent this problem by
implicitly representing the term

log p(z) − log qφ(z | x)

(3.2)

as the optimal value of an additional real-valued discrimi-
native network T (x, z) that we introduce to the problem.

More speciﬁcally, consider the following objective for the
discriminator T (x, z) for a given qφ(x | z):

max
T

EpD(x)Eqφ(z|x) log σ(T (x, z))

+ EpD(x)Ep(z) log (1 − σ(T (x, z))) .

(3.3)

Here, σ(t) := (1 + e−t)−1 denotes the sigmoid-function.
Intuitively, T (x, z) tries to distinguish pairs (x, z) that were
sampled independently using the distribution pD(x)p(z)
from those that were sampled using the current inference
model, i.e., using pD(x)qφ(z | x).

To simplify the theoretical analysis, we assume that the
model T (x, z) is ﬂexible enough to represent any func-
tion of the two variables x and z. This assumption is often
referred to as the nonparametric limit (Goodfellow et al.,
2014) and is justiﬁed by the fact that deep neural networks
are universal function approximators (Hornik et al., 1989).

As it turns out, the optimal discriminator T ∗(x, z) accord-
ing to the objective in (3.3) is given by the negative of (3.2).

Proposition 1. For pθ(x | z) and qφ(z | x) ﬁxed, the opti-
mal discriminator T ∗ according to the objective in (3.3) is
given by

T ∗(x, z) = log qφ(z | x) − log p(z).

(3.4)

Proof. The proof is analogous to the proof of Proposition
1 in Goodfellow et al. (2014). See the Supplementary Ma-
terial for details.
Together with (3.1), Proposition 1 allows us to write the
optimization objective in (2.4) as

To derive our method, we rewrite the optimization problem
in (2.4) as

max
θ,φ

EpD(x)Eqφ(z|x)

(cid:0) − T ∗(x, z) + log pθ(x | z)(cid:1), (3.5)

max
θ

max
φ

EpD(x)Eqφ(z|x)

(cid:0) log p(z)
− log qφ(z | x) + log pθ(x | z)(cid:1).

(3.1)

When we have an explicit representation of qφ(z | x) such
as a Gaussian parameterized by a neural network, (3.1) can
be optimized using the reparameterization trick (Kingma &
Welling, 2013; Rezende & Mohamed, 2015) and stochastic
gradient descent. Unfortunately, this is not the case when
we deﬁne qφ(z | x) by a black-box procedure as illustrated
in Figure 2b.

where T ∗(x, z) is deﬁned as the function that maximizes
(3.3).

To optimize (3.5), we need to calculate the gradients of
(3.5) with respect to θ and φ. While taking the gradient
with respect to θ is straightforward, taking the gradient with
respect to φ is complicated by the fact that we have deﬁned
T ∗(x, z) indirectly as the solution of an auxiliary optimiza-
tion problem which itself depends on φ. However, the fol-
lowing Proposition shows that taking the gradient with re-
spect to the explicit occurrence of φ in T ∗(x, z) is not nec-
essary:

Adversarial Variational Bayes

Algorithm 1 Adversarial Variational Bayes (AVB)
1: i ← 0
2: while not converged do
3:
4:
5:
6:

Sample {x(1), . . . , x(m)} from data distrib. pD(x)
Sample {z(1), . . . , z(m)} from prior p(z)
Sample {(cid:15)(1), . . . , (cid:15)(m)} from N (0, 1)
Compute θ-gradient (eq. 3.7):
gθ ← 1
m
Compute φ-gradient (eq. 3.7):
gφ ← 1
m

(cid:0)x(k), zφ(x(k), (cid:15)(k))(cid:1)

(cid:0)x(k), (cid:15)(k)(cid:1)(cid:1)

k=1 ∇θ log pθ

(cid:0)x(k) | zφ

k=1 ∇φ

(cid:2)−Tψ

(cid:80)m

(cid:80)m

7:

+ log pθ
Compute ψ-gradient (eq. 3.3) :

gψ ← 1
m

(cid:80)m

k=1 ∇ψ

(cid:104)

(cid:0)x(k) | zφ(x(k), (cid:15)(k))(cid:1)(cid:3)

log (cid:0)σ(Tψ(x(k), zφ(x(k), (cid:15)(k))))(cid:1)
+ log (cid:0)1 − σ(Tψ(x(k), z(k))(cid:1)(cid:105)

Perform SGD-updates for θ, φ and ψ:
θ ← θ + hi gθ, φ ← φ + hi gφ, ψ ← ψ + hi gψ
i ← i + 1

10:
11: end while

8:

9:

Proposition 2. We have

algorithm converges, any ﬁx point of this algorithm yields
a stationary point of the objective in (2.4).

Note that optimizing (3.5) with respect to φ while keep-
ing θ and T ﬁxed makes the encoder network collapse to
a deterministic function. This is also a common problem
for regular GANs (Radford et al., 2015).
It is therefore
crucial to keep the discriminative T network close to op-
timality while optimizing (3.5). A variant of Algorithm 1
therefore performs several SGD-updates for the adversary
for one SGD-update of the generative model. However,
throughout our experiments we use the simple 1-step ver-
sion of AVB unless stated otherwise.

3.3. Theoretical results

In Sections 3.1 we derived AVB as a way of performing
stochastic gradient descent on the variational lower bound
in (2.4). In this section, we analyze the properties of Algo-
rithm 1 from a game theoretical point of view.

As the next proposition shows, global Nash-equilibria of
Algorithm 1 yield global optima of the objective in (2.4):

Proposition 3. Assume that T can represent any function
of two variables. If (θ∗, φ∗, T ∗) deﬁnes a Nash-equilibrium
of the two-player game deﬁned by (3.3) and (3.7), then

Eqφ(z|x) (∇φT ∗(x, z)) = 0.

(3.6)

T ∗(x, z) = log qφ∗ (z | x) − log p(z)

(3.8)

Proof. The proof can be found in the Supplementary Ma-
terial.
Using the reparameterization trick (Kingma & Welling,
2013; Rezende et al., 2014), (3.5) can be rewritten in the
form

max
θ,φ

EpD(x)E(cid:15)

(cid:0) − T ∗(x, zφ(x, (cid:15)))

+ log pθ(x | zφ(x, (cid:15)))(cid:1)

(3.7)

for a suitable function zφ(x, (cid:15)). Together with Proposition
1, (3.7) allows us to take unbiased estimates of the gradients
of (3.5) with respect to φ and θ.

3.2. Algorithm

In theory, Propositions 1 and 2 allow us to apply Stochastic
Gradient Descent (SGD) directly to the objective in (2.4).
However, this requires keeping T ∗(x, z) optimal which is
computationally challenging. We therefore regard the opti-
mization problems in (3.3) and (3.7) as a two-player game.
Propositions 1 and 2 show that any Nash-equilibrium of
this game yields a stationary point of the objective in (2.4).

and (θ∗, φ∗) is a global optimum of the variational lower
bound in (2.4).

Proof. The proof can be found in the Supplementary Ma-
terial.
Our parameterization of qφ(z | x) as a neural network al-
lows qφ(z | x) to represent almost any probability density
on the latent space. This motivates

Corollary 4. Assume that T can represent any function of
two variables and qφ(z | x) can represent any probability
density on the latent space. If (θ∗, φ∗, T ∗) deﬁnes a Nash-
equilibrium for the game deﬁned by (3.3) and (3.7), then

1. θ∗ is a maximum-likelihood assignment

2. qφ∗ (z | x) is equal to the true posterior pθ∗ (z | x)

3. T ∗ is the pointwise mutual information between x and

z, i.e.

T ∗(x, z) = log

pθ∗ (x, z)
pθ∗ (x)p(z)

.

(3.9)

In practice, we try to ﬁnd a Nash-equilibrium by applying
SGD with step sizes hi jointly to (3.3) and (3.7), see Algo-
rithm 1. Here, we parameterize the neural network T with
a vector ψ. Even though we have no guarantees that this

Proof. This is a straightforward consequence of Proposi-
tion 3, as in this case (θ∗, φ∗) optimizes the variational
lower bound in (2.4) if and only if 1 and 2 hold. Insert-
ing the result from 2 into (3.8) yields 3.

Adversarial Variational Bayes

4. Adaptive Contrast

While in the nonparametric limit our method yields the cor-
rect results, in practice T (x, z) may fail to become sufﬁ-
ciently close to the optimal function T ∗(x, z). The rea-
son for this problem is that AVB calculates a contrast be-
tween the two densities pD(x)qφ(z | x) to pD(x)p(z)
which are usually very different. However, it is known that
logistic regression works best for likelihood-ratio estima-
tion when comparing two very similar densities (Friedman
et al., 2001).

To improve the quality of the estimate, we therefore pro-
pose to introduce an auxiliary conditional probability dis-
tribution rα(z | x) with known density that approximates
qφ(z | x). For example, rα(z | x) could be a Gaussian dis-
tribution with diagonal covariance matrix whose mean and
variance matches the mean and variance of qφ(z | x).

Using this auxiliary distribution, we can rewrite the varia-
tional lower bound in (2.4) as

(cid:104)

EpD(x)

−KL (qφ(z | x), rα(z | x))

(cid:105)
+ Eqφ(z|x) (− log rα(z | x) + log pφ(x, z))

.

(4.1)

As we know the density of rα(z | x), the second term in
(4.1) is amenable to stochastic gradient descent with re-
spect to θ and φ. However, we can estimate the ﬁrst term
using AVB as described in Section 3. If rα(z | x) approx-
imates qφ(z | x) well, KL (qφ(z | x), rα(z | x)) is usu-
ally much smaller than KL (qφ(z | x), p(z)), which makes
it easier for the adversary to learn the correct probability
ratio.

We call this technique Adaptive Contrast (AC), as we are
now contrasting the current inference model qφ(z | x) to
an adaptive distribution rα(z | x) instead of the prior p(z).
Using Adaptive Contrast, the generative model pθ(x | z)
and the inference model qφ(z | x) are trained to maximize

EpD(x)Eqφ(z|x)

(cid:0) − T ∗(x, z)
− log rα(z | x) + log pθ(x, z)(cid:1),

(4.2)

where T ∗(x, z) is the optimal discriminator distinguishing
samples from rα(z | x) and qφ(z | x).

Consider now the case that rα(z | x) is given by a Gaussian
distribution with diagonal covariance matrix whose mean
µ(x) and variance vector σ(x) match the mean and vari-
ance of qφ(z | x). As the Kullback-Leibler divergence is
invariant under reparameterization, the ﬁrst term in (4.1)
can be rewritten as

EpD(x)KL (˜qφ(˜z | x), r0(˜z))

(4.3)

where ˜qφ(˜z | x) denotes the distribution of the normalized
vector ˜z := z−µ(x)
and r0(˜z) is a Gaussian distribution
σ(x)

Figure 3. Comparison of KL to ground truth posterior obtained by
Hamiltonian Monte Carlo (HMC).

with mean 0 and variance 1. This way, the adversary only
has to account for the deviation of qφ(z | x) from a Gaus-
sian distribution, not its location and scale. Please see the
Supplementary Material for pseudo code of the resulting
algorithm.

In practice, we estimate µ(x) and σ(x) using a Monte-
Carlo estimate. In the Supplementary Material we describe
a network architecture for qφ(z | x) that makes the compu-
tation of this estimate particularly efﬁcient.

5. Experiments

We tested our method both as a black-box method for vari-
ational inference and for learning generative models. The
former application corresponds to the case where we ﬁx the
generative model and a data point x and want to learn the
posterior qφ(z | x).

An additional experiment on the celebA dataset (Liu et al.,
2015) can be found in the Supplementary Material.

5.1. Variational Inference

When the generative model and a data point x is ﬁxed, AVB
gives a new technique for Variational Bayes with arbitrarily
complex approximating distributions. We applied this to
the “Eight School” example from Gelman et al. (2014). In
this example, the coaching effects yi, i = 1, . . . , 8 for eight
schools are modeled as

yi ∼ N (µ + θ · ηi, σi),

where µ, τ and the ηi are the model parameters to be in-
ferred. We place a N (0, 1) prior on the parameters of the
model. We compare AVB against two variational methods
with Gaussian inference model (Kucukelbir et al., 2015)
as implemented in STAN (Stan Development Team, 2016).
We used a simple two layer model for the posterior and a
powerful 5-layer network with RESNET-blocks (He et al.,
2015) for the discriminator. For every posterior update step
we performed two steps for the adversary. The ground-
truth data was obtained by running Hamiltonian Monte-

Adversarial Variational Bayes

(µ, τ )

(τ, η1)

Figure 5. Training examples in the synthetic dataset.

AVB

VB
(full-
rank)

HMC

(a) VAE

(b) AVB

Figure 6. Distribution of latent code for VAE and AVB trained on
synthetic dataset.

log-likelihood
reconstruction error
ELBO
KL(qφ(z), p(z))

VAE
-1.568
88.5 ·10−3
-1.697
≈ 0.165

AVB
-1.403
5.77 ·10−3
≈ -1.421
≈ 0.026

Table 1. Comparison of VAE and AVB on synthetic dataset.
The optimal log-likelihood score on this dataset is − log(4) ≈
−1.386.

encoder network takes as input a data point x and a vec-
tor of Gaussian random noise (cid:15) and produces a latent code
z. The decoder network takes as input a latent code z and
produces the parameters for four independent Bernoulli-
distributions, one for each pixel of the output image. The
adversary is parameterized by two neural networks with
two 512-dimensional hidden layers each, acting on x and z
respectively, whose 512-dimensional outputs are combined
using an inner product.

We compare our method to a Variational Autoencoder with
a diagonal Gaussian posterior distribution. The encoder
and decoder networks are parameterized as above, but the
encoder does not take the noise (cid:15) as input and produces a
mean and variance vector instead of a single sample.

We visualize the resulting division of the latent space in
Figure 6, where each color corresponds to one state in the
x-space. Whereas the Variational Autoencoder divides the
space into a mixture of 4 Gaussians, the Adversarial Varia-
tional Autoencoder learns a complex posterior distribution.
Quantitatively this can be veriﬁed by computing the KL-
divergence between the prior p(z) and the aggregated pos-
terior qφ(z) := (cid:82) qφ(z | x)pD(x)dx, which we estimate
using the ITE-package (Szabo, 2013), see Table 1. Note
that the variations for different colors in Figure 6 are solely
due to the noise (cid:15) used in the inference model.

The ability of AVB to learn more complex posterior mod-
els leads to improved performance as Table 1 shows. In
particular, AVB leads to a higher likelihood score that is
close to the optimal value of − log(4) compared to a stan-
dard VAE that struggles with the fact that it cannot divide

Figure 4. Comparison of AVB to VB on the “Eight Schools” ex-
ample by inspecting two marginal distributions of the approxima-
tion to the 10-dimensional posterior. We see that AVB accurately
captures the multi-modality of the posterior distribution. In con-
trast, VB only focuses on a single mode. The ground truth is
shown in the last row and has been obtained using HMC.

Carlo (HMC) for 500000 steps using STAN. Note that
AVB and the baseline variational methods allow to draw
an arbitrary number of samples after training is completed
whereas HMC only yields a ﬁxed number of samples.

We evaluate all methods by estimating the Kullback-
Leibler-Divergence to the ground-truth data using the ITE-
package (Szabo, 2013) applied to 10000 samples from the
ground-truth data and the respective approximation. The
resulting Kullback-Leibler divergence over the number of
iterations for the different methods is plotted in Figure 3.
We see that our method clearly outperforms the methods
with Gaussian inference model. For a qualitative visualiza-
tion, we also applied Kernel-density-estimation to the 2-
dimensional marginals of the (µ, τ )- and (τ, η1)-variables
as illustrated in Figure 4. In contrast to variational Bayes
with Gaussian inference model, our approach clearly cap-
tures the multi-modality of the posterior distribution. We
also observed that Adaptive Contrast makes learning more
robust and improves the quality of the resulting model.

5.2. Generative Models

Synthetic Example To illustrate the application of our
method to learning a generative model, we trained the neu-
ral networks on a simple synthetic dataset containing only
the 4 data points from the space of 2 × 2 binary images
shown in Figure 5 and a 2-dimensional latent space. Both
the encoder and decoder are parameterized by 2-layer fully
connected neural networks with 512 hidden units each. The

Adversarial Variational Bayes

1000 intermediate distributions and 5 parallel chains on
2048 test examples. The results are reported in Table 2.
Using AIS, we see that AVB without AC overestimates the
true ELBO which degrades its performance. Even though
the results suggest that AVB with AC can also overestimate
the true ELBO in higher dimensions, we note that the log-
likelihood estimate computed by AIS is also only a lower
bound to the true log-likelihood (Wu et al., 2016).

Using AVB with AC, we see that we improve both on a
standard VAE and AVB without AC. When comparing to
other state of the art methods, we see that our method
achieves state of the art results on binarized MNIST2. For
an additional experimental evaluation of AVB and three
baselines for a ﬁxed decoder architecture see the Supple-
mentary Material. Some random samples for MNIST are
shown in Figure 7. We see that our model produces ran-
dom samples that are perceptually close to the training set.

6. Related Work

6.1. Connection to Variational Autoencoders

AVB strives to optimize the same objective as a standard
VAE (Kingma & Welling, 2013; Rezende et al., 2014), but
approximates the Kullback-Leibler divergence using an ad-
versary instead of relying on a closed-form formula.

Substantial work has focused on making the class of ap-
proximate inference models more expressive. Normalizing
ﬂows (Rezende & Mohamed, 2015; Kingma et al., 2016)
make the posterior more complex by composing a simple
Gaussian posterior with an invertible smooth mapping for
which the determinant of the Jacobian is tractable. Aux-
iliary Variable VAEs (Maaløe et al., 2016) add auxiliary
variables to the posterior to make it more ﬂexible. How-
ever, no other approach that we are aware of allows to use
black-box inference models to optimize the ELBO.

6.2. Connection to Adversarial Autoencoders

Makhzani et al. (Makhzani et al., 2015) introduced the con-
cept of Adversarial Autoencoders. The idea is to replace
the term

KL(qφ(z | x), p(z))
in (2.4) with an adversarial loss that tries to enforce that
upon convergence

(6.1)

(cid:90)

qφ(z | x)pD(x)dx ≈ p(z).

(6.2)

While related to our approach, the approach by Makhzani
et al. modiﬁes the variational objective while our approach

2Note that the methods in the lower half of Table 2 were
trained with different decoder architectures and therefore only
provide limited information regarding the quality of the inference
model.

(a) Training data

(b) Random samples

Figure 7. Independent samples for a model trained on MNIST

AVB (8-dim)
AVB + AC (8-dim)
AVB + AC (32-dim)
VAE (8-dim)
VAE (32-dim)
VAE + NF (T=80)
VAE + HVI (T=16)
convVAE + HVI (T=16)
VAE + VGP (2hl)
DRAW + VGP
VAE + IAF
Auxiliary VAE (L=2)

log p(x) ≥

log p(x) ≈
(≈ −83.6 ± 0.4) −91.2 ± 0.6
−89.6 ± 0.6
≈ −96.3 ± 0.4
−80.2 ± 0.4
≈ −79.5 ± 0.3
−90.9 ± 0.6
−98.1 ± 0.5
−81.9 ± 0.4
−87.2 ± 0.3
−
−85.1
−85.51
−88.3
−81.94
−84.1
−
−81.3
−
−79.9
−79.10
−80.8
−
−83.0

(Rezende & Mohamed, 2015)
(Salimans et al., 2015)
(Salimans et al., 2015)
(Tran et al., 2015)
(Tran et al., 2015)
(Kingma et al., 2016)
(Maaløe et al., 2016)

Table 2. Log-likelihoods on binarized MNIST for AVB and other
methods improving on VAEs. We see that our method achieves
state of the art log-likelihoods on binarized MNIST. The approx-
imate log-likelihoods in the lower half of the table were not ob-
tained with AIS but with importance sampling.

the latent space appropriately. Moreover, we see that the
reconstruction error given by the mean cross-entropy be-
tween an input x and its reconstruction using the encoder
and decoder networks is much lower when using AVB in-
stead of a VAE with diagonal Gaussian inference model.
We also observe that the estimated variational lower bound
is close to the true log-likelihood, indicating that the adver-
sary has learned the correct function.

MNIST In addition, we trained deep convolutional net-
works based on the DC-GAN-architecture (Radford et al.,
2015) on the binarized MNIST-dataset (LeCun et al.,
1998). For the decoder network, we use a 5-layer deep con-
volutional neural network. For the encoder network, we use
a network architecture that allows for the efﬁcient compu-
tation of the moments of qφ(z | x). The idea is to deﬁne the
encoder as a linear combination of learned basis noise vec-
tors, each parameterized by a small fully-connected neural
network, whose coefﬁcients are parameterized by a neural
network acting on x, please see the Supplementary Ma-
terial for details. For the adversary, we replace the fully
connected neural network acting on z and x with a fully
connected 4-layer neural networks with 1024 units in each
hidden layer. In addition, we added the result of neural net-
works acting on x and z alone to the end result.

To validate our method, we ran Annealed Importance Sam-
pling (AIS) (Neal, 2001), the gold standard for evaluating
decoder based generative models (Wu et al., 2016) with

Adversarial Variational Bayes

pD(x)p(z) log (1 − σ(T (z)))dxdz

(6.3)

All in all, this yields

retains the objective.

The approach by Makhzani et al. can be regarded as an
approximation to our approach, where T (x, z) is restricted
to the class of functions that do not depend on x. Indeed,
an ideal discriminator that only depends on z maximizes

pD(x)q(z | x) log σ(T (z))dxdz

(cid:90) (cid:90)

(cid:90) (cid:90)

+

which is the case if and only if

(cid:90)

(cid:90)

T (z) = log

q(z | x)pD(x)dx − log p(z).

(6.4)

Clearly, this simpliﬁcation is a crude approximation to our
formulation from Section 3, but Makhzani et al. (2015)
show that this method can still lead to good sampling re-
sults. In theory, restricting T (x, z) in this way ensures that
upon convergence we approximately have

qφ(z | x)pD(x)dx = p(z),

(6.5)

but qφ(z | x) need not be close to the true posterior pθ(z |
x). Intuitively, while mapping pD(x) through qφ(z | x)
results in the correct marginal distribution, the contribution
of each x to this distribution can be very inaccurate.

In contrast to Adversarial Autoencoders, our goal is to im-
prove the ELBO by performing better probabilistic infer-
ence. This allows our method to be used in a more general
setting where we are only interested in the inference net-
work itself (Section 5.1) and enables further improvements
such as Adaptive Contrast (Section 4) which are not possi-
ble in the context of Adversarial Autoencoders.

6.3. Connection to f-GANs

Nowozin et al. (Nowozin et al., 2016) proposed to gener-
alize Generative Adversarial Networks (Goodfellow et al.,
2014) to f-divergences (Ali & Silvey, 1966) based on re-
sults by Nguyen et al. (Nguyen et al., 2010). In this para-
graph we show that f-divergences allow to represent AVB
as a zero-sum two-player game.

The family of f-divergences is given by
(cid:18) q(x)
p(x)

Df (p(cid:107)q) = Epf

(cid:19)

.

(6.6)

for some convex functional f : R → R∞ with f (1) = 0.

Nguyen et al. (2010) show that by using the convex con-
jugate f ∗ of f , (Hiriart-Urruty & Lemar´echal, 2013), we
obtain

Df (p(cid:107)q) = sup

Eq(x) [T (x)] − Ep(x) [f ∗(T (x))] ,

(6.7)

T

where T is a real-valued function. In particular, this is true
for the reverse Kullback-Leibler divergence with f (t) =
t log t. We therefore obtain

KL(q(z | x), p(z)) = Df (p(z), q(z | x))

= sup
T

Eq(z|x)T (x, z) − Ep(z)f ∗(T (x, z)),

(6.8)

with f ∗(ξ) = exp(ξ − 1) the convex conjugate of f (t) =
t log t.

max
θ

EpD(x) log pθ(x)

(6.9)

= max
θ,q

EpD(x)Ep(z)f ∗(T (x, z))

min
T
+EpD(x)Eq(z|x)(log pθ(x | z) − T (x, z)).

By replacing the objective (3.3) for the discriminator with

min
T

EpD(x)

(cid:105)
(cid:104)
Ep(z)eT (x,z)−1 − Eq(z|x)T (x, z)

,

(6.10)

we can reformulate the maximum-likelihood-problem as a
mini-max zero-sum game.
In fact, the derivations from
Section 3 remain valid for any f -divergence that we use
to train the discriminator. This is similar to the approach
taken by Poole et al. (Poole et al., 2016) to improve the
GAN-objective. In practice, we observed that the objective
(6.10) results in unstable training. We therefore used the
standard GAN-objective (3.3), which corresponds to the
Jensen-Shannon-divergence.

6.4. Connection to BiGANs

BiGANs (Donahue et al., 2016; Dumoulin et al., 2016)
are a recent extension to Generative Adversarial Networks
with the goal to add an inference network to the generative
model. Similarly to our approach, the authors introduce
an adversary that acts on pairs (x, z) of data points and la-
tent codes. However, whereas in BiGANs the adversary
is used to optimize the generative and inference networks
separately, our approach optimizes the generative and infer-
ence model jointly. As a result, our approach obtains good
reconstructions of the input data, whereas for BiGANs we
obtain these reconstructions only indirectly.

7. Conclusion

We presented a new training procedure for Variational Au-
toencoders based on adversarial training. This allows us to
make the inference model much more ﬂexible, effectively
allowing it to represent almost any family of conditional
distributions over the latent variables.

We believe that further progress can be made by investigat-
ing the class of neural network architectures used for the
adversary and the encoder and decoder networks as well as
ﬁnding better contrasting distributions.

Adversarial Variational Bayes

Acknowledgements

This work was supported by Microsoft Research through
its PhD Scholarship Programme.

References

Ali, Syed Mumtaz and Silvey, Samuel D. A general class
of coefﬁcients of divergence of one distribution from an-
other. Journal of the Royal Statistical Society. Series B
(Methodological), pp. 131–142, 1966.

Chen, Xi, Kingma, Diederik P, Salimans, Tim, Duan, Yan,
Dhariwal, Prafulla, Schulman, John, Sutskever, Ilya, and
Abbeel, Pieter. Variational lossy autoencoder. arXiv
preprint arXiv:1611.02731, 2016.

Dinh, Laurent, Krueger, David, and Bengio, Yoshua. Nice:
Non-linear independent components estimation. arXiv
preprint arXiv:1410.8516, 2014.

Dinh, Laurent, Sohl-Dickstein, Jascha, and Bengio, Samy.
arXiv preprint

Density estimation using real nvp.
arXiv:1605.08803, 2016.

Donahue,

Jeff, Kr¨ahenb¨uhl, Philipp,

and Darrell,
Trevor. Adversarial feature learning. arXiv preprint
arXiv:1605.09782, 2016.

Dumoulin, Vincent, Belghazi, Ishmael, Poole, Ben, Lamb,
Alex, Arjovsky, Martin, Mastropietro, Olivier, and
Courville, Aaron. Adversarially learned inference. arXiv
preprint arXiv:1606.00704, 2016.

Friedman, Jerome, Hastie, Trevor, and Tibshirani, Robert.
The elements of statistical learning, volume 1. Springer
series in statistics Springer, Berlin, 2001.

Gelman, Andrew, Carlin, John B, Stern, Hal S, and Rubin,
Donald B. Bayesian data analysis, volume 2. Chapman
& Hall/CRC Boca Raton, FL, USA, 2014.

Goodfellow, Ian, Pouget-Abadie, Jean, Mirza, Mehdi, Xu,
Bing, Warde-Farley, David, Ozair, Sherjil, Courville,
Aaron, and Bengio, Yoshua. Generative adversarial nets.
In Advances in Neural Information Processing Systems,
pp. 2672–2680, 2014.

He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun,
Jian. Deep residual learning for image recognition. arXiv
preprint arXiv:1512.03385, 2015.

Hiriart-Urruty, Jean-Baptiste and Lemar´echal, Claude.
Convex analysis and minimization algorithms I: funda-
mentals, volume 305. Springer science & business me-
dia, 2013.

Hornik, Kurt, Stinchcombe, Maxwell, and White, Halbert.
Multilayer feedforward networks are universal approxi-
mators. Neural networks, 2(5):359–366, 1989.

Husz´ar, Ferenc. Variational inference using implicit distri-

butions. arXiv preprint arXiv:1702.08235, 2017.

Karaletsos, Theofanis. Adversarial message passing for
arXiv preprint arXiv:1612.05048,

graphical models.
2016.

Kingma, Diederik P and Welling, Max. Auto-encoding
arXiv preprint arXiv:1312.6114,

variational bayes.
2013.

Kingma, Diederik P, Salimans, Tim, and Welling, Max. Im-
proving variational inference with inverse autoregressive
ﬂow. arXiv preprint arXiv:1606.04934, 2016.

Kucukelbir, Alp, Ranganath, Rajesh, Gelman, Andrew, and
Blei, David. Automatic variational inference in stan. In
Advances in neural information processing systems, pp.
568–576, 2015.

Larsen, Anders Boesen Lindbo, Sønderby, Søren Kaae,
Autoencoding beyond pixels
arXiv preprint

and Winther, Ole.
using a learned similarity metric.
arXiv:1512.09300, 2015.

LeCun, Yann, Bottou, L´eon, Bengio, Yoshua, and Haffner,
Patrick. Gradient-based learning applied to document
recognition. Proceedings of the IEEE, 86(11):2278–
2324, 1998.

Li, Yingzhen and Liu, Qiang. Wild variational approxima-
In NIPS workshop on advances in approximate

tions.
Bayesian inference, 2016.

Liu, Qiang and Feng, Yihao. Two methods for wild vari-
arXiv preprint arXiv:1612.00081,

ational inference.
2016.

Liu, Ziwei, Luo, Ping, Wang, Xiaogang, and Tang, Xiaoou.
Deep learning face attributes in the wild. In Proceedings
of International Conference on Computer Vision (ICCV),
2015.

Maaløe, Lars, Sønderby, Casper Kaae, Sønderby,
Søren Kaae, and Winther, Ole. Auxiliary deep gener-
ative models. arXiv preprint arXiv:1602.05473, 2016.

Makhzani, Alireza, Shlens, Jonathon, Jaitly, Navdeep, and
arXiv

Goodfellow, Ian. Adversarial autoencoders.
preprint arXiv:1511.05644, 2015.

Neal, Radford M. Annealed importance sampling. Statis-

tics and Computing, 11(2):125–139, 2001.

Adversarial Variational Bayes

Neural Information Processing Systems, pp. 4790–4798,
2016a.

van den Oord, Aaron van den, Kalchbrenner, Nal, and
Kavukcuoglu, Koray. Pixel recurrent neural networks.
arXiv preprint arXiv:1601.06759, 2016b.

Wu, Yuhuai, Burda, Yuri, Salakhutdinov, Ruslan, and
On the quantitative analysis of
arXiv preprint

Grosse, Roger.
decoder-based generative models.
arXiv:1611.04273, 2016.

Nguyen, Anh, Yosinski, Jason, Bengio, Yoshua, Dosovit-
skiy, Alexey, and Clune, Jeff. Plug & play generative
networks: Conditional iterative generation of images in
latent space. arXiv preprint arXiv:1612.00005, 2016.

Nguyen, XuanLong, Wainwright, Martin J, and Jordan,
Michael I. Estimating divergence functionals and the
IEEE
likelihood ratio by convex risk minimization.
Transactions on Information Theory, 56(11):5847–5861,
2010.

Nowozin, Sebastian, Cseke, Botond, and Tomioka, Ry-
ota.
f-gan: Training generative neural samplers us-
ing variational divergence minimization. arXiv preprint
arXiv:1606.00709, 2016.

Poole, Ben, Alemi, Alexander A, Sohl-Dickstein, Jascha,
Improved generator objectives

and Angelova, Anelia.
for gans. arXiv preprint arXiv:1612.02780, 2016.

Radford, Alec, Metz, Luke, and Chintala, Soumith. Un-
supervised representation learning with deep convolu-
tional generative adversarial networks. arXiv preprint
arXiv:1511.06434, 2015.

Ranganath, Rajesh, Tran, Dustin, Altosaar, Jaan, and Blei,
David. Operator variational inference. In Advances in
Neural Information Processing Systems, pp. 496–504,
2016.

Rezende, Danilo Jimenez and Mohamed, Shakir. Varia-
tional inference with normalizing ﬂows. arXiv preprint
arXiv:1505.05770, 2015.

Rezende, Danilo Jimenez, Mohamed, Shakir, and Wier-
stra, Daan. Stochastic backpropagation and approxi-
mate inference in deep generative models. arXiv preprint
arXiv:1401.4082, 2014.

Salimans, Tim, Kingma, Diederik P, Welling, Max, et al.
Markov chain monte carlo and variational inference:
Bridging the gap. In ICML, volume 37, pp. 1218–1226,
2015.

Stan Development Team. Stan modeling language users
guide and reference manual, Version 2.14.0, 2016. URL
http://mc-stan.org.

Szabo, Zolt´an. Information theoretical estimators (ite) tool-

box. 2013.

Tran, Dustin, Ranganath, Rajesh, and Blei, David M.
arXiv preprint

The variational gaussian process.
arXiv:1511.06499, 2015.

van den Oord, Aaron, Kalchbrenner, Nal, Espeholt, Lasse,
Vinyals, Oriol, Graves, Alex, et al. Conditional im-
age generation with pixelcnn decoders. In Advances In

