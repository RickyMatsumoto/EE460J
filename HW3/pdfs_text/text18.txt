Natasha: Faster Non-Convex Stochastic Optimization
via Strongly Non-Convex Parameter

Zeyuan Allen-Zhu 1

Abstract
Given a non-convex function f (x) that is an av-
erage of n smooth functions, we design stochas-
tic ﬁrst-order methods to ﬁnd its approximate
stationary points. The performance of our new
methods depend on the smallest (negative) eigen-
value −σ of the Hessian. This parameter σ
captures how strongly non-convex f (x) is, and
is analogous to the strong convexity parameter
for convex optimization. At least in theory, our
methods outperform known results for a range of
parameter σ, and can also be used to ﬁnd approx-
imate local minima. Our result implies an inter-
esting dichotomy: there exists a threshold σ0 so
that the (currently) fastest methods for σ > σ0
and for σ < σ0 have different behaviors: the for-
mer scales with n2/3 and the latter scales with
n3/4.

1 Introduction

We study the problem of composite non-convex minimiza-
tion:

(cid:110)

min
x∈Rd

F (x) := ψ(x) + f (x) := ψ(x) +

1
n

n
(cid:88)

i=1

(cid:111)

fi(x)

(1.1)
where each fi(x) is nonconvex but smooth, and ψ(·) is
proper convex, possibly nonsmooth, but relatively simple.
We are interested in ﬁnding a point x that is an approximate
local minimum of F (x).
• The ﬁnite-sum structure f (x) = 1
n

i=1 fi(x) arises
prominently in large-scale machine learning tasks. In
particular, when minimizing loss over a training set,
each example i corresponds to one loss function fi(·)
in the summation. This ﬁnite-sum structure allows one
to perform stochastic gradient descent with respect to a

(cid:80)n

Future version of this paper shall be found at http://
arxiv.org/abs/1702.00763. 1Microsoft Research. Cor-
respondence to: Zeyuan Allen-Zhu <zeyuan@csail.mit.edu>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

random ∇fi(x).

• The so-called proximal term ψ(x) adds more general-
ity to the model. For instance, if ψ(x) is the indicator
function of a convex set, then problem (1.1) becomes
constraint minimization; if ψ(x) = (cid:107)x(cid:107)1, then we can
allow problem (1.1) to perform feature selection.
In
general, ψ(x) has to be a simple function where the
projection operation arg minx{ψ(x) + 1
2η (cid:107)x − x0(cid:107)2}
is efﬁciently computable. At a ﬁrst reading of this pa-
per, one can assume ψ(x) ≡ 0 for simplicity.

Many non-convex machine learning problems fall into
problem (1.1). Most notably, training deep neural networks
and classiﬁcations with sigmoid loss correspond to (1.1)
where neither fi(x) or f (x) is convex. However, our un-
derstanding to this challenging non-convex problem is very
limited.

1.1 Strongly Non-Convex Optimization

Let L be the smoothness parameter for each fi(x), meaning
all the eigenvalues of ∇2fi(x) lie in [−L, L].1
We denote by σ ∈ [0, L] the strong-nonconvexity parameter
of f (x) = 1
n

i=1 fi(x), meaning that

(cid:80)n

all the eigenvalues of ∇2f (x) lie in [−σ, L].

We emphasize that parameter σ is analogous to the strong-
convexity parameter µ for convex optimization, where all
the eigenvalues of ∇2f (x) lie in [µ, L] for some µ > 0.
We wish to ﬁnd an ε-approximate stationary point (a.k.a.
critical point) of F (x), that is

a point x satisfying (cid:107)G(x)(cid:107) ≤ ε

where G(x) is the so-called gradient mapping of F (x) (see
Section 2 for a formal deﬁnition).
In the special case of
ψ(·) ≡ 0, gradient mapping G(x) is the same as gradient
∇f (x), so x satisﬁes (cid:107)∇f (x)(cid:107) ≤ ε.

Since f (·) is σ-strongly nonconvex, any ε-approximate sta-
tionary point is automatically also an (ε, σ)-approximate
local minimum — meaning that the Hessian of the output
point ∇2f (x) (cid:23) −σI is approximately positive semideﬁ-
nite (PSD).

1This deﬁnition also applies to functions f (x) that are not

twice differentiable, see Section 2 for details.

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

1.2 Motivations and Remarks

• We focus on strongly non-convex optimization because
introducing this parameter σ allows us to perform a
more reﬁned study of non-convex optimization.
If σ
equals L then L-strongly nonconvex optimization is
equivalent to the general non-convex optimization.

• We focus only on ﬁnding stationary points as op-
posed to local minima, because in a recent study —
see Appendix A— researchers have shown that ﬁnding
(ε, δ)-approximate local minima reduces to ﬁnding ε-
approximate stationary points in an O(δ)-strongly non-
convex function.

• Parameter σ is often not constant and can be much
smaller than L. For instance, second-order methods of-
ε)-approximate local minima (Nesterov,
ten ﬁnd (ε,
2008) and this corresponds to σ =

√

√

ε.

1.3 Known Results

Despite the widespread use of nonconvex models in ma-
chine learning and related ﬁelds, our understanding to non-
convex optimization is still very limited. Until recently,
nearly all research papers have been mostly focusing on ei-
ther σ = 0 or σ = L:

• If σ = 0,

the accelerated SVRG method (Shalev-
Shwartz, 2016; Allen-Zhu & Yuan, 2016) ﬁnds x sat-
isfying F (x) − F (x∗) ≤ ε, in gradient complexity
(cid:101)O(cid:0)n + n3/4(cid:112)L/ε(cid:1).2 This result is irrelevant to this
paper because f (x) is simply convex.

• If σ = L, the SVRG method (Allen-Zhu & Hazan,
2016) ﬁnds an ε-approximate stationary point of F (x)
in gradient complexity O(n + n2/3L/ε2).

• If σ = L, gradient descent ﬁnds an ε-approximate sta-

tionary point in gradient complexity O(nL/ε2).

• If σ = L, stochastic gradient descent ﬁnds an ε-approx.
stationary point in gradient complexity O(L2/ε4).
Throughout this paper, we refer to gradient complexity
as the total number of stochastic gradient computations
∇fi(x) and proximal computations y ← Proxψ,η(x) :=
arg miny{ψ(y) + 1
it was observed by two independent
Very recently,
groups (Agarwal et al., 2017; Carmon et al., 2016) —
although implicitly, see Section 2.1— that for solving the
σ-strongly nonconvex problem, one can repeatedly regu-
larize F (x) to make it σ-strongly convex, and then apply
the accelerated SVRG method to minimize this regularized

2η (cid:107)y − x(cid:107)2}.3

2We use (cid:101)O to hide poly-logarithmic factors in n, L, 1/ε.
3Some authors also refer to them as incremental ﬁrst-order or-
acle (IFO) and proximal oracle (PO) calls. In most machine learn-
ing applications, each IFO and PO call can be implemented to run
in time O(d) where d is the dimension of the model, or even in
time O(s) if s is the average sparsity of the data vectors.

Figure 1: Comparison to prior works

function. Under mild assumption σ ≥ ε2, this approach
• ﬁnds an ε-approximate stationary point in gradient
Lσ

√

complexity (cid:101)O(cid:0) nσ+n3/4

(cid:1).

ε2

We call this method repeatSVRG in this paper. Unfortu-
nately, repeatSVRG is even slower than the vanilla SVRG
for σ = L by a factor n1/3, see Figure 1.

Remark on SGD. Stochastic gradient descent (SGD) has
a slower convergence rate (i.e., in terms of 1/ε4) than other
cited ﬁrst-order methods (i.e., in terms of 1/ε2), see for
instance (Ghadimi & Lan, 2015). However, the complexity
of SGD does not depend on n and thus is incomparable to
gradient descent, SVRG, or repeatSVRG.4 This is one of
the main motivations to study how to reduce the complexity
of non-SGD methods, especially in terms of n.

1.4 Our New Results

In this paper, we identify an interesting dichotomy with re-
spect to the spectrum of the nonconvexity parameter σ ∈
[0, L]. In particular, we showed that if σ ≥ L/
n, then
our new method Natasha ﬁnds an ε-approximate station-
ary point of F (x) in gradient complexity
n2/3(L2σ)1/3
ε2

n log

1
ε

√

+

O

(cid:16)

(cid:17)

.

In other words, together with repeatSVRG, we have im-
proved the gradient complexity for σ-stringly nonconvex
optimization to5

√

(cid:110) n3/4

Lσ

(cid:16)

(cid:101)O

min

,

n2/3(L2σ)1/3
ε2

(cid:111)(cid:17)

ε2
and the ﬁrst term in the min is smaller if σ < L/
the second term is smaller if σ > L/

n and
n. We illustrate our

√

√

4In practice, there are examples in non-convex empirical risk
minimization (Allen-Zhu & Hazan, 2016) and in training neural
networks (Allen-Zhu & Hazan, 2016; Reddi et al., 2016) where
SVRG can outperform SGD. Of course, for deep learning tasks,
SGD remains to be the best practical method of choice.

5We remark here that this is under mild assumptions for ε be-
ing sufﬁciently small. For instance, the result of (Agarwal et al.,
2017; Carmon et al., 2016) requires ε2 ≤ σ. In our result, the
term n log 1

ε disappears when ε6 ≤ L2σ/n.

complexity (log-scale)𝜎=𝐿/𝑛𝜎=𝐿repeatSVRGNatashaSVRG𝜎=0𝑛2/3𝐿2𝜎1/3𝜀2𝑛3/4𝐿𝜎1/2𝜀2𝑛2/3𝐿𝜀2𝑛𝐿𝜀2gradient descent𝑛𝜎𝜀2Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

performance improvement in Figure 1. Our result matches
that of SVRG for σ = L, and has a much simpler analysis.

ε2

σ2 ≤ n2.

ε + n2/3((cid:96)1(cid:96)2σ)1/3

Additional Results. One can take a step further and ask
what if each function fi(x) is ((cid:96)1, (cid:96)2)-smooth for parame-
ters (cid:96)1, (cid:96)2 ≥ σ, meaning that all the eigenvalues of ∇2fi(x)
lie in [−(cid:96)2, (cid:96)1].
We show that a variant of our method, which we call
Natashafull, solves this more reﬁned problem of (1.1) with
(cid:1) as
total gradient complexity O(cid:0)n log 1
long as (cid:96)1(cid:96)2
Remark 1.1. In applications, (cid:96)1 and (cid:96)2 can be of very dif-
ferent magnitudes. The most inﬂuential example is ﬁnding
the leading eigenvector of a symmetric matrix. Using the
so-called shift-and-invert reduction (Garber et al., 2016),
computing the leading eigenvector reduces to the con-
vex version of problem (1.1), where each fi(x) is (λ, 1)-
smooth for λ (cid:28) 1. Other examples include all the ap-
plications that are built on shift-and-invert, including high
rank SVD/PCA (Allen-Zhu & Li, 2016), canonical compo-
nent analysis (Allen-Zhu & Li, 2017a), online matrix learn-
ing (Allen-Zhu & Li, 2017b), and approximate local min-
ima algorithms (Agarwal et al., 2017; Carmon et al., 2016).

Mini-Batch. Our result generalizes trivially to the mini-
batch stochastic setting, where in each iteration one com-
putes ∇fi(x) for b random choices of index i ∈ [n] and av-
erage them. The stated gradient complexities of Natasha
and Natashafull can be adjusted so that the factor n2/3 is
replaced with n2/3b1/3.

1.5 Our Techniques

Let us ﬁrst recall the main idea behind stochastic variance-
reduced methods, such as SVRG (Johnson & Zhang, 2013).

The SVRG method divides iterations into epochs, each of
length n. It maintains a snapshot point (cid:101)x for each epoch,
and computes the full gradient ∇f ((cid:101)x) only for snapshots.
Then, in each iteration t at point xt, SVRG deﬁnes gradient
estimator (cid:101)∇ = ∇fi(xt) − ∇fi((cid:101)x) + ∇f ((cid:101)x) which satisﬁes
Ei[ (cid:101)∇] = ∇f (xt), and performs proximal update xt+1 ←
(cid:0)xt − α (cid:101)∇(cid:1) for some learning rate α. (Recall that
Proxψ,α
if ψ(·) ≡ 0 then we would have xt+1 ← xt − α (cid:101)∇.)
In nearly all
the aforementioned results for noncon-
vex optimization, researchers have either directly applied
SVRG (Allen-Zhu & Hazan, 2016) (for the case σ = L),
or repeatedly applied SVRG (Agarwal et al., 2017; Carmon
et al., 2016) (for general σ ∈ [0, L]). This puts some lim-
itation in the algorithmic design, because SVRG requires
each epoch to be of length exactly n.6

6The epoch length of SVRG is always n (or a constant mul-
tiple of n in practice), because this ensures the computation of
(cid:101)∇ is of amortized gradient complexity O(1). The per-iteration
complexity of SVRG is thus the same as the traditional stochastic

Our New Idea.
In this paper, we propose Natasha and
Natashafull, two methods that are no longer black-box re-
ductions to SVRG. Both of them still divide iterations into
epochs of length n, and compute gradient estimators (cid:101)∇ the
same way as SVRG. However, we do not apply compute
xt − α (cid:101)∇ directly.
• In our base algorithm Natasha, we divide each epoch
into p sub-epochs, each with a starting vector (cid:98)x. Our
theory suggests the choice p ≈ ( σ2
L2 n)1/3. Then, we
replace the use of (cid:101)∇ with (cid:101)∇ + 2σ(xt − (cid:98)x). This is
equivalent to replacing f (x) with its regularized version
f (x) + σ(cid:107)x −(cid:98)x(cid:107)2, where the center (cid:98)x varies across sub-
epochs. We provide pseudocode in Algorithm 1 and il-
lustrate it in Figure 2.

We view this additional term 2σ(xt − (cid:98)x) as a type of
retraction, which stabilizes the algorithm by moving
the vector a bit in the backward direction towards (cid:98)x.
• In our full algorithm Natashafull, we add one more in-
gredient on top of Natasha. That is, we perform up-
dates zt+1 ← Proxψ,α(zt − α (cid:101)∇) with respect to a dif-
2 zt + 1
ferent sequence {zt}, and then deﬁne xt = 1
2(cid:98)x
and compute gradient estimators (cid:101)∇ at points xt. We
provide pseudocode in Algorithm 2 in the appendix.
We view this averaging xt = 1
2(cid:98)x as another type
of retraction, which stabilizes the algorithm by mov-
ing towards (cid:98)x. The technique of computing gradients at
points xt but moving a different sequence of points zt is
related to the Katyusha momentum recently developed
for convex optimization (Allen-Zhu, 2017).

2 zt + 1

1.6 Other Related Work

Methods based on variance-reduced stochastic gradients
were ﬁrst introduced for convex optimization. The ﬁrst
such method is SAG by Schmidt et al (Schmidt et al.,
2013). The two most popular choices for gradient estima-
tors are the SVRG-like one we adopted in this paper (inde-
pendently introduced by (Johnson & Zhang, 2013; Zhang
et al., 2013), and the SAGA-like one introduced by (De-
fazio et al., 2014).
In nearly all applications, the results
proven for SVRG-like estimators and SAGA-like estima-
tors are simply exchangeable (therefore, the results of this
paper naturally generalize to SAGA-like estimators).

The ﬁrst “non-convex use” of variance reduction is by
Shalev-Shwartz (Shalev-Shwartz, 2016) who assumes that
each fi(x) is non-convex but their average f (x) is still con-
vex. This result has been slightly improved to several more
reﬁned settings (Allen-Zhu & Yuan, 2016). The ﬁrst truly
non-convex use of variance reduction (i.e., for f (x) being
also non-convex) is independently by (Allen-Zhu & Hazan,
2016) and (Reddi et al., 2016). First-order methods only

gradient descent (SGD).

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Figure 2: One full epoch of Natasha. The n iterations are divided into p sub-epochs, each consisting of m = n/p steps.

ﬁnd stationary points (unless there is extra assumption on
the randomness of the data), and converge no faster than
1/ε2.
When the second-order Hessian information is used, one
can (1) ﬁnd local minima instead of stationary points, and
(2) improve the 1/ε2 rate to 1/ε1.5. The ﬁrst such re-
sult is by cubic-regularized Newton’s method (Nesterov,
2008); however, its per-iteration complexity is very high.
Very recently, two independent groups of authors tackled
this problem from a somewhat similar viewpoint (Carmon
et al., 2016; Agarwal et al., 2017): if the computation of
Hessian-vector multiplications (i.e., (cid:0)∇2fi(x)(cid:1)v) is on the
same order of the computation of gradients ∇fi(x),7 then
ε)-approximate local minimum in
one can obtain a (ε,
(cid:1), if we use big-O to
gradient complexity (cid:101)O(cid:0) n
ε1.5 + n3/4
also hide dependencies on the smoothness parameters.

ε1.75

√

Other related papers include Ge et al. (Ge et al., 2015)
where the authors showed that a noise-injected version of
SGD converges to local minima instead of critical points,
as long as the underlying function is “strict-saddle.” Their
theoretical running time is a large polynomial in the dimen-
(Lee et al., 2016) showed that gradient
sion. Lee et al.
descent, starting from a random point, almost surely con-
verges to a local minimum if the function is “strict-saddle”.
The rate of convergence required is somewhat unknown.

2 Preliminaries

Throughout this paper, we denote by (cid:107) · (cid:107) the Euclidean
norm. We use i ∈R [n] to denote that i is generated from
[n] = {1, 2, . . . , n} uniformly at random. We denote by
∇f (x) the full gradient of function f if it is differentiable,
and ∂f (x) any subgradient if f is only Lipschitz continu-
ous at point x. We let x∗ be any minimizer of F (x).
Recall some deﬁnitions on strong convexity (SC), strongly
nonconvexity, and smoothness.
Deﬁnition 2.1. For a function f : Rd → R,

7A lot of interesting problems satisfy this property, including

training neural nets.

• f is σ-strongly convex if ∀x, y ∈ Rd, it satisﬁes

f (y) ≥ f (x) + (cid:104)∂f (x), y − x(cid:105) +

(cid:107)x − y(cid:107)2 .

• f is σ-strongly nonconvex if ∀x, y ∈ Rd, it satisﬁes

f (y) ≥ f (x) + (cid:104)∂f (x), y − x(cid:105) −

(cid:107)x − y(cid:107)2 .

σ
2

σ
2

• f is ((cid:96)1, (cid:96)2)-smooth if ∀x, y ∈ Rd, it satisﬁes

f (x) + (cid:104)∇f (x), y − x(cid:105) + (cid:96)1

≥ f (x) + (cid:104)∇f (x), y − x(cid:105) −

• f is L-smooth if it is (L, L)-smooth.

2 (cid:107)x − y(cid:107)2 ≥ f (y)
(cid:96)2
2

(cid:107)x − y(cid:107)2 .

The ((cid:96)1, (cid:96)2)-smoothness parameters were introduced
in (Allen-Zhu & Yuan, 2016) to tackle the convex setting
of problem (1.1). The notion of strong nonconvexity is
also known as “almost convexity (Carmon et al., 2016)”
or “lower smoothness (Allen-Zhu & Yuan, 2016).” We re-
frain from using the name “almost convexity” because it
coincides with several other non-equivalent deﬁnitions in
optimization literatures.

Deﬁnition 2.2. Given a parameter η > 0, the gradient
mapping of F (·) in (1.1) at point x is

Gη(x) :=

(cid:0)x − x(cid:48)(cid:1)

1
η

(cid:8)ψ(y) + (cid:104)∇f (x), y(cid:105) + 1
where x(cid:48) = arg miny
In particular, if ψ(·) ≡ 0, then Gη(x) ≡ ∇f (x).

2η (cid:107)y − x(cid:107)2(cid:9).

The following theorem for the SVRG method can be found
for instance in (Allen-Zhu & Yuan, 2016), which is built on
top of the results (Shalev-Shwartz, 2016; Lin et al., 2015;
Frostig et al., 2015):
Theorem 2.3 (SVRG). Let G(y) := ψ(y) + 1
i=1 gi(y)
n
be σ-strongly convex, then the SVRG method ﬁnds a point
y satisfying G(y) − G(y∗) ≤ ε
• with gradient complexity O(cid:0)(n + L2
gi(·) is L-smooth (for L ≥ σ); or

(cid:1), if each

σ2 ) log 1

(cid:80)n

ε

• with gradient complexity O(cid:0)(n + (cid:96)1(cid:96)2
gi(·) is ((cid:96)1, (cid:96)2)-smooth (for (cid:96)1, (cid:96)2 ≥ σ).

σ2 ) log 1

ε

(cid:1), if each

…regularized by 𝜎𝑥− 𝑥2…regularized by 𝜎𝑥− 𝑥2…regularized by 𝜎𝑥− 𝑥2… 𝒙next  𝒙………Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

If one performs acceleration, the running times become
(cid:101)O(cid:0)n + n3/4(cid:112)L/σ(cid:1) and (cid:101)O(cid:0)n + n3/4((cid:96)1(cid:96)2σ2)1/4(cid:1).

2.1 RepeatSVRG

We recall the idea behind a simple algorithm —that we call
repeatSVRG— which ﬁnds the ε-approximate stationary
points for problem (1.1) when f (x) is σ-strongly noncon-
vex. The algorithm is divided into stages. In each stage t,
consider a modiﬁed function Ft(x) := F (x) + σ(cid:107)x − xt(cid:107)2.
It is easy to see that Ft(x) is σ-strongly convex, so one can
apply the accelerated SVRG method to minimize Ft(x).
Let xt+1 be any sufﬁciently accurate approximate mini-
mizer of Ft(x).8
Section 4) that xt+1 is an
Now, one can prove (c.f.
O(σ(cid:107)xt − xt+1(cid:107))-approximate stationary point for F (x).
Therefore, if σ(cid:107)xt − xt+1(cid:107) ≤ ε we can stop the algorithm
because we have already found an O(ε)-approximate sta-
If σ(cid:107)xt − xt+1(cid:107) > ε , then it must sat-
tionary point.
isfy that F (xt) − F (xt+1) ≥ σ(cid:107)xt − xt+1(cid:107)2 ≥ Ω(ε2/σ),
but this cannot happen for more than T = O(cid:0) σ
ε2 (F (x0) −
F ∗) stages. Therefore, the total gradient complexity is
T multiplied with the complexity of accelerated SVRG
in each stage (which is (cid:101)O(n + n3/4(cid:112)L/σ) according to
Theorem 2.3).
Remark 2.4. The complexity of repeatSVRG can be in-
ferred from (Agarwal et al., 2017; Carmon et al., 2016), but
is not explicitly stated. For instance, the paper (Carmon
et al., 2016) does not allow F (x) to have a non-smooth
proximal term ψ(x), and applies accelerated gradient de-
scent instead of accelerated SVRG.

3 Our Algorithms

We introduce two variants of our algorithms: (1) the base
method Natasha targets on the simple regime when f (x)
and each fi(x) are both L-smooth, and (2) the full method
Natashafull targets on the more reﬁned regime when f (x)
is L-smooth but each fi(x) is ((cid:96)1, (cid:96)2)-smooth.
Both methods follow the general idea of variance-reduced
stochastic gradient descent:
in each inner-most iteration,
they compute a gradient estimator (cid:101)∇ that is of the form
(cid:101)∇ = ∇f ((cid:101)x)−∇fi((cid:101)x)+∇fi(x) and satisﬁes Ei∈R[n][ (cid:101)∇] =
∇f (x). Here, (cid:101)x is a snapshot point that is changed once
every n iterations (i.e., for each different k = 1, 2, . . . , T (cid:48)
in the pseudocode), and we call it a full epoch for every
distinct k. Notice that the amortized gradient complexity
for computing (cid:101)∇ is O(1) per-iteration.

Base Method.
In Natasha (see Algorithm 1), as illus-
trated by Figure 2, we divide each full epoch into p sub-
epochs s = 0, 1, . . . , p − 1, each of length m = n/p. In

8Since the accelerated SVRG method has a linear convergence
rate for strongly convex functions, the complexity to ﬁnd such
xt+1 only depends logarithmically on this accuracy.

each sub-epoch s, we start with a point x0 = (cid:98)x, and replace
f (x) with its regularized version f s(x) := f (x) + σ(cid:107)x −
(cid:98)x(cid:107)2. Then, in each iteration t of the sub-epoch s, we
• compute gradient estimator (cid:101)∇ with respect to f s(xt),
(cid:8)ψ(y) + (cid:104) (cid:101)∇, y(cid:105) +
• perform update xt+1 = arg miny
2α (cid:107)y − xt(cid:107)2(cid:9) with learning rate α.

1

Effectively, the introduction of the regularizer σ(cid:107)x − (cid:98)x(cid:107)2
makes sure that when performing update xt ← xt+1, we
also move a bit towards point (cid:98)x (i.e., retraction by regular-
ization). Finally, when the sub-epoch is done, we deﬁne (cid:98)x
to be a random one from {x0, . . . , xm−1}.

1

In Natashafull (see full version), we also
Full Method.
divide each full epoch into p sub-epochs. In each sub-epoch
s, we start with a point x0 = z0 = (cid:98)x and deﬁne f s(x) :=
f (x) + σ(cid:107)x − (cid:98)x(cid:107)2. However, this time in each iteration t,
we
• compute gradient estimator (cid:101)∇ with respect to f s(xt),
(cid:8)ψ(y) + (cid:104) (cid:101)∇, y(cid:105) +
• perform update zt+1 = arg miny

2α (cid:107)y − zt(cid:107)2(cid:9) with learning rate α, and
2 zt+1 + 1

• choose xt+1 = 1
2(cid:98)x.
Effectively, the regularizer σ(cid:107)x−(cid:98)x(cid:107)2 makes sure that when
performing updates, we move a bit towards point (cid:98)x (i.e.,
retraction by regularization); at the same time, the choice
xt+1 = 1
2(cid:98)x also helps us move towards point (cid:98)x
(i.e., retraction by the so-called “Katyusha momentum”9).
Finally, when the sub-epoch is over, we deﬁne (cid:98)x to be a
random one from the set {x0, . . . , xm−1}, and move to the
next sub-epoch.

2 zt+1 + 1

4 A Sufﬁcient Stopping Criterion

In this section, we present a sufﬁcient condition for ﬁnding
approximate stationary points in a σ-strongly nonconvex
function. Lemma 4.1 below states that, if we regularize the
original function and deﬁne G(x) := F (x) + σ(cid:107)x − (cid:98)x(cid:107)2
for an arbitrary point (cid:98)x, then the minimizer of G(x) is an
approximate saddle-point for F (x).
Lemma 4.1. Suppose G(y) = F (y) + σ(cid:107)y −(cid:98)x(cid:107)2 for some
given point (cid:98)x, and let x∗ be the minimizer of G(y). If we
minimize G(y) and obtain a point x satisfying

then for every η ∈ (cid:0)0,
mapping

G(x) − G(x∗) ≤ δ2σ ,
1
max{L,4σ}

(cid:3) we have the gradient

(cid:107)Gη(x)(cid:107)2 ≤ 12σ2(cid:107)x∗ − (cid:98)x(cid:107)2 + O(cid:0)δ2(cid:1) .
Notice that when ψ(x) ≡ 0 this lemma is trivial, and can
be found for instance in (Carmon et al., 2016). The main

9The idea for this second kind of retraction, and the idea of
having the updates on a sequence zt but computing gradients at
points xt, is largely motivated by our recent work on the Katyusha
momentum and the Katyusha acceleration (Allen-Zhu, 2017).

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Algorithm 1 Natasha(x∅, p, T (cid:48), α)
Input: starting vector x∅, sub-epoch count p ∈ [n], epoch count T (cid:48), learning rate α > 0.
Output: vector xout.
1: (cid:98)x ← x∅; m ← n/p; X ← [];
2: for k ← 1 to T (cid:48) do
3:
4:
5:
6:
7:
8:

x0 ← (cid:98)x; X ← [X, (cid:98)x];
for t ← 0 to m − 1 do

(cid:101)x ← (cid:98)x; µ ← ∇f ((cid:101)x);
for s ← 0 to p − 1 do

i ← a random choice from {1, · · · , n}.
(cid:101)∇ ← ∇fi(xt) − ∇fi((cid:101)x) + µ + 2σ(xt − (cid:98)x)
xt+1 = arg miny∈Rd

end for
(cid:98)x ← a random choice from {x0, x1, . . . , xm−1};

9:
10:
11:
12:
13: end for
14: (cid:98)x ← a random vector in X;
15: xout ← an approximate minimizer of G(y) := F (y) + σ(cid:107)y − (cid:98)x(cid:107)2 using SVRG.
16: return xout.

2α (cid:107)y − xt(cid:107)2 + (cid:104) (cid:101)∇, y(cid:105)(cid:9)

(cid:8)ψ(y) + 1

end for

(cid:5) T (cid:48) full epochs

(cid:5) p sub-epochs in each epoch

(cid:5) m iterations in each sub-epoch

(cid:5) Ei[ (cid:101)∇] = ∇(cid:0)f (x) + σ(cid:107)x − (cid:98)x(cid:107)2(cid:1)(cid:12)
(cid:12)xt

(cid:5) for practitioners, choose the average

(cid:5) for practitioners, choose the last

(cid:5) it sufﬁces to run SVRG for O(n log 1

ε ) iterations.

technical difﬁculty arises in order to deal with ψ(x) (cid:54)= 0.
The proof is included in the full version.

5 Base Method: Analysis for One Full Epoch

In this section, we consider problem (1.1) where each fi(x)
is L-smooth and F (x) is σ-strongly nonconvex. We use
our base method Natasha to minimize F (x), and analyze
its behavior for one full epoch in this section. We assume
σ ≤ L without loss of generality, because any L-smooth
function is also L-strongly nonconvex.

Notations. We introduce the following notations for anal-
ysis purpose only.
• Let (cid:98)xs be the vector (cid:98)x at the beginning of sub-epoch s.
• Let xs
t be the vector xt in sub-epoch s.
• Let is
t be the index i ∈ [n] in sub-epoch s at iteration t.
• Let f s(x) := f (x) + σ(cid:107)x − (cid:98)xs(cid:107)2, F s(x) := F (x) +

σ(cid:107)x − (cid:98)xs(cid:107)2, and xs

∗ := arg minx{F s(x)}.

• Let (cid:101)∇f s(xs

t ) := ∇fi(xs

t )−∇fi((cid:101)x)+∇f ((cid:101)x)+2σ(xt −

(cid:98)x) where i = is
t .

• Let (cid:101)∇f (xs
i = is
t .

t ) := ∇fi(xs

t ) − ∇fi((cid:101)x) + ∇f ((cid:101)x) where

We obviously have that f s(x) and F s(x) are σ-strongly
convex, and f s(x) is (L + 2σ)-smooth.

5.1 Variance Upper Bound

The following lemma gives an upper bound on the variance
of the gradient estimator (cid:101)∇f s(xs
Lemma 5.1. We have Eis
t − (cid:98)xs(cid:107)2 + pL2 (cid:80)s−1
pL2(cid:107)xs

t ):
(cid:2)(cid:107) (cid:101)∇f s(xs

k=0 (cid:107)(cid:98)xk − (cid:98)xk+1(cid:107)2 .

t ) − ∇f s(xs

t )(cid:107)2(cid:3) ≤

t

(cid:2)(cid:107) (cid:101)∇f (xs

t )(cid:107)2(cid:3)
t ) − ∇f (xs
t ) − ∇f ((cid:101)x))(cid:1)(cid:13)
2(cid:3)
(cid:13)

Proof. We have
(cid:2)(cid:107) (cid:101)∇f s(xs
(cid:2)(cid:13)
(cid:13)

Eis
= Ei∈R[n]

t

(cid:0)∇fi(xs

≤ Ei∈R[n]

(cid:172)

(cid:173)

t ) − ∇f s(xs

t

t )(cid:107)2(cid:3) = Eis
t ) − ∇fi((cid:101)x)(cid:1) − (cid:0)∇f (xs
t ) − ∇fi((cid:101)x)(cid:13)
2(cid:3)
(cid:13)
t ) − ∇fi((cid:98)xs)(cid:13)
(cid:13)

(cid:2)(cid:13)
(cid:13)∇fi(xs
(cid:2)(cid:13)
(cid:13)∇fi(xs

k=0

+ p (cid:80)s−1

≤ pEi∈R[n]

2(cid:3)
(cid:13)∇fi((cid:98)xk) − ∇fi((cid:98)xk+1)(cid:13)
(cid:2)(cid:13)
2(cid:3)
(cid:13)
k=0 (cid:107)(cid:98)xk − (cid:98)xk+1(cid:107)2 .

Ei∈R[n]
t − (cid:98)xs(cid:107)2 + pL2 (cid:80)s−1

(cid:174)
≤ pL2(cid:107)xs
Above, inequality (cid:172) is because for any random vector ζ ∈
Rd, it holds that E(cid:107)ζ − Eζ(cid:107)2 = E(cid:107)ζ(cid:107)2 − (cid:107)Eζ(cid:107)2; inequality
(cid:173) is because (cid:98)x0 = (cid:101)x and for any p vectors a1, a2, . . . , ap ∈
Rd, it holds that (cid:107)a1 +· · ·+ap(cid:107)2 ≤ p(cid:107)a1(cid:107)2 +· · ·+p(cid:107)ap(cid:107)2;
and inequality (cid:174) is because each fi(·) is L-smooth. (cid:3)

5.2 Analysis for One Sub-Epoch

The following inequality is classically known as the “re-
gret inequality” for mirror descent (Allen-Zhu & Orecchia,
2017), and its proof is classical (see full version):

Fact 5.2.
t −u(cid:107)2
(cid:107)xs
2α −

(cid:104) (cid:101)∇f s(xs
t+1−u(cid:107)2
(cid:107)xs
2α

t ), xs
−

t+1 − u(cid:105) + ψ(xs
t (cid:107)2
(cid:107)xs

t+1−xs
2α

for every u ∈ Rd.

t+1) − ψ(u) ≤

The following lemma is our main contribution for the base
method Natasha.
Lemma 5.3. As long as α ≤ 1
(cid:104)(cid:0)F s((cid:98)xs+1) − F s(xs
(cid:104) F s((cid:98)xs) − F s(xs
∗)
σαm/2

∗)(cid:1)(cid:105)
+αpL2(cid:16) s

(cid:107)(cid:98)xk −(cid:98)xk+1(cid:107)2(cid:17)(cid:105)

2L+4σ , we have

≤ E

(cid:88)

E

.

k=0

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Proof. We ﬁrst compute that
t+1) − F s(u) = f s(xs

F s(xs

(cid:172)
≤ f s(xs

t ) + (cid:104)∇f s(xs
− f s(u) + ψ(xs

t ), xs

t+1 − xs

t+1) − ψ(u)

(cid:173)
≤ (cid:104)∇f s(xs

t ), xs
+ (cid:104)∇f s(xs

t (cid:105) +

t+1 − xs
t ), xs

L + 2σ
2
t − u(cid:105) + ψ(xs

t+1) − f s(u) + ψ(xs
L + 2σ
2

t (cid:105) +

(cid:107)xs

t+1) − ψ(u)

t − xs

t+1(cid:107)2

(cid:107)xs

t − xs

t+1(cid:107)2

t+1) − ψ(u) .

(5.1)
Above, inequality (cid:172) uses the fact that f s(·) is (L + 2σ)-
smooth; and inequality (cid:173) uses the convexity of f s(·). Now,
we take expectation with respect to is
t on both sides of (5.1),
and derive that:

t+1)(cid:3) − F s(u)

(cid:2)F s(xs
(cid:104)

Eis

t

(cid:172)
≤ Eis

t

(cid:104) (cid:101)∇f s(xs
L + 2σ
2

(cid:104) (cid:101)∇f s(xs
(cid:107)xs

+

−

(cid:104)

(cid:173)
≤ Eis

t

(cid:104)

(cid:174)
≤ Eis

t

(cid:104)

(cid:175)
≤ Eis

t

t ) − ∇f s(xs

t ), xs

t − xs

t+1(cid:105) + (cid:104) (cid:101)∇f s(xs

t ), xs

t+1 − u(cid:105)

(cid:107)xs

t − xs

t+1(cid:107)2 + ψ(xs

t+1) − ψ(u)

t ) − ∇f s(xs

t ), xs

t − xs

t+1(cid:105) +

t+1 − u(cid:107)2
2α

− (cid:0) 1
2α

−

L + 2σ
2

(cid:1)(cid:107)xs

t+1 − xs

(cid:105)

(cid:107)xs

t − u(cid:107)2
2α
t (cid:107)2(cid:105)
(cid:107)xs

−

α(cid:13)
(cid:13) (cid:101)∇f s(xs

t ) − ∇f s(xs

t )(cid:13)
(cid:13)

2 +

(cid:107)xs

t − u(cid:107)2
2α

t+1 − u(cid:107)2
2α

(cid:105)

αpL2(cid:107)xs

t − (cid:98)xs(cid:107)2 + αpL2

(cid:107)(cid:98)xk − (cid:98)xk+1(cid:107)2

+

(cid:107)xs

t − u(cid:107)2
2α

−

(cid:107)xs

t+1 − u(cid:107)2
2α

(5.2)

t

t

t

[ (cid:101)∇f s(xs

t ) implies

t ), xs
t+1 − xs
t )−∇f s(xs

Above, inequality (cid:172) is follows from (5.1) together with
the fact that Eis
t )] = ∇f s(xs
(cid:2)(cid:104)∇f s(xs
t (cid:105) + (cid:104)∇f s(xs
Eis
(cid:2)(cid:104) (cid:101)∇f s(xs
t −xs
t ), xs
= Eis
inequality (cid:173) uses Fact 5.2; inequality (cid:174) uses α ≤ 1
together with Young’s inequality (cid:104)a, b(cid:105) ≤ 1
and inequality (cid:175) uses Lemma 5.1.
Finally, choosing u = xs
∗ to be the (unique) minimizer of
F s(·) = f s(·) + ψ(·), and telescoping inequality (5.2) for
t = 0, 1, . . . , m − 1, we have

t − u(cid:105)(cid:3)
t ), xs
t+1(cid:105)+(cid:104) (cid:101)∇f s(xs

2 (cid:107)a(cid:107)2 + 1

2 (cid:107)b(cid:107)2;

t ), xs

2L+4σ

t+1−u(cid:105)(cid:3) ;

s−1
(cid:88)

k=0
(cid:105)

.

(cid:104) m−1
(cid:88)

E

t=1

(cid:0)F s(xs

t ) − F s(xs

∗)(cid:1)(cid:105)

≤ E

(cid:104) (cid:107)xs

∗(cid:107)2

0 − xs
2α

+

m−1
(cid:88)

(cid:16)

t=0

αpL2(cid:107)xs

t − (cid:98)xs(cid:107)2

+ αpL2

(cid:107)(cid:98)xk − (cid:98)xk+1(cid:107)2(cid:17)(cid:105)

s−1
(cid:88)

k=0

k=0

≤ E

(cid:104) F s((cid:98)xs) − F s(xs
∗)
σα

+ αpmL2(cid:16) s
(cid:88)

(cid:107)(cid:98)xk − (cid:98)xk+1(cid:107)2(cid:17)(cid:105)

.

Above, the second inequality uses the fact that (cid:98)xs+1 is cho-
0, . . . , xs
sen from {xs
m−1} uniformly at random, as well as
the σ-strong convexity of F s(·).

Dividing both sides by m and rearranging the terms (using
1
2σα ≥ 1), we have

E

∗)(cid:1)(cid:105)

(cid:104)(cid:0)F s((cid:98)xs+1) − F s(xs
(cid:104) F s((cid:98)xs) − F s(xs
∗)
σαm/2

≤ E

+ αpL2(cid:16) s
(cid:88)

(cid:107)(cid:98)xk − (cid:98)xk+1(cid:107)2(cid:17)(cid:105)

. (cid:3)

k=0

5.3 Analysis for One Full Epoch

One can telescope Lemma 5.3 for an entire epoch and ar-
rive at the following lemma (see full version):

If α ≤ 1

2L+4σ , α ≥ 4

σm and α ≤ σ

p2L2 , we

E

(cid:104)(cid:0)F s((cid:98)xs) − F s(xs

∗)(cid:1)(cid:105)

(cid:104)
≤ 2E

(cid:105)
F ((cid:98)x0) − F ((cid:98)xp)

.

Lemma 5.4.
have
p−1
(cid:88)

s=0

6 Base Method: Final Theorem

We are now ready to state and prove our main convergence
theorem for Natasha:
Theorem 1. Suppose in (1.1), each fi(x) is L-smooth
and F (x) is σ-strongly nonconvex for σ ≤ L. Then, if
σ2 ≤ n, p = Θ(cid:0)( σ2
L2
p2L2 ), our base
method Natasha outputs a point xout satisfying

L2 n)1/3(cid:1) and α = Θ( σ

(cid:17)

(cid:16) (L2σ)1/3n2/3
· (F (x∅) − F ∗) .
T (cid:48)n
(cid:3). In other words, to obtain

E[(cid:107)Gη(xout)(cid:107)2] ≤ O
for every η ∈ (cid:0)0,
E[(cid:107)Gη(xout)(cid:107)2] ≤ ε2, we need gradient complexity
(L2σ)1/3n2/3
(cid:17)
· (F (x∅) − F ∗)
ε2

1
max{L,4σ}

n log

1
ε

+

O

(cid:16)

.

In the above theorem, we have assumed σ ≤ L without
loss of generality because any L-smooth function is also
L-strongly nonconvex. Also, we have assumed L2
σ2 ≤ n
and if this inequality does not hold, then one should apply
repeatSVRG for a faster running time (see Figure 1).

1

24L2 n(cid:1)1/3
Proof of Theorem 1. We choose p = (cid:0) σ2
, m =
n/p, and α = 4
σm = σ
6p2L2 ≤
2L+4σ , so we can apply
Lemma 5.4. If we telescope Lemma 5.4 for the entire al-
gorithm (which has T (cid:48) full epochs), and use the fact that
(cid:98)xp of the previous epoch equals (cid:98)x0 of the next epoch, we
conclude that if we choose a random epoch and a random
subepoch s, we will have

E[F s((cid:98)xs) − F s(xs

∗)] ≤

2
pT (cid:48) (F (x∅) − F ∗) .

pT (cid:48) (F (x∅) − F ∗).

By the σ-strong convexity of F s(·), we have E[σ(cid:107)(cid:98)xs −
∗(cid:107)2] ≤ 4
xs
Now, F s(x) = F (x) + σ(cid:107)x −(cid:98)xs(cid:107)2 satisﬁes the assumption
of G(x) in Lemma 4.1. If we use the SVRG method (see
Theorem 2.3) to minimize the convex function F s(x), we

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

get an output xout satisfying F s(xout) − F s(xs
gradient complexity O(cid:0)(n + L2
We can therefore apply Lemma 4.1 and conclude that this
output xout satisﬁes

∗) ≤ ε2σ in
ε ).

(cid:1) ≤ O(n log 1

σ2 ) log 1

ε

E[(cid:107)Gη(xout)(cid:107)2] ≤ O

· (F (x∅) − F ∗)

(cid:17)

(cid:16) σ
pT (cid:48)

= O

(cid:16) (L2σ)1/3n2/3
T (cid:48)n

(cid:17)

· (F (x∅) − F ∗) .

In other words, we obtain E[(cid:107)Gη(xout)(cid:107)2] ≤ ε2 using
(cid:17)
n + (L2σ)1/3n2/3

· (F (x∅) − F ∗)

T (cid:48)n = O

(cid:16)

ε2

computations of the stochastic gradients. Here, the additive
term n is because T (cid:48) ≥ 1.
Finally, adding this with O(n log 1
ε ), the gradient complex-
ity for the application of SVRG in the last line of Natasha,
we ﬁnish the proof of the total gradient complexity. (cid:3)

7 Full Method: Final Theorem

We analyze and state the main theorems for our full method
Natashafull in the full version of this paper.

8 Conclusion

Stochastic gradient descent and gradient descent (including
alternating minimization) have become the canonical meth-
ods for solving non-convex machine learning tasks. How-
ever, can we design new non-convex methods to run even
faster than SGD or GD?

This present paper tries to tackle this general question, by
providing a new Natasha method which is intrinsically dif-
ferent from GD or SGD. It runs faster than GD and SVRG-
based methods at least in theory. We hope that this could
be a non-negligible step towards our better understanding
of non-convex optimization.

Finally, our results give rise to an interesting dichotomy in
the best-known complexity of ﬁrst-order non-convex opti-
mization: the complexity scales with n3/4 for σ < L/
n
√
and with n2/3 for σ > L/
n. It remains open to investi-
gate whether this dichotomy is intrinsic, or we can design
a more efﬁcient algorithm that outperforms both.

√

References

Agarwal, Naman, Allen-Zhu, Zeyuan, Bullins, Brian,
Hazan, Elad, and Ma, Tengyu. Finding Approximate Lo-
cal Minima for Nonconvex Optimization in Linear Time.
In STOC, 2017.

Allen-Zhu, Zeyuan. Katyusha: The First Direct Accelera-
tion of Stochastic Gradient Methods. In STOC, 2017.

Allen-Zhu, Zeyuan and Hazan, Elad. Variance Reduction
for Faster Non-Convex Optimization. In NIPS, 2016.

Allen-Zhu, Zeyuan and Li, Yuanzhi. LazySVD: Even
Faster SVD Decomposition Yet Without Agonizing
Pain. In NIPS, 2016.

Allen-Zhu, Zeyuan and Li, Yuanzhi. Doubly Accelerated
Methods for Faster CCA and Generalized Eigendecom-
position. In Proceedings of the 34th International Con-
ference on Machine Learning, ICML ’17, 2017a.

Allen-Zhu, Zeyuan and Li, Yuanzhi. Follow the Com-
pressed Leader: Faster Online Learning of Eigenvectors
In Proceedings of the 34th Inter-
and Faster MMWU.
national Conference on Machine Learning, ICML ’17,
2017b.

Allen-Zhu, Zeyuan and Orecchia, Lorenzo. Linear Cou-
pling: An Ultimate Uniﬁcation of Gradient and Mirror
Descent. In Proceedings of the 8th Innovations in Theo-
retical Computer Science, ITCS ’17, 2017.

Allen-Zhu, Zeyuan and Yuan, Yang.

Improved SVRG
for Non-Strongly-Convex or Sum-of-Non-Convex Ob-
jectives. In ICML, 2016.

Carmon, Yair, Duchi, John C., Hinder, Oliver, and Sidford,
Aaron. Accelerated Methods for Non-Convex Optimiza-
tion. ArXiv e-prints, abs/1611.00756, November 2016.

Defazio, Aaron, Bach, Francis, and Lacoste-Julien, Simon.
SAGA: A Fast Incremental Gradient Method With Sup-
port for Non-Strongly Convex Composite Objectives.
In NIPS, 2014. URL http://arxiv.org/abs/
1407.0202.

Frostig, Roy, Ge, Rong, Kakade, Sham M., and Sidford,
Aaron. Un-regularizing: approximate proximal point
and faster stochastic algorithms for empirical risk min-
imization. In ICML, volume 37, pp. 1–28, 2015. URL
http://arxiv.org/abs/1506.07512.

Garber, Dan, Hazan, Elad, Jin, Chi, Kakade, Sham M.,
Musco, Cameron, Netrapalli, Praneeth, and Sidford,
Aaron. Robust shift-and-invert preconditioning: Faster
and more sample efﬁcient algorithms for eigenvector
computation. In ICML, 2016.

Ge, Rong, Huang, Furong, Jin, Chi, and Yuan, Yang. Es-
caping from saddle points—online stochastic gradient
for tensor decomposition. In Proceedings of the 28th An-
nual Conference on Learning Theory, COLT 2015, 2015.

for

nonconvex

gradient methods

Ghadimi, Saeed and Lan, Guanghui.

and stochastic programming.

Acceler-
nonlin-
ated
Mathemati-
ear
cal Programming, pp. 1–26,
ISSN
feb 2015.
10.1007/s10107-015-0871-8.
doi:
0025-5610.
http://arxiv.org/abs/1310.
URL
3787http://link.springer.com/10.1007/
s10107-015-0871-8.

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Johnson, Rie and Zhang, Tong. Accelerating stochas-
tic gradient descent using predictive variance reduction.
In Advances in Neural Information Processing Systems,
NIPS 2013, pp. 315–323, 2013.

Lee, Jason D., Simchowitz, Max, Jordan, Michael I., and
Recht, Benjamin. Gradient descent only converges to
minimizers. In Proceedings of the 29th Conference on
Learning Theory, COLT 2016, New York, USA, June 23-
26, 2016, pp. 1246–1257, 2016.

Lin, Hongzhou, Mairal, Julien, and Harchaoui, Zaid.
A Universal Catalyst
for First-Order Optimization.
In NIPS, 2015. URL http://arxiv.org/pdf/
1506.02186v1.pdf.

Nesterov, Yurii. Accelerating the cubic regularization of
newton’s method on convex problems. Mathematical
Programming, 112(1):159–181, 2008.

Reddi, Sashank J., Hefny, Ahmed, Sra, Suvrit, Poczos,
Barnabas, and Smola, Alex. Stochastic variance re-
duction for nonconvex optimization. ArXiv e-prints,
abs/1603.06160, March 2016.

Schmidt, Mark, Le Roux, Nicolas, and Bach, Francis. Min-
imizing ﬁnite sums with the stochastic average gradi-
ent. arXiv preprint arXiv:1309.2388, pp. 1–45, 2013.
URL http://arxiv.org/abs/1309.2388. Pre-
liminary version appeared in NIPS 2012.

Shalev-Shwartz, Shai. SDCA without Duality, Regulariza-

tion, and Individual Convexity. In ICML, 2016.

Zhang, Lijun, Mahdavi, Mehrdad, and Jin, Rong. Linear
convergence with condition number independent access
of full gradients. In Advances in Neural Information Pro-
cessing Systems, pp. 980–988, 2013.

