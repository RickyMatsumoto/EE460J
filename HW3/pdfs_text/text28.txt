000
001
002
003
004
005
006
007
008
009
010
011
012
013
014
015
016
017
018
019
020
021
022
023
024
025
026
027
028
029
030
031
032
033
034
035
036
037
038
039
040
041
042
043
044
045
046
047
048
049
050
051
052
053
054

1.

2.

3.

An Efﬁcient, Sparsity-Preserving Online Algorithm for Data Approximation:
Supplementary Material

1. The Singular Value Decomposition (SVD)

For any real matrix A ∈ Rm×n there exist orthogonal matrices U ∈ Rm×m and V ∈ Rn×n such that

UT AV = diag (σ1, · · · , σp) def= Σ

such that p = min(m, n) and σ1 ≥ · · · ≥ σp ≥ 0. The decomposition A = UΣVT is known as the Singular Value
Decomposition (Golub & van Loan, 2013).

For a given matrix A with rank ρ and a target rank k, rank-k approximation using the SVD achieves the minimal residual
error in both spectral and Frobenius norms:

Theorem (Eckart-Young (Eckart & Young, 1936; Golub & van Loan, 2013)).

min
rank(B)≤k

||A − B||2

ξ = ||A − Ak||2

ξ =

σj (A)

ρ
(cid:88)

j=k+1

where ξ = F or 2.

2. Further Discussion of Rank-Revealing Algorithms

An important class of algorithms against which we test SRLU is rank-revealing algorithms for low-rank approximation:

Deﬁnition 1. An LU factorization is rank-revealing (Miranian & Gu, 2003) if

σk (A) ≥ σmin (L11U11) (cid:29) σmax (S) ≥ σk+1 (A) ≈ 0.

Several drawbacks exists to the above deﬁnition, including that L11U11 is not a low-rank approximation of the original data
matrix, and that only certain singular values are bounded. Stronger algorithms were developed in (Miranian & Gu, 2003) by
modifying the deﬁnition above to create strong rank-revealing algorithms:

Deﬁnition 2. An LU factorization is strong rank-revealing if

σi (A11) ≥

σi (A)
q1 (k, m, n)

,

σj (S) ≤ σk+j (A) q1 (k, m, n) ,

(cid:12)
(cid:12)

(cid:0)A21A−1

11

(cid:1) |ij(cid:12)

(cid:12) ≤ q2 (k, n, m) ,

(cid:12)
(cid:12)

(cid:0)A−1

11 A12

(cid:1) |ij(cid:12)

(cid:12) ≤ q3 (k, n, m) ,

055
056
057
058
059
060
061
062
063
064
065
066
067
068
069
070
071
072
073
074
075
076
077
078
079
080
081
082
083
084
085
086
087
088
089
090
091
092
093
094
095
096
097
098
099
100
101
102
103
104
105
106
107
108
109

Supplementary Material

where 1 ≤ i ≤ k, 1 ≤ j ≤ n − k, and q1 (k, m, n), q2 (k, m, n) , and q3 (k, m, n) are functions bounded by low-degree
polynomials of k, m, and n.

Strong rank-revealing algorithms bound all singular values of the submatrix A11, but, as before, do not produce a low-rank
approximation. Furthermore, they require bounding approximations of the left and right null spaces of the data matrix,
which is both costly and not strictly necessary for the creation of a low-rank approximation. No known algorithms or
numeric experiments demonstrate that strong rank-revealing algorithms can indeed be implemented efﬁciently in practice.

3. Updating R

The goal of TRLUCP is to access the entire matrix once in the initial random projection, and then choose column pivots at
each iteration without accessing the Schur complement. Therefore, a projection of the Schur complement must be obtained
at each iteration without accessing the Schur complement, a method that ﬁrst appeared in (Melgaard & Gu, 2015). Assume
that s iterations of TRLUCP have been performed and denote the projection matrix

Then the current projection of the Schur complement is

Ω = (cid:0)

sb
b
Ω1 Ω2

n − (s + 1)b
Ω3

(cid:1).

Rcur = (cid:0)

b
Rcur
1

n − (s + 1)b
Rcur
2

(cid:1) = (cid:0)Ω2 Ω3

(cid:1)

(cid:18)S11 S12
S21 S22

(cid:19)

,

where the right-most matrix is the current Schur complement. The next iteration of TRLUCP will need to choose columns
based on a random projection of the Schur complement, which we wish to avoid accessing. We can write:

Rupdate = Ω3

(cid:0)A33 − A32A−1

22 A23

(cid:1)

= Ω3A33 + Ω2A23 − Ω2A23 − Ω3A32A−1
22 A23
= Ω3A33 + Ω2A23 − Ω2L22U23 − Ω3L32U23
= Rcurrent
− (Ω2L22 + Ω3L32) U23.
2

(1)

Here the current L and U at stage s have been blocked in the same way as Ω. Note equation (1) no longer has the term A33.
Furthermore, A−1
22 has been replaced by substituting in submatrices of L and U that have already been calculated, which
helps eliminate potential instability.

When the block size b = 1 and TRLUCP runs fully (k = min(m, n)), TRLUCP is mathematically equivalent to the
Gaussian Elimination with Randomized Complete Pivoting (GERCP) algorithm of (Melgaard & Gu, 2015). However,
TRLUCP differs from GERCP in two very important aspects: TRLUCP is based on the Crout variant of the LU factorization,
which allows efﬁcient truncation for low-rank matrix approximation; and TRLUCP has been structured in block form for
more efﬁcient implementation.

4. Proofs of Theorems

Theorem 1. For any truncated LU factorization

for any norm (cid:107) · (cid:107). Furthermore,

(cid:107)Π1AΠT

2 − (cid:98)L (cid:98)U(cid:107) = (cid:107)S(cid:107)

(cid:107)Π1AΠT

2 −

(cid:98)L (cid:98)U

(cid:16)

(cid:17)

s

(cid:107)2 ≤ 2(cid:107)S(cid:107)2 + σs+1 (A)

where (·)s is the rank-s truncated SVD for s ≤ k (cid:28) m, n.

110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164

165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219

Proof. The equation simply follows from Π1AΠT

2 = (cid:98)L (cid:98)U +

. For the inequality:

Supplementary Material

(cid:19)

(cid:18)0

0
0 S

(cid:107)Π1AΠT

2 −

(cid:98)L (cid:98)U

(cid:16)

(cid:17)

(cid:107)2

s

= (cid:107)Π1AΠT

2 − (cid:98)L (cid:98)U + (cid:98)L (cid:98)U −

≤ (cid:107)Π1AΠT

2 − (cid:98)L (cid:98)U(cid:107)2 + (cid:107)(cid:98)L (cid:98)U −
(cid:17)

(cid:16)

= (cid:107)S(cid:107)2 + σs+1

(cid:98)L (cid:98)U

(cid:16)

(cid:17)

(cid:98)L (cid:98)U
(cid:16)

s

(cid:107)2
(cid:17)

(cid:98)L (cid:98)U

(cid:107)2

s

= (cid:107)S(cid:107)2 + σs+1

Π1AΠT

2 −

(cid:18)

(cid:19)(cid:19)

(cid:18)0

0
0 S

≤ (cid:107)S(cid:107)2 + σs+1 (A) + (cid:107)S(cid:107)2.

Theorem 2. For a general rank-k truncated LU decomposition





(cid:16)

(cid:17)

σj (A) ≤ σj

(cid:98)L (cid:98)U

1 +

1 +





(cid:17)



 .

(cid:107)S(cid:107)2
σj (A)

(cid:107)A(cid:107)2
(cid:16)

(cid:98)L (cid:98)U

σk

Proof.

σj (A)

(cid:16)

(cid:17)

≤ σj

(cid:98)L (cid:98)U

1 +

(cid:16)

(cid:17)

= σj

(cid:98)L (cid:98)U

1 +











(cid:17)

(cid:107)S(cid:107)2
(cid:16)

(cid:98)L (cid:98)U

σj

σj (A)
(cid:16)

(cid:17)

(cid:98)L (cid:98)U

(cid:16)

(cid:17)

σj

σj

(cid:98)L (cid:98)U
(cid:16)

σj





(cid:107)S(cid:107)2
σj (A)

(cid:16)

(cid:17)

≤ σj

(cid:98)L (cid:98)U

1 +





(cid:16)

(cid:17)

= σj

(cid:98)L (cid:98)U

1 +

1 +





(cid:16)

(cid:17)

≤ σj

(cid:98)L (cid:98)U

1 +

1 +









+ (cid:107)S(cid:107)2
(cid:17)

(cid:98)L (cid:98)U

(cid:107)S(cid:107)2
σj (A)





(cid:17)





(cid:17)

(cid:107)S(cid:107)2
(cid:16)

(cid:98)L (cid:98)U

σj

(cid:107)S(cid:107)2
(cid:16)

σk

(cid:98)L (cid:98)U

(cid:107)S(cid:107)2
σj (A)



 .

(cid:107)S(cid:107)2
σj (A)

220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274

Note that the relaxation in the ﬁnal step serves to establish a universal constant across all j, which leads to fewer terms that
need bounding when the global SRLU swapping strategy is developed.

Theorem 3.

(cid:107)Π1AΠT
(cid:107)Π1AΠT

2 − (cid:98)LM (cid:98)U(cid:107)2 ≤ 2(cid:107)S(cid:107)2,
2 − (cid:98)LM (cid:98)U(cid:107)F ≤ (cid:107)S(cid:107)F .

275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329

Proof. First

Also

Supplementary Material

2 − (cid:98)LM (cid:98)U(cid:107)2

0
C (cid:0)QU

(cid:1)T

(cid:1)T

C (cid:0)QU

(cid:1)T

C (cid:0)QU

2

1
(cid:1)T (cid:12)
(cid:12)
(cid:12)
C (cid:0)QU
1
(cid:1)T (cid:12)
(cid:12)
(cid:12)
(cid:16)(cid:0)QU

2

1

(cid:12)
(cid:12)
(cid:12)2
(cid:1)T

(cid:12)
(cid:12)
(cid:12)2
(cid:1)T

(cid:1)T

C

1

≤

=

(cid:107)Π1AΠT
(cid:12)
(cid:32)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:0)QL
2
(cid:1)T

(cid:0)QL
(cid:12)
(cid:12)
(cid:16)(cid:0)QL
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:1)T
(cid:0)QL
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
≤ 2(cid:107)C(cid:107)2
= 2(cid:107)S(cid:107)2.

(cid:0)QL

+

+

=

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

2

1

2

(cid:0)QL
(cid:0)QL

1

2

(cid:1)T
(cid:1)T

C (cid:0)QU
C (cid:0)QU

2

2

(cid:1)T
(cid:1)T

(cid:33)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)2

(cid:0)QL

2

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)2

(cid:0)QU

2

(cid:1)T (cid:17)(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)2

(cid:1)

1 QL
2

2 − (cid:98)LM (cid:98)U(cid:107)F
(cid:32)(cid:0)QL
(cid:0)QL
A (cid:0)QU

(cid:0)QL

(cid:1)T

2

1

1

2

(cid:0)QL

1

(cid:1)T

C (cid:0)QU
(cid:32)

2

1 QL
2

(cid:1)

(cid:1)T
(cid:1)T

(cid:1)T

(cid:1)T

(cid:0)QL

2

(cid:1)T

2

(cid:0)QL
(cid:32)(cid:0)QL
(cid:0)QL

1

2

(cid:1)T

(cid:1)T
(cid:1)T

1 QL
2

1

(cid:1)T

0
C (cid:0)QU
C (cid:0)QU
(cid:1)T
C (cid:0)QU
(cid:1)T
(cid:32)(cid:0)QL
(cid:0)QL

(cid:1)

1

1

1

2

(cid:1)T
(cid:1)T

1

1

=

=

=

=

(cid:0)QL

(cid:0)QL

(cid:107)Π1AΠT
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)QL
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)QL
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
= (cid:107)C(cid:107)F
= (cid:107)S(cid:107)F .

(cid:0)QL

(cid:32)

=

≤

=

(cid:33)

(cid:16)(cid:0)QU

1

(cid:1)T

A

(cid:0)QU

2

(cid:19)

(cid:1)T (cid:17) (cid:18)QU
1
QU
2

− QL
1

(cid:0)QL

1

(cid:1)T

A (cid:0)QU

1

(cid:1)T

QU
1

QU

2 + QL
2

(cid:0)QL

2

(cid:1)T

A (cid:0)QU

1

(cid:1)T

QU

1 + QL
2

(cid:0)QL

2

(cid:1)T

A (cid:0)QU

2

(cid:1)T

QU
2

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)F
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)F
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)F
(cid:12)

(cid:1)T

C (cid:0)QU

2

(cid:1)T

QU
2

2

(cid:0)QL
1 + QL
QU
2
(cid:19)(cid:12)
(cid:12)
(cid:33) (cid:18)QU
(cid:12)
(cid:12)
(cid:12)
(cid:12)
1
(cid:12)
(cid:12)
QU
(cid:12)F
(cid:12)
2

QU

2 + QL
2

(cid:0)QL

2

(cid:1)T

C (cid:0)QU

1

(cid:1)T

(cid:1)T

(cid:1)T
(cid:1)T

1

(cid:0)QL
(cid:0)QL
2
(cid:1)T
(cid:1)T

2

2

C (cid:0)QU
C (cid:0)QU
C (cid:0)QU
C (cid:0)QU

2

2

(cid:1)T
(cid:1)T

1

0
C (cid:0)QU
1
(cid:1)T
(cid:0)QL
(cid:0)QL
(cid:1)T
(cid:0)QL
(cid:0)QL
(cid:33)

(cid:1)T
(cid:1)T

1

2

2

(cid:16)(cid:0)QU

1

C

(cid:1)T

(cid:0)QU

2

(cid:33)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:33)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

2

2

(cid:1)T
(cid:1)T

C (cid:0)QU
C (cid:0)QU
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)F
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)F
(cid:1)T (cid:17) (cid:18)QU
1
QU
2

(cid:19)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)F

Theorem 4. SRP produces a rank-k SRLU factorization with

(cid:107)Π1AΠT
2 − (cid:98)L (cid:98)U(cid:107)2 ≤ γσk+1 (A) ,
(cid:18)
(cid:16)

(cid:17)

(cid:107)Π1AΠT

2 −

(cid:98)L (cid:98)U

(cid:107)2 ≤ σj+1 (A)

1 + 2γ

j

σk+1 (A)
σj (A)

(cid:19)

,

where j ≤ k and γ = O (f k

mn).

√

Proof. Note that the deﬁnition of α implies

(cid:107)S(cid:107)2 ≤ (cid:112)(m − k)(n − k)|α|.

330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384

385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439

From (Pan, 2000):

Then:

Thus

Supplementary Material

σmin

(cid:0)A11

(cid:1) ≤ σk+1 (A) .

σ−1
k+1 (A) ≤ (cid:107)A

−1
11 (cid:107)2

−1
11 (cid:107)max

≤ (k + 1)(cid:107)A
f
|α|

≤ (k + 1)

.

|α| ≤ f (k + 1)σk+1 (A) .

√

γ ≤

mnf (k + 1).

The theorem follows by using this result with Theorem 1, with

Theorem 5. Assume the condition of SRLU (equation (2)) is satisﬁed. Then for 1 ≤ j ≤ k:

σj (A)
1 + τ σk+1(A)
σj (A)

(cid:16)

(cid:17)

≤ σj

(cid:98)L (cid:98)U

≤ σj (A)

1 + τ

(cid:18)

σk+1 (A)
σj (A)

(cid:19)

,

where τ ≤ O (cid:0)mnk2f 3(cid:1).

Proof. After running k iterations of rank-revealing LU,

where C =

, and S is the Schur complement. Then

(cid:19)

(cid:18)0

0
0 S

Π1AΠT

2 = (cid:98)L (cid:98)U + C,

σj (A) ≤ σj

(cid:98)L (cid:98)U

(cid:16)

(cid:16)

(cid:17)

(cid:17)

+ (cid:107)C(cid:107)2


= σj

(cid:98)L (cid:98)U

1 +



 .

(cid:17)

(cid:107)C(cid:107)2
(cid:16)

(cid:98)L (cid:98)U

σj

(cid:16)

(cid:17)

σj

(cid:98)L (cid:98)U

= σj (A − C)

≤ σj (A) + (cid:107)C(cid:107)2

= σj (A)

1 +

(cid:20)

(cid:20)

(cid:21)

(cid:21)

.

(cid:107)C(cid:107)2
σj (A)
(cid:107)S(cid:107)2
σj (A)

= σj (A)

1 +

The ﬁnal form is achieved using the same bound on γ as in Theorem 4.

Theorem 6.

where γ = O (f k

mn) is the same as in Theorem 4, and ω = O (f kmn).

√

(cid:107)Π1AΠT
(cid:107)Π1AΠT

2 − (cid:98)LM (cid:98)U(cid:107)2 ≤ 2γσk+1 (A) ,
2 − (cid:98)LM (cid:98)U(cid:107)F ≤ ωσk+1 (A) ,

440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494

For the upper bound:

(2)

495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549

Proof. Note that the deﬁnition of α implies

Supplementary Material

(cid:107)S(cid:107)F ≤ (m − k)(n − k)|α|.

The rest follows by using Theorem 3 in a manner similar to how Theorem 4 invoked Theorem 1.

Theorem 7. If σ2

j (A) > 2(cid:107)S(cid:107)2

2 then

σj (A) ≥ σj

(cid:98)LM (cid:98)U

≥ σj (A)

1 − 2γ

(cid:16)

(cid:17)

(cid:115)

(cid:18) σk+1 (A)
σj (A)

(cid:19)2

,

where γ = O (cid:0)mnk2f 2(cid:1), and f is an input parameter controlling a tradeoff of quality vs. speed as before.

Proof. Perform QR and LQ decompositions (cid:98)L = QLRL =: (cid:0)QL
(cid:18)LU
11
21 LU
LU
22

(cid:19) (cid:18)QU
1
QU
2

. Then

(cid:19)

1 QL
2

(cid:18)RL

(cid:1)

(cid:19)

11 RL
12
RL
22

and (cid:98)U = LU QU =:

Note that

Analogously

(cid:98)LM (cid:98)U = QL
1

(cid:0)QL

1

(cid:1)T

A (cid:0)QU

1

(cid:1)T

QU
1 .

AT QL

2 =

(cid:98)L (cid:98)U + C

(cid:16)

(cid:17)T

11QU

QL
2
1 + C(cid:1)T
(cid:1)T (cid:0)RL

11

QL
2
(cid:1)T (cid:0)QL

1

= (cid:0)QL
1 RL
11LU
= (cid:0)QU
(cid:1)T (cid:0)LU
= CT QL
2 .

1

11

(cid:1)T

QL

2 + CT QL
2

A (cid:0)QU

2

(cid:1)T

= C (cid:0)QU

2

(cid:1)T

.

605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659

(3)

(4)

550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604

Supplementary Material

Then

σj (A) = σj

2

1

(cid:32)(cid:0)QL
(cid:0)QL
(cid:32)(cid:0)QL
(cid:0)QL

1

2

(cid:1)T
(cid:1)T

(cid:1)T
(cid:1)T

1

1

A (cid:0)QU
A (cid:0)QU
A (cid:0)QU
C (cid:0)QU

1

1

(cid:1)T
(cid:1)T

(cid:1)T
(cid:1)T

(cid:33)

(cid:33)

1

2

(cid:0)QL
(cid:0)QL
(cid:0)QL
(cid:0)QL

1

2

(cid:1)T
(cid:1)T

(cid:1)T
(cid:1)T

2

2

A (cid:0)QU
A (cid:0)QU
C (cid:0)QU
C (cid:0)QU

2

2

(cid:1)T
(cid:1)T

(cid:1)T
(cid:1)T

= σj

(cid:118)
(cid:117)
(cid:117)
(cid:117)
(cid:116)λj





(cid:32)(cid:0)QL
(cid:0)QL

1

2

(cid:1)T
(cid:1)T

A (cid:0)QU
C (cid:0)QU

1

1

(cid:1)T
(cid:1)T

1

(cid:0)QL
(cid:0)QL

2

(cid:1)T
(cid:1)T

C (cid:0)QU
C (cid:0)QU

2

2

(cid:1)T
(cid:1)T

(cid:33)T (cid:32)(cid:0)QL
(cid:0)QL

1

2

(cid:1)T
(cid:1)T

A (cid:0)QU
C (cid:0)QU

1

1

(cid:1)T
(cid:1)T

1

(cid:0)QL
(cid:0)QL

2

(cid:1)T
(cid:1)T

C (cid:0)QU
C (cid:0)QU

2

2

(cid:1)T
(cid:1)T

(cid:33)


(cid:115)

(cid:18)(cid:16)(cid:0)QL

1

λj

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)T (cid:16)(cid:0)QL

1

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)(cid:19)

(cid:18)

(cid:16)(cid:0)QL

2

(cid:1)T

+

C (cid:0)QU

1

(cid:1)T

(cid:0)QL

2

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)T (cid:16)(cid:0)QL

2

(cid:1)T

C (cid:0)QU

1

(cid:1)T

(cid:0)QL

2

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)(cid:19)

(cid:115)

(cid:18)(cid:16)(cid:0)QL

1

λj

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)T (cid:16)(cid:0)QL

1

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)(cid:19)

+

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:16)(cid:0)QL
(cid:12)
(cid:12)

2

(cid:1)T

C (cid:0)QU

1

(cid:1)T

(cid:0)QL

2

(cid:1)T

2

C (cid:0)QU

(cid:12)
(cid:1)T (cid:17)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)2
(cid:1)T (cid:17)T (cid:16)(cid:0)QL

1

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)(cid:19)

+ (cid:107)C(cid:107)2
2

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17) (cid:16)(cid:0)QL

1

(cid:1)T

A (cid:0)QU

1

(cid:1)T

(cid:0)QL

1

(cid:1)T

C (cid:0)QU

2

(cid:1)T (cid:17)T (cid:19)

+ (cid:107)C(cid:107)2
2

(QL

1 )T A (QU

1 )T (cid:16)

(QL

1 )T A (QU

1 )T (cid:17)T

+ (QL

1 )T C (QU

2 )T (cid:16)

(QL

1 )T C (QU

2 )T (cid:17)T (cid:19)

+ (cid:107)C(cid:107)2
2

(QL

1 )T A (QU

1 )T (cid:16)

(QL

1 )T A (QU

1 )T (cid:17)T (cid:19)

+

(QL

1 )T C (QU

2 )T (cid:16)

(QL

1 )T C (QU

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

2 )T (cid:17)T (cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)2

(cid:12)
(cid:12)
(cid:12)

+ (cid:107)C(cid:107)2
2

(QL

1 )T A (QU

1 )T (cid:16)

(QL

1 )T A (QU

1 )T (cid:17)T (cid:19)

+ 2(cid:107)C(cid:107)2
2

=

=

≤

≤

=

=

≤

≤

≤

=

(cid:18)(cid:16)(cid:0)QL

1

λj

(cid:18)(cid:16)(cid:0)QL

1

λj

(cid:115)

(cid:115)

(cid:115)

(cid:115)

(cid:115)

(cid:114)

(cid:114)

(cid:18)

(cid:18)

(cid:18)

(cid:16)

(cid:16)

λj

λj

λj

(cid:16)

(cid:16)

σ2
j

(QL

1 )T A (QU

1 )T (cid:17)

+ 2(cid:107)C(cid:107)2
2

σ2
j

(cid:98)LM (cid:98)U

+ 2(cid:107)C(cid:107)2
2

(cid:17)

= σj

(cid:98)LM (cid:98)U

= σj

(cid:98)LM (cid:98)U

(cid:17)

(cid:118)
(cid:117)
(cid:117)
(cid:117)
(cid:116)1 + 2





(cid:17)

(cid:118)
(cid:117)
(cid:117)
(cid:117)
(cid:116)1 + 2






2

(cid:107)C(cid:107)2
(cid:16)

σj

(cid:98)LM (cid:98)U



(cid:17)


2



(cid:17)

.

(cid:107)S(cid:107)2
(cid:16)

σj

(cid:98)LM (cid:98)U

Solve for σj

(cid:98)LM (cid:98)U

(cid:16)

(cid:17)

for the lower bound. The upper bound:

σj (A) = σj

(cid:33)

(cid:0)QL
(cid:0)QL

1

2

(cid:1)T
(cid:1)T

A (cid:0)QU
A (cid:0)QU

2

2

(cid:1)T
(cid:1)T

(cid:1)T
(cid:1)T

(cid:1)T

1

A (cid:0)QU
A (cid:0)QU
A (cid:0)QU

1

1

(cid:1)T
(cid:1)T

(cid:1)T (cid:17)

1

(cid:32)(cid:0)QL
(cid:0)QL
(cid:16)(cid:0)QL
(cid:16)

2

1

QL
1

(cid:16)

(cid:0)QL
1
(cid:17)

(cid:1)T

A (cid:0)QU

1

(cid:1)T

QU
1

(cid:17)

≥ σj

= σj

= σj

(cid:98)LM (cid:98)U

.

660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714

715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769

Supplementary Material

5. Analysis of the Choice of Block Size for SRLU

A heuristic for choosing a block size for TRLUCP is described here, which differs from standard block size methodologies
for the LU decomposition. Note that a key difference of SRLU and TRLUCP from previous works is the size of the
random projection: here the size is relative to the block size, not the target rank k (2pmn ﬂops for TRLUCP versus the
signiﬁcantly larger 2kmn for others). This also implies a change to the block size also changes the ﬂop count, and, to our
knowledge, this is the ﬁrst algorithm where the choice of block size affects the ﬂop count. For problems where LAPACK
chooses b = 64, our experiments have shown block sizes of 8 to 20 to be optimal for TRLUCP. Because the ideal block
size depends on many parameters, such as the architecture of the computer and the costs for various arithmetic, logic, and
memory operations, guidelines are sought instead of an exact determination of the most efﬁcient block size. To simplify
calculations, only the matrix multiplication operations are considered, which are the bottleneck of computation. Using
standard communication-avoiding analysis, a good block size can be calculated with the following model: let M denote the
size of cache, f and m the number of ﬂops and memory movements, and tf and tm the cost of a ﬂoating point operation and
the cost of a memory movement. We seek to choose a block size to minimize the total calculation time T modeled as

Choosing p = b + c for a small, ﬁxed constant c, and minimizing implies

T = f · tf + m · tm.

T =

(cid:20)
(m + n − k) (cid:0)k2 − kb(cid:1) −

k3 + 2bk2 −

b2k

(cid:20)

+

(m + n − k)

− k

−

+ 2k2 −

bk

·

4
3

(cid:19)

4
3

k3
b

(cid:18) k2
b

(cid:21)

· tf

(cid:21)

2
3

2
3

M

(cid:0)√

b2 + M − b(cid:1)2 · tm.

Given hardware-dependent parameters M , tf , and tm, a minimizing b can easily be found.

This result is derived as follows: we analyze blocking by allowing different block sizes in each dimension. For matrices
Ω ∈ Rp×m and A ∈ Rm×n consider blocking in the form

Ω · R =

(cid:18)

s

(cid:96)
∗
∗

∗
∗

(cid:19)

(cid:96)

·

∗
∗





b
∗
∗
∗

∗
∗
∗



.

∗
∗
∗

Then a current block update requires cache storage of

s(cid:96) + (cid:96)b + sb ≤ M.

Thus we will constrain

The total runtime T is

(cid:96) ≤

M − sb
s + b

.

(cid:16) p
s

(cid:17)

(cid:17) (cid:16) n
b

(cid:17) (cid:16) m
(cid:96)
(cid:18) s + b
sb
(cid:18) s + b
sb
(cid:18)

1
(cid:96)

+

+

(s(cid:96) + (cid:96)b + sb) · tm
(cid:19)

· tm

(cid:19)

· tm

s + b
M − sb
(cid:19)

s + b
sb (M − sb)

· tm

T = 2pmn · tf +

= 2pmn · tf + pmn

≥ 2pmn · tf + pmn

= 2pmn · tf + pmnM

=: 2pmn · tf + pmnM L (s, b, M ) · tm.

Given Ω and A, changing the block sizes has no effect on the ﬂop count. Optimizing L (s, b, M ) over s yields

s2 + 2sb = M.

770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824

825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879

By symmetry

Note, nevertheless, that s ≤ p by deﬁnition. Hence

Supplementary Material

b2 + 2sb = M.

s∗ = min

(cid:32)(cid:114)

(cid:33)

, p

,

M
3

and

These values assume

b∗ = max

p2 + M − p

.

(cid:32)(cid:114)

(cid:112)

,

M
3

(cid:33)

(cid:96)∗ =

M − sb
s + b

= max

(cid:112)

,

M
3

(cid:32)(cid:114)

(cid:33)

p2 + M − p

= b∗.

This analysis applies to matrix-matrix multiplication where the matrices are ﬁxed and the leading matrix is short and fat or
the trailing matrix is tall and skinny. As noted above, nevertheless, the oversampling parameter p is a constant amount larger
than the block size used during the LU factorization. The total initialization time is

T init = 2pmn · tf + pmnM

= 2pmn · tf + mn · min

(cid:19)

· tm

(cid:18)

s + b
sb (M − sb)



3

√

3

p
√
M

,



M
(cid:16)(cid:112)p2 + M − p


 · tm.

(cid:17)2

We next choose the parameter b used for blocking the LU factorization, where p = b + O (1). The cumulative matrix
multiplication (DGEMM) runtime is

T DGEMM =

(cid:88)

[2jb(m − j) + 2jb(n − j − b)] · tf + 2 [j(m − j) + j(n − j − b)]

M

(cid:0)√

b2 + M − b(cid:1)2 · tm

j=b:b:k−b
(cid:20)
(m + n − k) (cid:0)k2 − kb(cid:1) −

=

k3 + 2bk2 −

b2k

· tf +

2
3

(cid:21)

(cid:21)

4
3

(cid:19)

4
3

k3
b

(cid:18) k2
b

+

(m + n − k)

− k

−

+ 2k2 −

bk

(cid:20)

2
3

M

(cid:0)√

b2 + M − b(cid:1)2 · tm

=: N DGEMM

f

· tf + N DGEMM

m

· tm.

The methodology for choosing a block size is compared to other choices of block size in Figure 1. Note that LAPACK
generally chooses a block size of 64 for these matrices, which is suboptimal in all cases, and can be up to twice as slow. In
all of the cases tested, the calculated block size is close to or exactly the optimal block size.

6. Additional Notes and Experiments

6.1. Efﬁciency of SRLU

Not only is the TRLUCP component efﬁcient compared with other low-rank approximation algorithms, but also it becomes
arbitrarily faster than the standard right-looking LU decomposition as the data size increases. Because the LU decomposition
is known to be efﬁcient compared to algorithms such as the SVD (Demmel, 1997), comparing TRLUCP to right-looking LU
exempliﬁes its efﬁciency, even though right-looking LU is not a low-rank approximation algorithm.

In Figure 2, TRLUCP is benchmarked against truncated right-looking LU (called using a truncated version of the LAPACK
library DGETRF). Experiments are run on random matrices, with the x-axis reﬂecting the approximate number of ﬂoating
point operations. Also plotted is the theoretical peak performance, which illustrates that TRLUCP is a highly efﬁcient
algorithm.

880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934

935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989

Supplementary Material

Figure 1. Benchmarking TRLUCP with various block sizes on random matrices of different sizes and truncation ranks.

6.2. Sparsity-Preservation

Table 1 contains additional sparsity-preservation experiments on matrices from (David & Hu, 2011).

Table 1. Sparsity preservation experiments of various sparse, non-symmetric data matrices. The SRLU factorization is computed to 20%
of full-rank. The Full SRLU factorization is the SRLU factorization with the Schur complement. LU and SVD are the standard LU and
SVD decompositions. The SRLU relative error is the Frobenius-norm relative error of the SRLU factorization, which has a target rank
that is 20 percent of the matrix rank.

Matrix Description

Nonzeros (rounded) In:

Name

Application

Nonzeros

SRLU Full SRLU

LU SVD SRLU Rel. Error

oscil_dcop Circuits
g7jac020
tols1090
mhd1280a

Economics
Fluid dynamics
Electromagnetics

1,544
42,568
3,546
47,906

1,570
62.7K
2.2K
184K

4.7K
379K
4.7K
831K

9.7K 369K
1.7M 68M
4.6K 2.2M
129K 3.3M

1.03e-3
1.09e-6
1.18e-4
4.98e-6

990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044

1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099

Supplementary Material

Figure 2. Computation time of TRLUCP versus the efﬁciency LU decomposition.

6.3. Online Data Processing

In many applications, reduced weight is given to old data. In this context, multiplying the matrices U11, U12 and S by some
scaling factor less than 1 before applying spectrum-revealing pivoting will reﬂect the reduced importance of the old data.

Figure 3. The cumulative uses of the top ﬁve most commonly used words in the Enron email corpus after reordering.

The cumulative usages of the top 5 words in the Enron email corpus (after reordering) is plotted in Figure 3. For the online
updating experiment with the Enron email corpus, the covariance matrix of the top ﬁve most frequent words is









power
1
0.40
0.81
0.51
0.78

power

company

energy

market

california

company
0.40
1
0.42
0.57
0.23

energy
0.81
0.42
1
0.51
0.78

market
0.51
0.57
0.51
1
0.48

california
0.78
0.28
0.78
0.48
1



.







References

David, T. A. and Hu, Y. The university of ﬂorida sparse matrix collection. ACM Transactions on Mathematical Software, 38:

1–25, 2011. URL http://www.cise.ufl.edu/research/sparse/matrices.

1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154

1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209

Demmel, J. Applied Numerical Linear Algebra. SIAM, 1997.

Supplementary Material

Eckart, C. and Young, G. The approximation of one matrix by another of lower rank. Psychometrika, 1(3):211–218, 1936.

Golub, G. H. and van Loan, C. F. Matrix Computations. JHU Press, 4th edition, 2013.

Lichman, M. UCI machine learning repository, 2013. URL http://archive.ics.uci.edu/ml.

Melgaard, C. and Gu, M. Gaussian elimination with randomized complete pivoting. CoRR, abs/1511.08528, 2015.

Miranian, L. and Gu, M. Stong rank revealing lu factorizations. Linear Algebra and its Applications, 367:1–16, 2003.

Pan, C.-T. On the existence and computation of rank-revealing lu factorizations. Linear Algebra and its Applications, 316

(1):199–222, 2000.

1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264

1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319

