A. Proof of Theorem 2.1

StingyCD

Theorem 2.1 (Safeness of StingyCD). In Algorithm 2, every skipped update would, if computed, result in δ = 0. That is,
if q(t−1) ≤ τi and x(t−1)

= 0, then

i

(cid:40)

max

−x(t−1)
i

,

(cid:10)Ai, b − Ax(t−1)(cid:11) − λ
(cid:107)Ai(cid:107)2

(cid:41)

= 0 .

Proof. Since x(t−1)

i

= 0, we need to prove that if q(t−1) ≤ τi, then

(cid:68)

Ai, r(t−1)(cid:69)

− λ ≤ 0,

where we have used the deﬁnition r(t−1) = b − Ax(t−1).
We show by induction that q(t) = (cid:13)
rr ← r(t−1). The inductive step is that

(cid:13)rr − r(t)(cid:13)
2
(cid:13)

. The base case is that q(t−1) = 0 whenever StingyCD performs the update

Recall the deﬁnition τi = sign (gi)

g2
(cid:107)Ai(cid:107)2 , where gi = − (cid:104)Ai, rr(cid:105) + λ. It follows that
i

(cid:69)

(cid:68)
Ai, r(t−1) − rr
(cid:13)
(cid:68)
2
Ai, r(t−1) − rr
(cid:13)
(cid:13)

− 2δ

+ δ2 (cid:107)Ai(cid:107)2

(cid:69)

+ δ2 (cid:107)Ai(cid:107)2

q(t) = q(t−1) − 2δ

=

=

=

(cid:13)
(cid:13)r(t−1) − rr
(cid:13)
(cid:13)
(cid:13)r(t−1) − δAi − rr
(cid:13)
(cid:13)
(cid:13)
2
(cid:13)r(t) − rr
(cid:13)
(cid:13)
(cid:13)

.

(cid:13)
2
(cid:13)
(cid:13)

q(t−1) ≤ τi ⇒

⇒

≤ sign (gi)

g2
i
(cid:107)Ai(cid:107)2

(cid:13)
2
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13) ≤

(cid:13)
(cid:13)r(t−1) − rr
(cid:13)
(cid:13)
gi
(cid:13)r(t−1) − rr
(cid:13)
(cid:107)Ai(cid:107)
(cid:13)
(cid:13)
(cid:13)r(t−1) − rr
(cid:13)
(cid:13)
(cid:13) ≤ − (cid:104)Ai, rr(cid:105) + λ
(cid:13)
(cid:13)r(t−1) − rr
(cid:13)
⇒ (cid:104)Ai, rr(cid:105) + (cid:107)Ai(cid:107)
(cid:68)
Ai, r(t−1)(cid:69)

⇒ (cid:107)Ai(cid:107)

− λ ≤ 0 .

⇒

(cid:13)
(cid:13)
(cid:13) − λ ≤ 0

(3)

(4)

(5)

(6)

(7)

(8)

(9)

(10)

(11)

(12)

B. Proof of Theorem 2.2

Theorem 2.2 (Per iteration time complexity of StingyCD). Algorithm 2 can be implemented so that iteration t requires

• Less time than an identical iteration of Algorithm 1 if q(t−1) ≤ τi and x(t−1)

i

= 0 (the update is skipped) and rr is

not updated. Speciﬁcally, StingyCD requires O(1) time, while CD requires O(NNZ (Ai)) time.

• The same amount of time (up to an O(1) term) as a CD iteration if the update is not skipped and rr is not updated.

In particular, both algorithms require the same number of O(NNZ (Ai)) operations.

• More time than a CD iteration if rr is updated. In this case, StingyCD requires O(NNZ (A)) time.

Proof. Note that at each iteration, CD computes a dot product of length NNZ (Ai) to compute δ. If δ (cid:54)= 0, an additional
O(NNZ (Ai)) operation is required to update r(t).

StingyCD

Case 1: the update is skipped and rr is not updated In this case, the only computation StingyCD performs during this
iteration is (i.) deciding not to update the reference vector, (ii.) choosing a coordinate to update, and (iii.) checking whether
q(t−1) ≤ τi and x(t−1)
= 0. Steps (i.) and (ii.) can be easily be deﬁned so that they require O(1) time, and checking the
conditions for (iii.) also requires constant time.

i

Case 2: the update is not skipped and rr is not updated In this case, the only additional operation that we have not
already considered is the update to q(t). This update can be performed in constant time by caching previous computations of
(cid:104)Ai, rr(cid:105), (cid:10)Ai, r(t−1)(cid:11), and (cid:107)Ai(cid:107)2. The value of (cid:104)Ai, rr(cid:105) was computed when computing the threshold τi, and (cid:10)Ai, r(t−1)(cid:11)
and (cid:107)Ai(cid:107)2 are necessary to compute δ.

Case 3: rr is updated In this case, computing τi for all i requires computing (cid:104)Ai, rr(cid:105) for all columns in A. This is a
matrix-vector multiply that requires O(NNZ (Ai)) operations.

C. Proof of Theorem 3.2
Theorem 3.2 (Equation for P (U (t))). Assume x(t−1)

= 0 and τi ∈ (−q(t−1), q(t−1)). Then Assumption 3.1 implies

i

(cid:40)

P (U (t)) =

1

2 I(1−τi/q(t−1))( n−1
2 I(1+τi/q(t−1))( n−1

2 , 1
2 )
2 , 1
2 )

1 − 1

if τi ≥ 0,
otherwise,

where Ix(a, b) is the regularized incomplete beta function.

Proof. Recall the illustration form Figure 2:

Because we assume r(t−1) is uniformly distributed on the boundary of S (t), the probability that r(t−1) ∈ Ai is given by
dividing the area of Ai ∩ bd(S (t)) by the area of bd(S (t)). The region Ai ∩ bd(S (t)) is a hyperspherical cap. In the case
that rr /∈ Ai, we know from (Li, 2011) that the area of Ai ∩ bd(S (t)) is given by

where area(S (t)) is the surface area of S (t) and θ is the angle indicated in the diagram.

When τi ≥ 0, note that by deﬁnition of τi, we have rr /∈ Ai. It follows then that when τi ≥ 0, we have

1

2 area(S (t))Isin(θ)2( n−1

2 , 1

2 ) ,

P (Ut) =

1

2 area(S (t))Isin(θ)2 ( n−1

2 , 1
2 )

area(S (t))
2 I(1−cos(θ)2)( n−1
2 , 1
2 )
2 , 1
2 I(1−τi/q(t−1))( n−1

= 1
= 1

2 ) .

In the case that τi < 0, we have rr ∈ Ai, and we can use symmetry to see that
2 , 1

2 I(1+τi/q(t−1))( n−1

P (Ut) = 1 − 1

2 ) .

(13)

(14)

(15)

(16)

(17)

D. Details of estimating P (U (t)) in StingyCD+

In §3.1, we deﬁned the probability P (U (t)). Assuming τi ∈ (−q(t−1), q(t−1)), we have

StingyCD

(cid:40)

P (U (t)) =

1

2 I(1−τi/q(t−1))( n−1
2 I(1+τi/q(t−1))( n−1

2 , 1
2 )
2 , 1
2 )

1 − 1

if τi ≥ 0,
otherwise,

where Ix(a, b) is the regularized incomplete beta function.

In our implementation of StingyCD+, we compute P (U (t)) approximately using a lookup table. First, we make use of the
approximation

1

2 I(1−τi/q(t−1))( n−1

2 , 1

2 ) ≈ 1 − Φ

τi(n − 1)/q(t−1)

.

(cid:18)(cid:113)

(cid:19)

Above, Φ is the standard normal CDF.

Using (19) is not strictly necessary. Using (19) leads to a simpler implementation, however, since we no longer need to
compute the regularized incomplete beta function. Instead we only need to deﬁne a lookup table for the standard normal
CDF. We expect this approximation has negligible effect on StingyCD+, since (19) is a very close approximation for
moderately large n.

Using (19), our StingyCD+ implementation uses a lookup table of 128 values for 1 − Φ(
uniformly between 0 and 32 inclusive, meaning the table stores the values 1 − Φ(0), 1 − Φ(
1 − Φ(

32).

√

√

x). Values of x are spaced
√
0.5), . . .,

0.25), 1 − Φ(

√

To estimate P (U (t)) during each iteration, StingyCD+ ﬁrst computes τi(n−1)/q(t−1) and then reads the closest value from
the table that results in an upper bound for P (U (t)). For example, if τi(n − 1)/q(t−1) = 0.2, our approximation of P (U (t))
is 1 − Φ(

0.25) = 0.308 . . .. If τi(n − 1)/q(t−1) = −0.2, then our approximation of P (U (t)) is Φ(

0.5) = 0.760 . . ..

√

√

E. Proof of Theorem 3.3
Theorem 3.3 (StingyCD+ converges to a solution of (P)). In StingyCD+, assume ξ(t) ≤ NNZ (cid:0)x(t−1)(cid:1) for all t > 0.
Also, for each i ∈ [m], assume the largest number of consecutive iterations during which get next coordinate() does
not return i is bounded as t → ∞. Then

lim
t→∞

f (x(t)) = f (x(cid:63)) .

Before proving the theorem, we introduce and prove a few lemmas.

Lemma E.1. Given the assumptions of Theorem 3.3, let M be a number larger than the maximum number of consecutive
iterations get next coordinate() does not return coordinate i for all i ∈ [m] as t → ∞. Consider any iteration t > 0 of
StingyCD+ and any i ∈ [m] such that x(t−1)
(cid:54)= 0. Then there exists an iteration t(cid:48) ≥ t during which StingyCD+ computes
an update to coordinate i. Furthermore, we have t(cid:48) ≤ t + mM .

i

Proof. Deﬁne C(t−1) as the set of coordinates that correspond to nonzero entries in x(t−1):

Let idelayed denote the unique coordinate in C(t−1) such that the delay D(t)
i

is largest:

C(t−1) = {i : x(t−1)

(cid:54)= 0}.

i

idelayed = argmax
i∈C(t−1)

D(t)
i

.

i

differs for all i ∈ C(t−1)—StingyCD+ updates at most one coordinate during each

This coordinate is unique because tlast
iteration.
≥ NNZ (cid:0)x(t−1)(cid:1), since the NNZ (cid:0)x(t−1)(cid:1) − 1 coordinates in C(t−1) not equal to idelayed were
We must have D(t)
updated before idelayed was last updated (otherwise (21) would not hold). Thus, counting these updates, as well as the
update to weight idelayed during iteration tlast

≥ NNZ (cid:0)x(t−1)(cid:1).

idelayed, we must have D(t)

idelayed

idelayed

(18)

(19)

(20)

(21)

StingyCD

≥ NNZ (cid:0)x(t+k−1)(cid:1), since (i) until an update for coordinate i is computed, D(t)

Now let k ≥ 0 be the smallest such k for which get next coordinate() returns idelayed during iteration t + k. Note that
k < M . We must have D(t+k)
is nonde-
idelayed
creasing with t for all i, (ii) we have D(t)
for t(cid:48) ∈ {t, t + 1, . . . , t + k − 1}, we must also have D(t(cid:48)+1)
idelayed
the delay for all coordinates by 1.
In addition, since idelayed ∈ C(t−1) and idelayed has not been updated since before iteration t, we must have x(t+k−1)
(cid:54)= 0.
idelayed
Thus, by deﬁnition of P (U (t+k)), we must have P (U (t+k)) = 1. Applying the assumption that ξ(t+k) ≤ NNZ (cid:0)x(t+k−1)(cid:1),
it follows that

≥ NNZ (cid:0)x(t−1)(cid:1), and (iii) whenever NNZ
= D(t(cid:48))

+ 1—an update to a zero entry of x increases

x(t(cid:48)−1)(cid:17)

x(t(cid:48))(cid:17)

= NNZ

idelayed

idelayed

+ 1

(cid:16)

(cid:16)

i

P (U (t+k))D(t+k)
idelayed

= D(t+k)
idelayed

≥ NNZ

x(t+k)−1(cid:17)
(cid:16)

≥ ξ(t+k) .

(22)

Thus, the condition for skipping update t + k in StingyCD+ is not satisﬁed. That is, during iteration t + k, StingyCD+
computes an update to coordinate idelayed. It follows that D(t+k+1)
= 1. That is, idelayed now corresponds to the weight
idelayed
with smallest delay among nonzero weights.

i

(cid:54)= 0. This coordinate was last updated during iteration tlast

Now consider any i such that x(t−1)
It follows that if
coordinate i is not updated by iteration tlast
i + (m − 1)M , then i corresponds to the weight with largest delay among
nonzero weights. This is because we have shown that the nonzero weight with maximum delay is updated within M
iterations, after which it becomes the nonzero weight with smallest delay. Thus, before coordinate i is updated again, at
most (m − 1) other coordinates correspond to the nonzero weight with largest delay, each of which requires at most M
iterations to update. It follows that after an additional M iterations—that is, by iteration tlast
i + mM —coordinate i must
be updated.

.

i

Lemma E.2. Given the assumptions of Theorem 3.3, then for some set F, StingyCD+ converges to a solution of the
problem

f (x) := 1

2 (cid:107)Ax − b(cid:107)2 + λ (cid:104)1, x(cid:105)

minimize
x∈Rm
s.t.

x ≥ 0
xi = 0 ∀i ∈ F

.

Proof. First note that f (x(t)) is nonincreasing with t. This is because whenever x(t) (cid:54)= x(t−1), we can write

for some coordinate i, where

x(t) = x(t−1) + δei

δ =

argmin

f (x(t−1) + δ(cid:48)ei) = max

δ(cid:48) : x(t−1)
i

+δ(cid:48)≥0

(cid:26)

−x(t−1)
i

,

(cid:104)Ai,b−Ax(t−1)(cid:105)−λ
(cid:107)Ai(cid:107)2

(cid:27)

.

Second, note that for all t, x(t) ≥ 0. From the deﬁnition of f , it follows that f (x(t)) ≥ 0 for all t.

Thus, f (x(t)) is a bounded monotone sequence, which implies that lim
t→∞

f (x(t)) exists.

Now let us assume that x(t) does not converge to a solution of (P’) for some set F. Then there exists a value ν > 0 for
which the following holds: for all t(cid:48) > 0, there exists an iteration t > t(cid:48) such that for some i where x(t−1)

(cid:54)= 0, we have

i

(cid:40)

|δ| =

max

−x(t−1)
i

,

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:10)Ai, r(t−1)(cid:11) − λ
(cid:107)Ai(cid:107)2

(cid:41)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

≥ ν .

In other words, if StingyCD+ updated coordinate i (corresponding to a nonzero weight) during iteration t, the magnitude
of the update would be at least positive value ν.

Also, note that after any update δ to a coordinate i during iteration t of StingyCD+, we have (by Taylor expansion)

f (x(t)) − f (x(t−1)) =

(cid:16)

Ai, r(t−1)(cid:69)(cid:17)
(cid:68)

λ −
2 (cid:107)Ai(cid:107)2 δ2 .

≤ − 1

δ + 1

2 (cid:107)Ai(cid:107)2 δ2

(P’)

(23)

(24)

(25)

(26)

(27)

Now deﬁne ˆf = lim
t→∞

f (x(t)). Consider an iteration t(cid:48) such that f (x(t(cid:48))) ≤ ˆf + (cid:15), where we deﬁne (cid:15) > 0 later.

According to (25), there exists an iteration t > t(cid:48) such that for some i for which x(t−1)

> 0, we have

(cid:40)

max

−x(t−1)
i

,

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:10)Ai, r(t−1)(cid:11) − λ
(cid:107)Ai(cid:107)2

(cid:41)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

i

≥ ν .

According to Lemma E.1, StingyCD+ will compute at least one update to coordinate i between iterations t and t + mM .
During each of the iterations between iteration t and t + mM , suppose that coordinate i(cid:48) is updated by an amount δ(cid:48). It
must be the case then that
√

StingyCD

δ(cid:48) ≤

2(cid:15)
(cid:107)Ai(cid:48)(cid:107)

.

Otherwise the fact that ˆf = lim
t→∞

f (x(t)) would be violated due to (27).

Now let T denote the iteration during which coordinate i is next updated. From the triangle inequality and (29), it follows
that

(cid:13)
(cid:13)

(cid:13)r(t−1) − r(T −1)(cid:13)

(cid:13)
(cid:13) ≤ mM

√

2(cid:15) .

This implies that

(cid:10)Ai, r(T −1)(cid:11)
(cid:107)Ai(cid:107)2

−

(cid:10)Ai, r(t−1)(cid:11)
(cid:107)Ai(cid:107)2

√

(cid:104)
− mM

∈

2(cid:15)

(cid:107)Ai(cid:107) , + mM

(cid:107)Ai(cid:107)

2(cid:15)

√

(cid:105)

.

Now let δ be the update to coordinate i during iteration T . It follows that

(cid:41)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:10)Ai, r(T −1)(cid:11) − λ
(cid:107)Ai(cid:107)2
(cid:10)Ai, r(t−1)(cid:11) − λ
(cid:107)Ai(cid:107)2

(cid:41)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

−

√

mM

2(cid:15)

(cid:107)Ai(cid:107)

|δ| =

max

x(T −1)
i

,

(cid:40)

(cid:40)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

≥

max

x(t−1)
i

,

≥ ν −

√

mM

2(cid:15)

(cid:107)Ai(cid:107)

.

Now let us deﬁne s =

min
i(cid:48) : (cid:107)Ai(cid:48) (cid:107)>0

(cid:107)Ai(cid:48)(cid:107).

Then it follows that

From (27), it follows that

(cid:15) = 1
8

(cid:17)2

(cid:16) νs
mM

|δ| > 1

2 ν .

f (x(T )) ≤ f (x(T −1)) − 1

2 (cid:107)Ai(cid:107)2 δ2 ≤ ˆf + (cid:15) − 1

2 s2ν2 < ˆf ,

which violates the assumption that lim
t→∞

f (x(t)) = ˆf .

Thus, StingyCD+ must converge to a solution of (P’) for some set F.

Proof of Theorem 3.3. Suppose that StingyCD+ does not converge to a solution to (P).
Now deﬁne ˆf = lim
t→∞

f (x(t)). Also deﬁne ˆr = lim
t→∞

r(t) and ˆx = lim
t→∞

x(t).

(28)

(29)

(30)

(31)

(32)

(33)

(34)

(35)

(36)

(37)

Lemma E.2 guarantees that the algorithm at least converges to a solution of (P’) for some set F. Using this assumption, if
StingyCD+ does not converge to (P)’s solution then there exists a ν > 0 such that for some i such that ˆxi (cid:54)= 0, we have

StingyCD

(cid:104)Ai, ˆr(cid:105) − λ ≥ ν .

Consider an iteration t(cid:48) such that f (x(t(cid:48)−1)) ≤ ˆf + (cid:15), where we deﬁne (cid:15) > 0 later. By Taylor expansion, we have for any
t ≥ t(cid:48),

f (x(t)) = f (ˆx) +

∇f (ˆx), x(t) − ˆx

(cid:68)

(cid:69)

+ 1
2

(cid:13)
(cid:13)Ax(t) − Aˆx
(cid:13)

(cid:13)
2
(cid:13)
(cid:13)

≥ ˆf + 1
2

(cid:13)
(cid:13)

(cid:13)ˆr − r(t−1)(cid:13)

2
(cid:13)
(cid:13)

.

This implies that for any t ≥ t(cid:48), we have

(cid:13)ˆr − r(t−1)(cid:13)
(cid:13)
(cid:13) ≤
8(cid:107)Ai(cid:48) (cid:107)2 . It follows then that for all t ≥ t(cid:48),

(cid:13)
(cid:13)

ν2

√

2(cid:15) .

Deﬁne (cid:15) =

min
i(cid:48) : (cid:107)Ai(cid:48) (cid:107)(cid:54)=0

(cid:68)
Ai, r(t−1)(cid:69)

− λ ≥ (cid:104)Ai, ˆr(cid:105) − (cid:107)Ai(cid:107)

2(cid:15) − λ ≥ ν − (cid:107)Ai(cid:107)

√

√

2(cid:15) ≥ 1

2 ν .

Also, if we assume − (cid:104)Ai, rr(cid:105) + λ > 0, we must have

τi =

(− (cid:104)Ai, rr(cid:105) + λ)2
(cid:107)Ai(cid:107)2

(cid:0)− (cid:10)Ai, r(t−1)(cid:11) + λ + (cid:107)Ai(cid:107) (cid:13)

(cid:13)r(t−1) − rr(cid:13)
(cid:13)

(cid:1)2

≤

(cid:107)Ai(cid:107)2

≤ (q(t−1) − 1
< q(t−1) .

2 ν)2

Otherwise, we must have − (cid:104)Ai, rr(cid:105) + λ < 0, which ensures τi ≤ 0 ≤ q(t−1). In addition, q(t−1) is bounded as t → ∞
due to (41). As a result, whenever i is returned by get next coordinate() during an iteration t > t(cid:48), then P (U (t)) is
bounded away from zero. As t → ∞, the delay D(t)
increases as, at a minimum, nonzero-valued coorinates are updated.
Thus, for an eventual iteration T , we have

i

At this point, an update to coordinate i is computed. From (42), it follows that

which ensures that

P (U (t))D(t)

i ≥ ξ(t) .

δ ≥ 1
2

ν
(cid:107)Ai(cid:107)2 ,

f (x(T )) ≤ f (x(T −1)) − 1

2 (cid:107)Ai(cid:107)2 δ2
ν2
(cid:107)Ai(cid:107)2

≤ f (ˆx) + (cid:15) − 1
2

≤ f (ˆx) − 3
8

ν2
(cid:107)Ai(cid:107)2 .

This contradicts the deﬁnition of ˆx. Thus, our assumption that x(t) does not converge to a solution of (P ) is incorrect.

(38)

(39)

(40)

(41)

(42)

(43)

(44)

(45)

(46)

(47)

(48)

(49)

(50)

(51)

F. Generalizing StingyCD to Linear SVMs

In this section, we brieﬂy describe how to apply StingyCD to the problem

StingyCD

minimize
x∈Rn
s.t.

1

2 (cid:107)Mx(cid:107)2 − (cid:104)1, x(cid:105)
x ∈ [0, C]n

.

(PSVM)

We note that (PSVM) is very similar to (P). If not for the constraint that x ≤ C1, in fact, (PSVM) would be an instance of
(P)—we could solve (PSVM) by deﬁning A = M, b = 0, and λ = −1 and then running Algorithm 2.

To incorporate the new constraint, our CD update becomes

δSVM = min

(cid:110)

C − x(t−1)
i

, δ

(cid:111)

.

In this case, StingyCD’s same rule applies for guaranteeing coordinate i remains 0 during iteration t. With a minor change,
we can also check if x(t−1)
is guaranteed to remain C during iteration t. Speciﬁcally, if x(t−1)
= C and q(t−1) ≤ −τi,
then it is guaranteed that δSVM = 0.

i

i

G. Additional comparisons for Lasso problems

StingyCD

This section contains results using additional values of λ for the experiments in §6.1. In general, we ﬁnd the results to be
quite consistent, regardless of λ. Only “CD + Safe Screening” seems to be greatly affected by this parameter.

G.1. Full results for ﬁnance dataset

Number of examples: 1.6 × 104. Number of features: 5.5 × 105.

ﬁnance, λ = 0.1λmax, (cid:107)x(cid:63)(cid:107)0 = 375

ﬁnance, λ = 0.05λmax, (cid:107)x(cid:63)(cid:107)0 = 1746

ﬁnance, λ = 0.02λmax, (cid:107)x(cid:63)(cid:107)0 = 6591

ﬁnance, λ = 0.01λmax, (cid:107)x(cid:63)(cid:107)0 = 10276

0.00.51.01.52.0Time(min)10−910−810−710−610−510−410−310−210−1Relativesuboptimality0.00.20.40.60.81.0Time(min)0.750.800.850.900.951.00Supportsetprecision0.00.20.40.60.81.0Time(min)0.700.750.800.850.900.951.00Supportsetrecall012345Time(min)10−910−810−710−610−510−410−310−210−1Relativesuboptimality0.00.51.01.52.02.5Time(min)0.750.800.850.900.951.00Supportsetprecision0.00.51.01.52.02.5Time(min)0.700.750.800.850.900.951.00Supportsetrecall0246810121416Time(min)10−910−810−710−610−510−410−310−210−1Relativesuboptimality012345678Time(min)0.750.800.850.900.951.00Supportsetprecision012345678Time(min)0.700.750.800.850.900.951.00Supportsetrecall01020304050Time(min)10−910−810−710−610−510−410−310−210−1Relativesuboptimality0510152025Time(min)0.750.800.850.900.951.00Supportsetprecision0510152025Time(min)0.700.750.800.850.900.951.00SupportsetrecallStingyCD+StingyCDCD+SafeScreeningCDG.2. Full results for allstate dataset

Number of examples: 2.5 × 105. Number of features: 1.5 × 104.

StingyCD

allstate, λ = 0.1λmax, (cid:107)x(cid:63)(cid:107)0 = 176

allstate, λ = 0.05λmax, (cid:107)x(cid:63)(cid:107)0 = 1404

allstate, λ = 0.02λmax, (cid:107)x(cid:63)(cid:107)0 = 4821

allstate, λ = 0.01λmax, (cid:107)x(cid:63)(cid:107)0 = 6828

051015202530354045Time(s)10−910−810−710−610−510−410−310−210−1Relativesuboptimality05101520Time(s)0.750.800.850.900.951.00Supportsetprecision05101520Time(s)0.700.750.800.850.900.951.00Supportsetrecall01020304050Time(s)10−910−810−710−610−510−410−310−210−1Relativesuboptimality0510152025Time(s)0.750.800.850.900.951.00Supportsetprecision0510152025Time(s)0.700.750.800.850.900.951.00Supportsetrecall020406080100120140Time(s)10−910−810−710−610−510−410−310−210−1Relativesuboptimality010203040506070Time(s)0.750.800.850.900.951.00Supportsetprecision010203040506070Time(s)0.700.750.800.850.900.951.00Supportsetrecall050100150200250Time(s)10−910−810−710−610−510−410−310−210−1Relativesuboptimality020406080100120Time(s)0.750.800.850.900.951.00Supportsetprecision020406080100120Time(s)0.700.750.800.850.900.951.00SupportsetrecallStingyCD+StingyCDCD+SafeScreeningCDStingyCD

H. Additional comparisons for logistic regression problems

H.1. Full results for lending club dataset

Number of examples: 1.1 × 105. Number of features: 3.1 × 104.

lending club, λ = 0.05λmax, (cid:107)x(cid:63)(cid:107)0 = 272

lending club, λ = 0.02λmax, (cid:107)x(cid:63)(cid:107)0 = 878

lending club, λ = 0.01λmax, (cid:107)x(cid:63)(cid:107)0 = 1937

lending club, λ = 0.005λmax, (cid:107)x(cid:63)(cid:107)0 = 3780

02468101214Time(s)10−510−410−310−2Relativesuboptimality02468101214Time(s)0.700.750.800.850.900.951.00Supportsetprecision02468101214Time(s)0.700.750.800.850.900.951.00Supportsetrecall051015202530Time(s)10−510−410−310−2Relativesuboptimality051015202530Time(s)0.700.750.800.850.900.951.00Supportsetprecision051015202530Time(s)0.700.750.800.850.900.951.00Supportsetrecall0102030405060708090Time(s)10−510−410−310−2Relativesuboptimality0102030405060708090Time(s)0.700.750.800.850.900.951.00Supportsetprecision0102030405060708090Time(s)0.700.750.800.850.900.951.00Supportsetrecall050100150200250Time(s)10−510−410−310−2Relativesuboptimality050100150200250Time(s)0.700.750.800.850.900.951.00Supportsetprecision050100150200250Time(s)0.700.750.800.850.900.951.00SupportsetrecallStingyCD+ProxNewtonwithWorkingSetsCDProxNewtonwithWorkingSetsStingyCD+ProxNewtonCDProxNewtonH.2. Full results for kdda dataset

Number of examples: 8.4 × 106. Number of features: 2.2 × 106.

StingyCD

kdda, λ = 0.02λmax, (cid:107)x(cid:63)(cid:107)0 = 195

kdda, λ = 0.01λmax, (cid:107)x(cid:63)(cid:107)0 = 383

kdda, λ = 0.005λmax, (cid:107)x(cid:63)(cid:107)0 = 692

kdda, λ = 0.002λmax, (cid:107)x(cid:63)(cid:107)0 = 1616

0.00.51.01.52.02.53.03.54.0Time(min)10−510−410−310−2Relativesuboptimality0.00.51.01.52.02.53.03.54.0Time(min)0.700.750.800.850.900.951.00Supportsetprecision0.00.51.01.52.02.53.03.54.0Time(min)0.700.750.800.850.900.951.00Supportsetrecall012345Time(min)10−510−410−310−2Relativesuboptimality012345Time(min)0.700.750.800.850.900.951.00Supportsetprecision012345Time(min)0.700.750.800.850.900.951.00Supportsetrecall012345678Time(min)10−510−410−310−2Relativesuboptimality012345678Time(min)0.700.750.800.850.900.951.00Supportsetprecision012345678Time(min)0.700.750.800.850.900.951.00Supportsetrecall02468101214Time(min)10−510−410−310−2Relativesuboptimality02468101214Time(min)0.700.750.800.850.900.951.00Supportsetprecision02468101214Time(min)0.700.750.800.850.900.951.00SupportsetrecallStingyCD+ProxNewtonwithWorkingSetsCDProxNewtonwithWorkingSetsStingyCD+ProxNewtonCDProxNewton