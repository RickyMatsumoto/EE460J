Learning Gradient Descent: Better Generalization and Longer Horizons

Kaifeng Lv * 1 Shunhua Jiang * 1 Jian Li 1

Abstract

1.1. Existing Work

Training deep neural networks is a highly non-
trivial task, involving carefully selecting appro-
priate training algorithms, scheduling step sizes
and tuning other hyperparameters. Trying dif-
ferent combinations can be quite labor-intensive
and time consuming. Recently, researchers have
tried to use deep learning algorithms to exploit
the landscape of the loss function of the training
problem of interest, and learn how to optimize
over it in an automatic way.
In this paper, we
propose a new learning-to-learn model and some
useful and practical tricks. Our optimizer outper-
forms generic, hand-crafted optimization algo-
rithms and state-of-the-art learning-to-learn opti-
mizers by DeepMind in many tasks. We demon-
strate the effectiveness of our algorithms on a
number of tasks, including deep MLPs, CNNs,
and simple LSTMs.

1. Introduction

Training a neural network can be viewed as solving an op-
timization problem for a highly non-convex loss function.
Gradient-based algorithms are by far the most widely used
algorithms for training neural networks, such as basic SGD,
Adagrad, RMSprop, Adam, etc. For a particular neural
network, it is unclear a priori which one is the best opti-
mization algorithm, and how to set up the hyperparame-
ters (such as learning rates). It usually takes a lot of time
and experienced hands to identify the best optimization al-
gorithm together with best hyperparameters, and possibly
some other tricks are necessary to make the network work.

*Equal contribution †The research is supported in part
by the National Basic Research Program of China grants
2015CB358700, 2011CBA00300, 2011CBA00301, and the
Interdis-
National NSFC grants 61632016.
ciplinary Information Sciences, Tsinghua University, Bei-
Correspondence to: Kaifeng Lv <vﬂeak-
jing, China.
ing@163.com>, Shunhua Jiang <linda6582@163.com>, Jian Li
<lijian83@mail.tsinghua.edu.cn>.

1Institute for

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

To address the above issue, a promising approach is to
use machine learning algorithms to replace the hard-coded
optimization algorithms, and hopefully, the learning algo-
rithm is capable of learning a good strategy, from expe-
rience, to explore the landscape of the loss function and
adaptively choose good descent steps. In a high level, the
idea can be categorized under the umbrella of learning-to-
learn (or meta-learning), a broad area known to learning
community for more than two decades.

Using deep learning for training deep neural networks was
initiated in a recent paper (Andrychowicz et al., 2016). The
authors proposed an optimizer using coordinatewise Long
Short Term Memory (LSTM) (Hochreiter & Schmidhuber,
1997) that takes the gradients of the optimizee as input and
outputs the updates for each optimizee parameters. We
call this optimizer DMoptimizer throughout this paper, and
we use the term optimizee to refer to the loss function of
the neural network being optimized. The authors showed
that DMoptimizer outperforms traditional optimization al-
gorithms in solving the task on which it is trained, and it
also generalizes well to the same type of tasks.
In one
of their experiments, they trained DMoptimizer to mini-
mize the average loss of a 100-step training process of a
1-hidden-layer Multilayer Perceptron (MLP) with sigmoid
as the activation function, and the optimizer was shown to
have generalization ability to some extent: it also performs
well on such MLP with one more hidden layer or double
hidden neurons. However, there are still some limitations:

1. If the activation function of the MLP is changed from
sigmoid to ReLU in the test phase, DMoptimizer per-
forms poorly to train such MLP. In other words, their
algorithms fail to generalize to different activations.

2. Even though the authors showed that DMoptimizer
performs well to train the optimizee for 200 descent
steps, the loss increases dramatically for much longer
horizons. In other words, their algorithms fail to han-
dle a relatively large number of descent steps.

1.2. Our Contributions

In this paper, we propose two new training tricks and a new
model to improve the results of training a recurrent neural

Learning Gradient Descent: Better Generalization and Longer Horizons

network (RNN) to optimize the loss functions of real-world
neural networks.

The most effective trick is Random Scaling, which is used
when training the RNN optimizer to improve its general-
ization ability by randomly scaling the parameters of the
optimizee. The other trick is to combine the loss function
of the optimizee with other simple convex functions, which
helps to accelerate the training process. With the help of
our new training tricks, our new model, called RNNprop,
achieves notable improvements upon previous work after
being trained on a simple 1-hidden-layer MLP:

1. It can train optimizees for longer horizons.

In par-
ticular, when RNNprop is only trained to minimize
the ﬁnal loss of a 100-step training process, in testing
phase it can successfully train optimizees for several
thousand steps.

2. It can generalize to a variety of neural networks
including much deeper MLPs, CNNs, and simple
LSTMs. On these tasks it achieves better or at least
comparable performance with traditional optimization
algorithms.

2. Other Related Work

2.1. Learning to Learn

The notion of learning to learn or meta-learning has been
used to address the concept of learning meta-knowledge
about the learning process for years. However, there is
no agreement on the exact deﬁnition of meta-learning, and
various concepts have been developed by different authors
(Thrun & Pratt, 1998; Vilalta & Drissi, 2002; Brazdil et al.,
2008).

In this paper, we view the training process of a neural net-
work as an optimization problem, and we use an RNN as
an optimizer to train other neural networks. The usage of
another neural network to direct the training of neural net-
works has been put forward by Naik and Mammone (1992).
In their early work, Cotter and Younger (1990; 1999) ar-
gued that RNNs can be used to model adaptive optimiza-
tion algorithms (Prokhorov et al., 2002). This idea was fur-
ther developed in (Younger et al., 2001; Hochreiter et al.,
2001) and gradient descent is used to train an RNN opti-
mizer on convex problems. Recently, as shown in Section
1.1, Andrychowicz et al. (2016) proposed a more general
optimizer model using LSTM to learn gradient descent, and
our work directly follows their work. In another recent pa-
per (Chen et al., 2016), an RNN is used to take current
position and value as input and outputs the next position,
and it works well for black-box optimization and simple
RL tasks.

From a reinforcement learning perspective, the optimizer
can be viewed as a policy which takes the current state
as input and output the next action (Schmidhuber et al.,
1999). Two recent papers (Daniel et al., 2016; Hansen,
2016) trained adaptive controllers to adjust the hyperpa-
rameters (learning rate) of traditional optimization algo-
rithms from this perspective. Their method can be regarded
as hyperparameter optimization. More general methods
have been introduced in (Li & Malik, 2017; Wang et al.,
2016) which also take the RL perspective and train a neural
network to model a policy.

2.2. Traditional Optimization Algorithms

A great number of optimization algorithms have been pro-
posed to improve the performance of vanilla gradient de-
scent, including Momentum(Tseng, 1998), Adagrad(Duchi
et al., 2011), Adadelta(Zeiler, 2012), RMSprop(Tieleman
& Hinton, 2012), Adam(Kingma & Ba, 2015). The update
rules of several common optimization algorithms are listed
in Table 1.

Table 1. Traditional optimization algorithms. θ are the parameters
of a neural network and g represents the gradient. α, β1, β2, γ
are the hyperparameters of an optimization algorithm. All vector
operations are coordinatewise.

Name

Update Rule

SGD

∆θt = −αgt

Momentum mt = γmt−1 + (1 − γ)gt,
∆θt = −α mt

Adagrad

Adadelta

RMSprop

Adam

Gt = Gt−1 + g2
t ,
∆θt = −α gtG−1/2

t

vt = β2vt−1 + (1 − β2)g2
t ,
t D1/2
∆θt = −αgtv−1/2
t−1,
Dt = β1Dt−1 + (1 − β1)(∆θt/α)2

vt = β2vt−1 + (1 − β2)g2
t ,
∆θt = −α gtv−1/2

t

mt = β1mt−1 + (1 − β1)gt,
vt = β2vt−1 + (1 − β2)g2
t ,
ˆmt = mt/(1 − βt
ˆvt = vt/(1 − βt
2),
∆θt = −α ˆmtˆv−1/2

1),

t

3. Rethinking of Optimization Problems

3.1. Problem Formalization

We are interested in ﬁnding an optimizer that undertakes
the optimization tasks for different optimizees. An opti-
mizee is a function f (θ) to be minimized. In the case when
the optimizee is stochastic, that is, the value of f (θ) de-

Learning Gradient Descent: Better Generalization and Longer Horizons

pends on the sample d selected from a dataset D, the goal
of an optimizer is to minimize

1
|D|

(cid:88)

d∈D

fd(θ)

(1)

over the variables θ.

When optimizing an optimizee on a dataset D, the behavior
of an optimizer can be summarized by the following loop.
For each step:

1. Given the current parameters θt and a sample dt ∈ D,
perform forward and backward propagation to com-
pute the function value yt = fdt(θt) and the gradient
gt = ∇fdt(θt);

2. Based on the current state ht (of the optimizer) and
the gradient gt, the optimizer produces the new state
ht+1 and proposes an increment ∆θt;

3. Update the parameters by setting θt+1 = θt + ∆θt.

In the initialization phase, h0 is produced by the optimizer,
and θ0 is generated according to the initialization rule of
the given optimizee. At the end of the loop, we take θT as
the ﬁnal optimizee parameters.

3.2. Some Insight into Adaptivity

Table 1 summaries optimization algorithms that are most
commonly used when training neural networks. All of
these optimization algorithms have some degree of adap-
tivity, that is, they are able to adjust the effective step size
|∆θt| when training.

We can divide these algorithms into two classes. The ﬁrst
class includes SGD and Momentum, as they determine the
effective step size by the absolute size of gradients. The
second class includes Adagrad, Adadelta, RMSprop, and
Adam. These algorithms maintain the sum or the moving
average of past gradients g2
t , which can be seen as, with
a little abuse of terminology, the second raw moment (or
uncentered variance). Then, these algorithms produce the
effective step size only by the relative size of the gradient,
namely, the gradient divided by the square root of the sec-
ond moment coordinatewise.

In a training process, as the parameters gradually approach
to a local minimum, a smaller effective step size is re-
quired for a more careful local optimization. To obtain
such smaller effective step size, these two classes of algo-
rithms have two different mechanisms. For the ﬁrst class,
if we take the full gradient, the effective step size automat-
ically gets smaller when approaching to a local minimum.
However, since we use stochastic gradient descent, the ef-
fective step size may not be small enough, even if θ is not

far from a local minimum. For the second class, a smaller
effective step size |∆θt,i| of each coordinate i is mainly in-
duced by a relatively smaller partial derivative comparing
with past partial derivatives. When approaching to a lo-
cal minimum, the gradient may ﬂuctuate due to stochastic
nature. Algorithms of the second class can decrease the
effective step size of each coordinate in accordance with
the ﬂuctuation amplitude of that coordinate, i.e., a coordi-
nate with larger uncentered variance yields smaller effec-
tive step size. Thus, the algorithms of the second class are
able to further decrease effective step size for the coordi-
nates with more uncertainty, and they are more robust than
those of the ﬁrst class.

To get more insight into the difference between these two
classes of algorithms, we consider what happens if we scale
the optimizee by a factor c, i.e., let ˜f (θ) = cf (θ). Ide-
ally, the scaling should not affect the behaviors of the algo-
rithms. However, for the algorithms of the ﬁrst class, since
∇ ˜f (θ) = c∇f (θ), the effective step size is also scaled by c.
Hence, the behaviors of the algorithms change completely.
But for the algorithms of the second class, they behave the
same on ˜f (θ) and f (θ) since the scale factor c is canceled
out. Thus the algorithms of the second class are more ro-
bust with respect to scaling.

The above observation, albeit very simple, is a key inspi-
ration for our new model. On the one hand, we use some
training tricks so that our model can be exposed to func-
tions with different scales at the training stage. On the other
hand, we take relative gradients as input so that our opti-
mizer belongs to the second class. In the following section,
we introduce our training tricks and new model in details.

4. Methods

Our RNN optimizer operates coordinatewise on parame-
ters θ, which follows directly from (Andrychowicz et al.,
2016). The RNN optimizer handles the gradients coordi-
natewise and maintains hidden states for every coordinate
respectively. The parameters of the RNN itself are shared
between different coordinates. In this way, the RNN opti-
mizer can train optimizees with any number of parameters.

4.1. Random Scaling

We propose a training trick, called Random Scaling, to pre-
vent overﬁtting when training our model. Before introduc-
ing our ideas, consider what happens if we train an RNN
optimizer to minimize f (θ) = λ(cid:107)θ(cid:107)2
2 with initial parame-
ter θ0. Clearly, θt+1 = θt − 1
2λ ∇f (θt) is the optimal pol-
icy since the lowest point can be reached in just one step.
However, if the RNN optimizer learns to follow this rule
exactly, testing this RNN optimizer on the same function
with different λ might produce a modest or even bad result.

Learning Gradient Descent: Better Generalization and Longer Horizons

The method to solve this issue is rather simple: We ran-
domly pick a λ for every iteration when training our RNN
optimizer. Notice that we can also pick a random number to
scale all the parameters to achieve the same goal. To further
generalize this idea, we design our training trick, Random
Scaling, which coordinatewise randomly scales the param-
eters of the objective function in the training stage.

In more details, for each iteration of training the optimizer
on a loss function f (θ) with initial parameter θ0, we ﬁrst
randomly pick a vector c of the same dimension as θ, where
each coordinate of c is sampled independently from a dis-
tribution D0. Then, we train our model on a new optimizee

fc(θ) = f (cθ)

(2)

with initial parameter c−1θ0, where all the multiplication
and inversion operations are performed coordinatewise. In
this way, the RNN optimizer is forced to learn an adaptive
policy to determine the best effective step size, rather than
to learn the best effective step size itself of a particular task.

4.2. Combination with Convex Functions

Now we introduce another training trick.
It is clear that
we should train our RNN optimizer on optimizees imple-
mented with neural networks. However, due to non-convex
and stochastic nature of neural networks, it may be hard for
an RNN to learn the basic idea of gradient descent.

Our idea is loosely inspired by the proximal algorithms (see
e.g., (Parikh & Boyd, 2014)). To make training easier, we
combine the original optimizee function f with an n-dim
convex function g to get a new optimizee function F

F (θ, x) = f (θ) + g(x).

(3)

For every iteration of training RNN optimizer, we generate
a random vector v in n-dim vector space, and the function
g is deﬁned as

g(x) =

(xi − vi)2,

(4)

1
n

n
(cid:88)

i=1

where the initial value of x is also generated randomly.

Without this trick, the RNN optimizer wanders around aim-
lessly on the non-convex loss surface of function f in the
beginning stage of training. After we combine the opti-
mizee with function g, since g has the good property of con-
vexity, our RNN optimizer soon learns some basic knowl-
edge of gradient descent from these additional optimizee
coordinates. This knowledge is shared with other coordi-
nates because the RNN optimizer processes its input co-
ordinatewise. In this way, we can accelerate the training
process of the RNN optimizer. As the training continues,
the RNN optimizer further learns a better method with gra-
dient decent as a baseline.

We can apply Random Scaling on the function g as well to
make the behavior of the RNN optimizer more robust.

4.3. RNNprop Model

Aside from the above two tricks, we also design a new
model RNNprop as shown in Figure 1. All the operations in
our model are coordinatewise, following the idea of DMop-
timizer idea in (Andrychowicz et al., 2016).

The main difference between RNNprop and DMoptimizer
is the input. The input ˜mt and ˜gt are deﬁned as follows:

˜mt = ˆmtˆv−1/2
˜gt = gtˆv−1/2
,

t

t

,

(5)

(6)

where ˆmt, ˆvt are deﬁned the same way as Adam in Table
1. This change of the input has three advantages. First,
this input contains no information about the absolute size of
gradients, so our algorithm belongs to the second class au-
tomatically and hence is more robust. Second, this manip-
ulation of gradients can be seen as a kind of normalization
so that the input values are bounded by a constant, which
is somewhat easier for a neural network to learn. Lastly, if
our model outputs a constant times ˜mt, it reduces to Adam.
Similarly, if our model outputs a constant times ˜gt, then
it reduces to RMSprop. Hence, the hope is that by fur-
ther optimizing the parameters of RNNprop, it is capable
of achieving better performance than Adam and RMSprop
with ﬁxed learning rate.

The input is preprocessed by a fully-connected layer with
ELU (Exponential Linear Unit) as the activation function
(Clevert et al., 2015) before being handled by the RNN.
The central part of our model is the RNN, which is a two-
layer coordinatewise LSTM that is same as DMoptimizer.
The RNN outputs a single vector xout, and the increment
is taken as

∆θt = α tanh(xout).

(7)

This formula can be viewed as a variation of gradient clip-
ping so that all effective step sizes are bounded by the pre-
set parameter α. In all our experiments, we just set a large
enough value α = 0.1.

˜mt ˜gt

Preprocessing

α

RNN

∆θt

Figure 1. The structure of our model RNNprop.

Learning Gradient Descent: Better Generalization and Longer Horizons

Figure 2. Performance on the base MLP. Left: RNNprop achieves comparable performance when allowed to run for 2000 steps. Right:
RNNprop continues to decrease the loss even for 10000 steps, but the performance is slightly worse than some traditional algorithms.

5. Experiments

We trained two RNN optimizers, one to reproduce DMop-
timizer in (Andrychowicz et al., 2016), the other to imple-
ment RNNprop with our new training tricks. Their perfor-
mances were compared in a number of experiments. 1

We use the same optimizee as in (Andrychowicz et al.,
2016) to train these two optimizers, which is the cross-
entropy loss of a simple MLP on the MNIST dataset. For
convenience, we address this MLP as the base MLP. It has
one hidden layer of 20 hidden units and uses sigmoid as
activation function. The value of f (θ) is computed using
a minibatch of 128 random pictures. For each iteration
during training, the optimizers are allowed to run for 100
steps. Optimizers are trained using truncated Backpropa-
gation Trough Time (BPTT). We split the 100 steps into 5
periods of 20 steps. In each period, we initialize the ini-
tial parameter θ0 and initial hidden state h0 from the last
period or generate them if it is the ﬁrst period. Adam is
used to minimize the loss L(φ) = 1
t=1 wtf (θt). We
T
trained DMoptimizer using the loss with wt = 1 for all t
as in (Andrychowicz et al., 2016). For RNNprop we set
wT = 1 and wt = 0 for other t. In this way, the optimizer
is not strictly required to produce a low loss at each step, so
it can be more ﬂexible. We also notice that this loss results
in slightly better performance.

(cid:80)T

The structure of our model RNNprop is shown in Section
4.3. The RNN is a two-layer LSTM whose hidden state
size is 20. To avoid division by zero, in actual experiments
we add another term (cid:15) = 10−8, and the input is changed to

˜mt = ˆmt(ˆv1/2
˜gt = gt(ˆv1/2

t + (cid:15))−1,
t + (cid:15))−1.

(8)

(9)

The parameters β1 and β2 for computing mt and gt are

1Our code can be found at https://github.com/

vfleaking/rnnprop.

simply set to 0.95. In preprocessing, the input is mapped to
a 20-dim vector for each coordinate.

When training RNNprop, we ﬁrst apply Random Scaling
to the optimizee function f and the convex function g re-
spectively, where g is deﬁned as Equation (4), and then we
combine them together as introduced in Section 4.2. We set
the dimension of the convex function g to be n = 20 and
generate the vectors v and x from [−1, 1]n uniformly ran-
domly. To generate each coordinate of the vector c in Ran-
dom Scaling, we ﬁrst generate a number p from [−L, L]
uniformly randomly, and then take exp(p) as the value of
that coordinate, where exp is the natural exponential func-
tion. This implementation is aimed to produce c of differ-
ent order of magnitude, e.g., Pr[ 1
9 ] = Pr[9 ≤
ci ≤ 10]. We also tried other transformations including
using uniform distribution, scaling the entire function di-
rectly, randomly dropping some coordinates, etc. This ver-
sion of Random Scaling is selected after comprehensive
comparison. In the experiments we set L = 3 for the func-
tion f and L = 1 for the function g.

10 ≤ ci ≤ 1

We save all the parameters of the RNN optimizers every
1000 iterations when training. For DMoptimizer, we se-
lect the saved optimizer with the best performance on the
validation task, same as in (Andrychowicz et al., 2016).
Since RNNprop tends not to overﬁt to the training task be-
cause of the Random Scaling method, we simply select the
saved optimizer with lowest average train loss, which is
the moving average of the losses of the past 1000 itera-
tions with decay factor 0.9. The selected optimizers are
then tested on other different tasks. Their performances
are compared with the best traditional optimization algo-
rithms whose learning rates are carefully chosen and other
hyperparameters are set to the default values in Tensorﬂow
(Abadi et al., 2016). All the initial optimizee parameters
used in the experiments are generated independently from
the Gaussian distribution N (0, 0.1).

Learning Gradient Descent: Better Generalization and Longer Horizons

All ﬁgures shown in this section were plotted after running
the optimization process multiple times with random ini-
tial values and data. We removed the outliers with exceed-
ingly large loss value when plotting the loss curves. No loss
value of RNNprop was removed when plotting the ﬁgures.

5.1. Generalization to More Steps

We ﬁrst test optimizers on the task used in the training
stage, which is to optimize the base MLP for 100 steps.
Both DMoptimizer and RNNprop outperform all tradi-
tional optimization algorithms. DMoptimizer has better
performance possibly because of overﬁtting. We then test
optimizers to run for more steps on the base MLP. The left
plot of Figure 2 indicates that RNNprop can achieve com-
parable performance with traditional algorithms for 2000
steps while DMoptimizer fails.

We also test the optimizers for much more steps: 10000
steps, as shown in the right plot of Figure 2.
It is clear
that DMoptimizer loses the ability to decrease the loss af-
ter about 400 steps and its loss begins to increase dramat-
ically. RNNprop, on the other hand, is able to decrease
the loss continuously, though it slows down gradually and
traditional algorithms overtake it. The main reason is that
RNNprop is trained to run for only 100 steps, and 10000-
step training process may be signiﬁcantly different from
100-step training process. Additionally, traditional opti-
mization algorithms are able to achieve good performance
on both tasks because we explicitly adjusted their learning
rates to adapt to these tasks.

Figure 3 shows how the ﬁnal loss after 10000 steps changes
when using different learning rates. For example, Adam
can outperform RNNprop only if its learning rate lies in
the narrow interval from 0.004 to 0.01.

For other optimizees, RNNprop shows similar ability to
train for longer horizons. Due to space constraints, we do
not discuss them in details.

5.2. Generalization to Different Activation Functions

We test the optimizers on the base MLP with different ac-
tivation functions. As shown in Figure 4, if the activation
function is changed from sigmoid to ReLU, RNNprop can
still achieve better performance than traditional algorithms
while DMoptimizer fails. For other activations, RNNprop
also generalizes well as shown in Table 2.

5.3. Generalization to Deeper MLP

In deep neural networks, different layers may have different
optimal learning rates, but traditional algorithms only have
one global learning rate for all the parameters. Our RNN
optimizer can achieve better performance beneﬁted from

Figure 3. The ﬁnal loss of different algorithms on the base MLP
after 10000 steps. The colorful solid curves show how the ﬁnal
losses of traditional algorithms after 10000 steps change with dif-
ferent learning rates, and the horizontal dash line shows the ﬁnal
loss of RNNprop. We compute the ﬁnal loss by freezing the ﬁnal
parameters of the optimizee and compute the average loss using
all the data encountered during optimization process.

Table 2. Performance on the base MLP with different activations.
The numbers in table were computed after running the optimiza-
tion processes for 100 times.

Activation Adam DMoptimizer

RNNprop

sigmoid

ReLU

ELU

tanh

0.31

0.28

0.26

0.31

0.24

1.05

13.51

0.50

0.29

0.27

0.24

0.28

its more adaptive behavior.

We tested the optimizers on deeper MLPs. More hidden
layers are added to the base MLP, all of which have 20 hid-
den units and use sigmoid as activation function. As shown
in Figure 6, RNNprop can always outstrip traditional algo-
rithms until the MLP becomes too deep and none of them
can decrease its loss in 100 steps. Figure 5 shows the loss
curves on the MLP with 5 hidden layers as an example.

5.4. Generalization to Different Structures

5.4.1. CNN

The CNN optimizees are the cross-entropy losses of con-
volutional neural networks (CNN) with similar structure
as VGGNet (Simonyan & Zisserman, 2015) on dataset
MNIST or dataset CIFAR-10. All convolutional layers use
3×3 ﬁlters and the window of each max-pooling layer is of
size 2 × 2 with stride 2. We use c to denote a convolutional
layer, p to denote a max-pooling layer and f to denote a
fully-connected layer. Three CNNs are used in the exper-
iments: CNN with structure c-c-p-f on MNIST, CNN

Learning Gradient Descent: Better Generalization and Longer Horizons

Figure 4. RNNprop slightly outperforms traditional algorithms on
the base MLP with activation replaced with ReLU.

Figure 5. RNNprop signiﬁcantly outperforms traditional algo-
rithms on the base MLP with 5 hidden layers.

with structure c-c-p-c-c-p-f-f on MNIST and CNN
with structure c-c-p-f on CIFAR-10.

The results are shown in Figure 7. RNNprop can out-
perform traditional algorithms on CNN with structure
c-c-p-f on dataset MNIST. On the other two CNNs,
only the best traditional algorithm outperforms RNNprop.
Even though (Andrychowicz et al., 2016) showed that
DMoptimizer that is trained on CNNs can train CNNs
faster than traditional algorithms,
in our experiments
DMoptimizer fails to train any of the CNNs when the train-
ing set is ﬁxed to the base MLP.

5.4.2. LSTM

The optimizers are also tested on the mean squared loss
of an LSTM with hidden state size 20 on a simple task:
given a sequence f (0), . . . , f (9) with additive noise, the
LSTM needs to predict the value of f (10). Here f (x) =
A sin(ωx + φ). When generating the dataset, we uniformly
randomly choose A ∼ U (0, 10), ω ∼ U (0, π/2), φ ∼
U (0, 2π), and we draw the noise from the Gaussian dis-
tribution N (0, 0.1).

Figure 6. Performance on the base MLP with different number of
hidden layers. Among all traditional algorithms we only list the
performance of Adam since it achieves lowest loss.

Table 3. Performance on the task with different settings of LSTM.
We list the ﬁnal loss of RNNprop and best traditional optimization
algorithms on the task with 2-layer LSTM and on the task with
smaller noise. The numbers in table were computed after running
the optimization processes for 100 times.

Experiment Adam Adagrad DMoptimizer RNNprop

Default

2 Layers

0.62

0.44

Small Noise

0.39

0.54

0.65

0.50

26.43

5.06

22.04

0.55

0.28

0.36

Even though the task is completely different from the task
that is used for training, RNNprop still has comparable or
even better performance than traditional algorithms, which
may be due to the fact the structure inside LSTM is similar
to that of the base MLP with sigmoid in between.

We also adjust the settings of the task. As shown in Fig-
ure 3, RNNprop still achieve good results when we use
a smaller noise from the distribution N (0, 0.01) or use a
two-layer LSTM instead of one-layer.

5.5. Control Experiment

To assess the effectiveness of each contribution separately,
we also trained three more RNN optimizers: DMoptimizer
trained with the two tricks and two RNNprop, each trained
with one of the two tricks respectively.

Recall that the trick of combining with convex function
aims to accelerate the training of RNN optimizers. We test
the performance of RNNprop whose own parameters are
trained for different numbers of iterations, with or without
this trick. The result is shown in Table 4. With this trick
RNN optimizer can achieve a good result with fewer itera-
tions of training.

Learning Gradient Descent: Better Generalization and Longer Horizons

Figure 7. Performance on different CNNs. Left: The CNN has 2 convolutional layer, 1 pooling layer and 1 fully-connected layer and is
on dataset MNIST. Center: The CNN has 4 convolutional layer, 2 pooling layer and 2 fully-connected layer and is on dataset MNIST.
Right: The CNN has 2 convolutional layer, 1 pooling layer and 1 fully-connected layer and is on dataset CIFAR-10.

Figure 8. Performance on a sequence prediction problem imple-
mented by LSTM.

To assess the other two contributions, we select the trained
optimizers in the same way as RNNprop. In Figure 9, we
test their performances on the base MLP with activation
replaced with ReLU for 1000 steps. From the ﬁgure, we
conclude that Random Scaling is the most effective trick.

Table 4. Comparison between RNNprop with or without combi-
nation with convex functions. We test them on the base MLP and
the base MLP with activation replaced with ReLU. The 2nd col-
umn shows the number of iterations used to train optimizers. The
4th column shows the ﬁnal loss produced by RNNprop with all
training tricks, while the last column shows the ﬁnal loss produced
by RNNprop trained without combination with convex functions.

Optimizee

#Iter Adam RNNprop No CC

Base MLP

ReLU

5k
10k
15k

5k
10k
15k

0.31
0.31
0.31

0.28
0.28
0.28

0.33
0.31
0.30

0.30
0.29
0.27

0.33
0.32
0.33

0.31
0.31
0.32

Figure 9. Comparison between RNNprop trained with two tricks,
RNNprop trained without Random Scaling, DMoptimizer,
DMoptimizer trained with two tricks. All optimizers are tested
on the base MLP with activation replaced with ReLU for 1000
steps.

6. Conclusion

In this paper, we present a new learning-to-learn model
with several useful tricks. We show that our new opti-
mizer has better generalization ability than the state-of-art
learning-to-learn optimizers. After trained using a sim-
ple MLP, our new optimizer achieves better or comparable
performance with traditional optimization algorithms when
training more complex neural networks or when training
for longer horizons.

We believe it is possible to further improve the generaliza-
tion ability of our optimizer. Indeed, on some tasks in our
experiments, our optimizer did not outperform the best tra-
ditional optimization algorithms, in particular when train-
ing for much longer horizon or when training neural net-
works on different datasets. In the future, we aim to fur-
ther develop a more generic optimizer with more elaborate
designing, so that it can achieve better performance on a
wider range of tasks that are analogous with the optimizee
used in training.

Learning Gradient Descent: Better Generalization and Longer Horizons

References

Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z.,
Citro, C., Corrado, G.S., Davis, A., Dean, J., Devin,
M., et al. Tensorﬂow: Large-scale machine learning
on heterogeneous distributed systems. arXiv preprint
arXiv:1603.04467, 2016.

Andrychowicz, M., Denil, M., G´omez, S., Hoffman, M. W.,
Pfau, D., Schaul, T., and de Freitas, N. Learning to
In Lee,
learn by gradient descent by gradient descent.
D. D., Sugiyama, M., Luxburg, U. V., Guyon, I., and
Garnett, R. (eds.), Advances in Neural Information Pro-
cessing Systems 29, pp. 3981–3989. Curran Associates,
Inc., 2016.

Brazdil, P., Carrier, C.G., Soares, C., and Vilalta, R. Met-
alearning: Applications to Data Mining. Springer Pub-
lishing Company, Incorporated, 1 edition, 2008. ISBN
3540732624, 9783540732624.

Li, K. and Malik, J. Learning to optimize. In International

Conference on Learning Representations, 2017.

Naik, D.K. and Mammone, R.J. Meta-neural networks that
learn by learning. In International Joint Conference on
Neural Networks, volume 1, pp. 437–442. IEEE, 1992.

Parikh, N. and Boyd, S. Proximal algorithms. Foundations

and Trends® in Optimization, 1(3):127–239, 2014.

Prokhorov, D.V., Feldkarnp, L.A., and Tyukin, I.Y. Adap-
tive behavior with ﬁxed weights in rnn: an overview. In
International Joint Conference on Neural Networks, pp.
2018–2022, 2002.

Schmidhuber, J., Zhao, J., and Wiering, M. Simple Prin-
Istituto Dalle Molle Di Studi

ciples of Metalearning.
Sull’Intelligenza Artiﬁciale, 1999.

Simonyan, K. and Zisserman, A. Very deep convolutional
networks for large-scale image recognition. In Interna-
tional Conference on Learning Representations, 2015.

Thrun, S. and Pratt, L. Learning to Learn. Springer US,

Chen, Y., Hoffman, M.W., Colmenarejo, S.G., Denil, M.,
Lillicrap, T.P., and de Freitas, N. Learning to learn
for global optimization of black box functions. arXiv
preprint arXiv:1611.03824, 2016.

1998.

Clevert, D.A., Unterthiner, T., and Hochreiter, S. Fast
and accurate deep network learning by exponential lin-
ear units (elus). arXiv preprint arXiv:1511.07289, 2015.

Tieleman, T. and Hinton, G. Lecture 6.5-rmsprop: Divide
the gradient by a running average of its recent magni-
tude. COURSERA: Neural Networks for Machine Learn-
ing, 4(2), 2012.

Cotter, N.E. and Conwell, P.R. Fixed-weight networks can
learn. In IJCNN International Joint Conference on Neu-
ral Networks, pp. 553–559, 1990.

Tseng, P. An incremental gradient (-projection) method
with momentum term and adaptive stepsize rule. SIAM
Journal on Optimization, 8(2):506–531, 1998.

Daniel, C., Taylor, J., and Nowozin, S. Learning step size
controllers for robust neural network training. In AAAI
Conference on Artiﬁcial Intelligence, 2016.

Duchi, J., Hazan, E., and Singer, Y. Adaptive subgradient
methods for online learning and stochastic optimization.
Journal of Machine Learning Research, 12(Jul):2121–
2159, 2011.

Hansen, S. Using deep q-learning to control optimiza-
tion hyperparameters. arXiv preprint arXiv:1602.04062,
2016.

Hochreiter, S. and Schmidhuber, J. Long short-term mem-

ory. Neural computation, 9(8):1735–1780, 1997.

Hochreiter, S., Younger, A., and Conwell, P. Learning to
learn using gradient descent. International Conference
on Artiﬁcial Neural Networks, pp. 87–94, 2001.

Kingma, D. and Ba, J. Adam: A method for stochastic
optimization. In International Conference on Learning
Representations, 2015.

Vilalta, R. and Drissi, Y. A perspective view and survey
of meta-learning. Artiﬁcial Intelligence Review, 18(2):
77–95, 2002.

Wang, J.X., Kurthnelson, Z., Tirumala, D., Soyer, H.,
Leibo, J.Z., Munos, R., Blundell, C., Kumaran, D., and
Botvinick, M. Learning to reinforcement learn. arXiv
preprint arXiv:1611.05763, 2016.

Younger, A.S., Conwell, P.R., and Cotter, N.E. Fixed-
weight on-line learning. IEEE Transactions on Neural
Networks, 10(2):272–83, 1999.

Younger, A.S., Hochreiter, S., and Conwell, P.R. Meta-
In International Joint
learning with backpropagation.
Conference on Neural Networks, volume 3. IEEE, 2001.

Zeiler, M.D. Adadelta: an adaptive learning rate method.

arXiv preprint arXiv:1212.5701, 2012.

