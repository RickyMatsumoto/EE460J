Sharp Minima Can Generalize For Deep Nets

Laurent Dinh 1 Razvan Pascanu 2 Samy Bengio 3 Yoshua Bengio 1 4

Abstract
Despite their overwhelming capacity to overﬁt,
deep learning architectures tend to generalize rel-
atively well to unseen data, allowing them to be
deployed in practice. However, explaining why
this is the case is still an open area of research.
One standing hypothesis that is gaining popularity,
e.g. Hochreiter & Schmidhuber (1997); Keskar
et al. (2017), is that the ﬂatness of minima of the
loss function found by stochastic gradient based
methods results in good generalization. This pa-
per argues that most notions of ﬂatness are prob-
lematic for deep models and can not be directly
applied to explain generalization. Speciﬁcally,
when focusing on deep networks with rectiﬁer
units, we can exploit the particular geometry of pa-
rameter space induced by the inherent symmetries
that these architectures exhibit to build equivalent
models corresponding to arbitrarily sharper min-
ima. Furthermore, if we allow to reparametrize
a function, the geometry of its parameters can
change drastically without affecting its general-
ization properties.

1

Introduction

Deep learning techniques have been very successful in
several domains, like object recognition in images (e.g
Krizhevsky et al., 2012; Simonyan & Zisserman, 2015;
Szegedy et al., 2015; He et al., 2016), machine transla-
tion (e.g. Cho et al., 2014; Sutskever et al., 2014; Bahdanau
et al., 2015; Wu et al., 2016; Gehring et al., 2016) and speech
recognition (e.g. Graves et al., 2013; Hannun et al., 2014;
Chorowski et al., 2015; Chan et al., 2016; Collobert et al.,
2016). Several arguments have been brought forward to jus-
tify these empirical results. From a representational point of
view, it has been argued that deep networks can efﬁciently

1Universit´e of Montr´eal, Montr´eal, Canada 2DeepMind, Lon-
don, United Kingdom 3Google Brain, Mountain View, United
States 4CIFAR Senior Fellow. Correspondence to: Laurent Dinh
<laurent.dinh@umontreal.ca>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by
the author(s).

approximate certain functions (e.g. Montufar et al., 2014;
Raghu et al., 2016). Other works (e.g Dauphin et al., 2014;
Sagun et al., 2014; Choromanska et al., 2015) have looked
at the structure of the error surface to analyze how trainable
these models are. Finally, another point of discussion is
how well these models can generalize (Nesterov & Vial,
2008; Keskar et al., 2017; Zhang et al., 2017). These corre-
spond, respectively, to low approximation, optimization and
estimation error as described by Bottou (2010).

Our work focuses on the analysis of the estimation error. In
particular, different approaches had been used to look at the
question of why stochastic gradient descent results in solu-
tions that generalize well (Bottou & LeCun, 2005; Bottou &
Bousquet, 2008). For example, Duchi et al. (2011); Nesterov
& Vial (2008); Hardt et al. (2016); Bottou et al. (2016); Go-
nen & Shalev-Shwartz (2017) rely on the concept of stochas-
tic approximation or uniform stability (Bousquet & Elisseeff,
2002). Another conjecture that was recently (Keskar et al.,
2017) explored, but that could be traced back to Hochreiter
& Schmidhuber (1997), relies on the geometry of the loss
function around a given solution. It argues that ﬂat minima,
for some deﬁnition of ﬂatness, lead to better generalization.
Our work focuses on this particular conjecture, arguing that
there are critical issues when applying the concept of ﬂat
minima to deep neural networks, which require rethinking
what ﬂatness actually means.

While the concept of ﬂat minima is not well deﬁned, having
slightly different meanings in different works, the intuition
is relatively simple. If one imagines the error as a one-
dimensional curve, a minimum is ﬂat if there is a wide
region around it with roughly the same error, otherwise
the minimum is sharp. When moving to higher dimen-
sional spaces, deﬁning ﬂatness becomes more complicated.
In Hochreiter & Schmidhuber (1997) it is deﬁned as the
size of the connected region around the minimum where the
training loss is relatively similar. Chaudhari et al. (2017)
relies, in contrast, on the curvature of the second order struc-
ture around the minimum, while Keskar et al. (2017) looks
at the maximum loss in a bounded neighbourhood of the
minimum. All these works rely on the fact that ﬂatness
results in robustness to low precision arithmetic or noise in
the parameter space, which, using an minimum description
length-based argument, suggests a low expected overﬁtting.

Sharp Minima Can Generalize For Deep Nets

the literature.

However, several common architectures and parametriza-
tions in deep learning are already at odds with this conjec-
ture, requiring at least some degree of reﬁnement in the
statements made. In particular, we show how the geome-
try of the associated parameter space can alter the ranking
between prediction functions when considering several mea-
sures of ﬂatness/sharpness. We believe the reason for this
contradiction stems from the Bayesian arguments about KL-
divergence made to justify the generalization ability of ﬂat
minima (Hinton & Van Camp, 1993). Indeed, Kullback-
Liebler divergence is invariant to change of parameters
whereas the notion of ”ﬂatness” is not. The demonstrations
of Hochreiter & Schmidhuber (1997) are approximately
based on a Gibbs formalism and rely on strong assumptions
and approximations that can compromise the applicability
of the argument, including the assumption of a discrete
function space.

2 Deﬁnitions of ﬂatness/sharpness

Figure 1: An illustration of the notion of ﬂatness. The
loss L as a function of θ is plotted in black. If the height
of the red area is (cid:15), the width will represent the volume
(cid:15)-ﬂatness. If the width is 2(cid:15), the height will then represent
the (cid:15)-sharpness. Best seen with colors.

For conciseness, we will restrict ourselves to supervised
scalar output problems, but several conclusions in this pa-
per can apply to other problems as well. We will consider
a function f that takes as input an element x from an in-
put space X and outputs a scalar y. We will denote by fθ
the prediction function. This prediction function will be
parametrized by a parameter vector θ in a parameter space
Θ. Often, this prediction function will be over-parametrized
and two parameters (θ, θ(cid:48)) ∈ Θ2 that yield the same pre-
diction function everywhere, ∀x ∈ X , fθ(x) = fθ(cid:48)(x), are
called observationally equivalent. The model is trained to
minimize a continuous loss function L which takes as argu-
ment the prediction function fθ. We will often think of the
loss L as a function of θ and adopt the notation L(θ).

The notion of ﬂatness/sharpness of a minimum is relative,
therefore we will discuss metrics that can be used to com-
pare the relative ﬂatness between two minima. In this sec-
tion we will formalize three used deﬁnitions of ﬂatness in

Hochreiter & Schmidhuber (1997) deﬁnes a ﬂat minimum
as ”a large connected region in weight space where the
error remains approximately constant”. We interpret this
formulation as follows:

Deﬁnition 1. Given (cid:15) > 0, a minimum θ, and a loss L,
we deﬁne C(L, θ, (cid:15)) as the largest (using inclusion as the
partial order over the subsets of Θ) connected set containing
θ such that ∀θ(cid:48) ∈ C(L, θ, (cid:15)), L(θ(cid:48)) < L(θ) + (cid:15). The (cid:15)-
ﬂatness will be deﬁned as the volume of C(L, θ, (cid:15)). We will
call this measure the volume (cid:15)-ﬂatness.

In Figure 1, C(L, θ, (cid:15)) will be the purple line at the top of
the red area if the height is (cid:15) and its volume will simply be
the length of the purple line.

Flatness can also be deﬁned using the local curvature of the
loss function around the minimum if it is a critical point 1.
Chaudhari et al. (2017); Keskar et al. (2017) suggest that
this information is encoded in the eigenvalues of the Hessian.
However, in order to compare how ﬂat one minimum versus
another, the eigenvalues need to be reduced to a single
number. Here we consider the spectral norm and trace of
the Hessian, two typical measurements of the eigenvalues
of a matrix.

Additionally Keskar et al. (2017) deﬁnes the notion of (cid:15)-
sharpness. In order to make proofs more readable, we will
slightly modify their deﬁnition. However, because of norm
equivalence in ﬁnite dimensional space, our results will
transfer to the original deﬁnition in full space as well. Our
modiﬁed deﬁnition is the following:

Deﬁnition 2. Let B2((cid:15), θ) be an Euclidean ball centered
on a minimum θ with radius (cid:15). Then, for a non-negative
valued loss function L, the (cid:15)-sharpness will be deﬁned as
proportional to

maxθ(cid:48)∈B2((cid:15),θ)

(cid:0)L(θ(cid:48)) − L(θ)(cid:1)

.

1 + L(θ)

In Figure 1, if the width of the red area is 2(cid:15) then the height
of the red area is maxθ(cid:48)∈B2((cid:15),θ)

(cid:0)L(θ(cid:48)) − L(θ)(cid:1).

(cid:15)-sharpness can be related to the spectral norm of the Hes-
sian. Indeed, a second-order Taylor expansion of L around
a critical point minimum is written

L(θ(cid:48)) = L(θ) +

(θ(cid:48) − θ) (∇2L)(θ)(θ(cid:48) − θ)T

1
2
+ o((cid:107)θ(cid:48) − θ(cid:107)2

2).

In this second order approximation, the (cid:15)-sharpness at θ

1In this paper, we will often assume that is the case when
dealing with Hessian-based measures in order to have them well-
deﬁned.

Sharp Minima Can Generalize For Deep Nets

would be

(cid:12)(∇2L)(θ)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)2(cid:15)2
(cid:12)
(cid:12)
(cid:12)
(cid:12)
2(cid:0)1 + L(θ)(cid:1)

.

3 Properties of Deep Rectiﬁed

Networks

Before moving forward to our results, in this section we ﬁrst
introduce the notation used in the rest of paper. Most of our
results, for clarity, will be on the deep rectiﬁed feedforward
networks with a linear output layer that we describe below,
though they can easily be extended to other architectures
(e.g. convolutional, etc.).

Deﬁnition 3. Given K weight matrices (θk)k≤K with nk =
dim(cid:0)vec(θk)(cid:1) and n = (cid:80)K
k=1 nk, the output y of a deep
rectiﬁed feedforward networks with a linear output layer is:

y = φrect

φrect

(cid:0) · · · φrect(x · θ1) · · · (cid:1) · θK−1

· θK,

(cid:17)

(cid:16)

where

• x is the input to the model, a high-dimensional vector

• φrect is the rectiﬁed elementwise activation func-
tion (Jarrett et al., 2009; Nair & Hinton, 2010;
Glorot et al., 2011), which is the positive part
(zi)i

(cid:55)→ (max(zi, 0))i.

• vec reshapes a matrix into a vector.

Note that in our deﬁnition we excluded the bias terms, usu-
ally found in any neural architecture. This is done mainly
for convenience, to simplify the rendition of our arguments.
However, the arguments can be extended to the case that
includes biases (see Appendix) . Another choice is that of
the linear output layer. Having an output activation func-
tion does not affect our argument either: since the loss is a
function of the output activation, it can be rephrased as a
function of linear pre-activation.

Deep rectiﬁer models have certain properties that allows
us in section 4 to arbitrary manipulate the ﬂatness of a
minimum.

An important topic for optimization of neural networks is
understanding the non-Euclidean geometry of the param-
eter space as imposed by the neural architecture (see, for
example Amari, 1998). In principle, when we take a step
in parameter space what we expect to control is the change
in the behavior of the model (i.e. the mapping of the input
x to the output y). In principle we are not interested in
the parameters per se, but rather only in the mapping they
represent.

Figure 2: An illustration of the effects of non-negative ho-
mogeneity. The graph depicts level curves of the behavior
of the loss L embedded into the two dimensional param-
eter space with the axis given by θ1 and θ2. Speciﬁcally,
each line of a given color corresponds to the parameter as-
signments (θ1, θ2) that result observationally in the same
prediction function fθ. Best seen with colors.

If one deﬁnes a measure for the change in the behavior of
the model, which can be done under some assumptions,
then, it can be used to deﬁne, at any point in the parameter
space, a metric that says what is the equivalent change in
the parameters for a unit of change in the behavior of the
model. As it turns out, for neural networks, this metric is
not constant over Θ. Intuitively, the metric is related to
the curvature, and since neural networks can be highly non-
linear, the curvature will not be constant. See Amari (1998);
Pascanu & Bengio (2014) for more details. Coming back
to the concept of ﬂatness or sharpness of a minimum, this
metric should deﬁne the ﬂatness.

However, the geometry of the parameter space is more com-
plicated. Regardless of the measure chosen to compare two
instantiations of a neural network, because of the structure
of the model, it also exhibits a large number of symmet-
ric conﬁgurations that result in exactly the same behavior.
Because the rectiﬁer activation has the non-negative homo-
geneity property, as we will see shortly, one can construct a
continuum of points that lead to the same behavior, hence
the metric is singular. Which means that one can exploit
these directions in which the model stays unchanged to
shape the neighbourhood around a minimum in such a way
that, by most deﬁnitions of ﬂatness, this property can be
controlled. See Figure 2 for a visual depiction, where the
ﬂatness (given here as the distance between the different
level curves) can be changed by moving along the curve.

Sharp Minima Can Generalize For Deep Nets

Let us redeﬁne, for convenience, the non-negative homo-
geneity property (Neyshabur et al., 2015; Lafond et al., 2016)
below. Note that beside this property, the reason for study-
ing the rectiﬁed linear activation is for its widespread adop-
tion (Krizhevsky et al., 2012; Simonyan & Zisserman, 2015;
Szegedy et al., 2015; He et al., 2016).

Deﬁnition 4. A given a function φ is non-negative homoge-
neous if

∀(z, α) ∈ R × R+, φ(αz) = αφ(z)

4 Deep Rectiﬁed networks and ﬂat

minima

In this section we exploit
the resulting strong non-
identiﬁability to showcase a few shortcomings of some
deﬁnitions of ﬂatness. Although α-scale transformation
does not affect the function represented, it allows us to sig-
niﬁcantly decrease several measures of ﬂatness. For another
deﬁnition of ﬂatness, α-scale transformation show that all
minima are equally ﬂat.

.

4.1 Volume (cid:15)-ﬂatness

Theorem 1. The rectiﬁed function φrect(x) = max(x, 0)
is non-negative homogeneous.

Theorem 2. For a one-hidden layer rectiﬁed neural network
of the form

Proof. Follows trivially from the constraint that α > 0,
given that x > 0 ⇒ αx > 0, iff α > 0.

and a minimum θ = (θ1, θ2), such that θ1 (cid:54)= 0 and θ2 (cid:54)= 0,
∀(cid:15) > 0 C(L, θ, (cid:15)) has an inﬁnite volume.

y = φrect(x · θ1) · θ2,

For a deep rectiﬁed neural network it means that:

φrect

(cid:0)x · (αθ1)(cid:1) · θ2 = φrect(x · θ1) · (αθ2),

meaning that for this one (hidden) layer neural network,
the parameters (αθ1, θ2) is observationally equivalent to
(θ1, αθ2). This observational equivalence similarly holds
for convolutional layers.

Given this non-negative homogeneity, if (θ1, θ2) (cid:54)= (0, 0)
then (cid:8)(αθ1, α−1θ2), α > 0(cid:9) is an inﬁnite set of obser-
vationally equivalent parameters, inducing a strong non-
identiﬁability in this learning scenario. Other models like
deep linear networks (Saxe et al., 2013), leaky rectiﬁers (He
et al., 2015) or maxout networks (Goodfellow et al., 2013)
also have this non-negative homogeneity property.

In what follows we will rely on such transformations, in
particular we will rely on the following deﬁnition:

Deﬁnition 5. For a single hidden layer rectiﬁer feedforward
network we deﬁne the family of transformations

Tα : (θ1, θ2) (cid:55)→ (αθ1, α−1θ2)

which we refer to as a α-scale transformation.

Note that a α-scale transformation will not affect the gener-
alization, as the behavior of the function is identical. Also
while the transformation is only deﬁned for a single layer
rectiﬁed feedforward network, it can trivially be extended
to any architecture having a single rectiﬁed network as a
submodule, e.g. a deep rectiﬁed feedforward network. For
simplicity and readability we will rely on this deﬁnition.

We will not consider the solution θ where any of the weight
matrices θ1, θ2 is zero, θ1 = 0 or θ2 = 0, as it results
in a constant function which we will assume to give poor
training performance. For α > 0, the α-scale transformation
Tα : (θ1, θ2) (cid:55)→ (αθ1, α−1θ2) has Jacobian determinant
αn1−n2, where once again n1 = dim(cid:0)vec(θ1)(cid:1) and n2 =
dim(cid:0)vec(θ2)(cid:1). Note that the Jacobian determinant of this
linear transformation is the change in the volume induced
by Tα and Tα ◦ Tβ = Tαβ. We show below that there is
a connected region containing θ with inﬁnite volume and
where the error remains approximately constant.

Proof. We will ﬁrst introduce a small region with approxi-
mately constant error around θ with non-zero volume. Given
(cid:15) > 0 and if we consider the loss function continuous with
respect to the parameter, C(L, θ, (cid:15)) is an open set containing
θ. Since we also have θ1 (cid:54)= 0 and θ2 (cid:54)= 0, let r > 0 such
that the L∞ ball B∞(r, θ) is in C(L, θ, (cid:15)) and has empty
1 = 0}. Let v = (2r)n1+n2 > 0 the
intersection with {θ(cid:48), θ(cid:48)
volume of B∞(r, θ).

Since the Jacobian determinant of Tα is the multiplicative
(cid:0)B∞(r, θ)(cid:1) is
change of induced by Tα, the volume of Tα
vαn1−n2 . If n1 (cid:54)= n2, we can arbitrarily grow the volume
(cid:0)B∞(r, θ)(cid:1), with error within an (cid:15)-interval of L(θ),
of Tα
by having α tends to +∞ if n1 > n2 or to 0 otherwise.
(cid:16)

If n1 = n2, ∀α(cid:48) > 0, Tα(cid:48)
C (cid:48) = (cid:83)
. C (cid:48) is a connected region
where the error remains approximately constant, i.e. within
an (cid:15)-interval of L(θ).

B∞(r, θ)
(cid:17)

has volume v. Let

α(cid:48)>0 Tα(cid:48)

B∞(r, θ)

(cid:16)

(cid:17)

Let α = 2 (cid:107)θ1(cid:107)∞+r

(cid:107)θ1(cid:107)∞−r . Since

B∞(r, θ) = B∞(r, θ1) × B∞(r, θ2),

Sharp Minima Can Generalize For Deep Nets

curvature (e.g. Desjardins et al., 2015; Salimans & Kingma,
2016). In this section we look at two widely used measures
of the Hessian, the spectral radius and trace, showing that
either of these values can be manipulated without actually
changing the behavior of the function. If the ﬂatness of a
minimum is deﬁned by any of these quantities, then it could
also be easily manipulated.

Theorem 3. The gradient and Hessian of the loss L with
respect to θ can be modiﬁed by Tα.

Proof.

L(θ1, θ2) = L(αθ1, α−1θ2),

we have then by differentiation

(∇L)(θ1, θ2) = (∇L)(αθ1, α−1θ2)

⇔ (∇L)(αθ1, α−1θ2) = (∇L)(θ1, θ2)

(cid:20) αIn1
0
(cid:20) α−1In1
0

0
α−1In2
0
αIn2

(cid:21)

(cid:21)

and

(∇2L)(αθ1, α−1θ2)
(cid:20) α−1In1
0
αIn2
0

=

(cid:21)

(∇2L)(θ1, θ2)

(cid:20) α−1In1
0

(cid:21)

.

0
αIn2

Sharpest direction Through these transformations we
can easily ﬁnd, for any critical point which is a minimum
with non-zero Hessian, an observationally equivalent param-
eter whose Hessian has an arbitrarily large spectral norm.

Theorem 4. For a one-hidden layer rectiﬁed neural network
of the form

y = φrect(x · θ1) · θ2,

and critical point θ = (θ1, θ2) being a minimum
for L, such that (∇2L)(θ)
(cid:54)= 0, ∀M > 0, ∃α >
(cid:12)
(cid:12)
(cid:12)2 ≥ M where (cid:12)
0, (cid:12)
(cid:12)
(cid:12)
(cid:12)(∇2L)(cid:0)Tα(θ)(cid:1)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)(∇2L)(cid:0)Tα(θ)(cid:1)(cid:12)
(cid:12)2 is
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
the spectral norm of (∇2L)(cid:0)Tα(θ)(cid:1).

Proof. The trace of a symmetric matrix is the sum of its
eigenvalues and a real symmetric matrix can be diagonalized
in R, therefore if the Hessian is non-zero, there is one non-
zero positive diagonal element. Without loss of generality,
we will assume that this non-zero element of value γ > 0
corresponds to an element in θ1. Therefore the Frobenius
(cid:12)
(cid:12)
norm (cid:12)
(cid:12)
(cid:12)
(cid:12)(∇2L)(cid:0)Tα(θ)(cid:1)(cid:12)
(cid:12)F of
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(∇2L)(αθ1, α−1θ2)
(cid:20) α−1In1
0
αIn2
0

=

(cid:21)

(∇2L)(θ1, θ2)

(cid:20) α−1In1
0

(cid:21)

.

0
αIn2

Figure 3: An illustration of how we build different dis-
joint volumes using Tα.
In this two-dimensional exam-
(cid:0)B∞(r(cid:48), θ)(cid:1) and B∞(r(cid:48), θ) have the same volume.
ple, Tα
(cid:0)B∞(r(cid:48), θ)(cid:1), . . . will there-
B∞(r(cid:48), θ), Tα
α
fore be a sequence of disjoint constant volumes. C (cid:48) will
therefore have an inﬁnite volume. Best seen with colors.

(cid:0)B∞(r(cid:48), θ)(cid:1), T 2

where × is the Cartesian set product, we have

(cid:0)B∞(r, θ)(cid:1) = B∞(αr, αθ1) × B∞(α−1r, α−1θ2).

Tα

Therefore, Tα

(cid:0)B∞(r, θ)(cid:1) ∩ B∞(r, θ) = ∅ (see Figure 3).
(cid:0)B∞(r, θ)(cid:1), . . .
(cid:0)B∞(r, θ)(cid:1), T 2
Similarly, B∞(r, θ), Tα
are disjoint and have volume v. We have also
(cid:0)B∞(r(cid:48), θ)(cid:1) ∈ C (cid:48). The vol-
T k
α
ume of C (cid:48) is then lower bounded by 0 < v + v + v + · · ·
and is therefore inﬁnite. C(L, θ, (cid:15)) has then inﬁnite volume
too, making the volume (cid:15)-ﬂatness of θ inﬁnite.

(cid:0)B∞(r(cid:48), θ)(cid:1) = Tαk

α

This theorem can generalize to rectiﬁed neural networks in
general with a similar proof. Given that every minimum
has an inﬁnitely large region (volume-wise) in which the
error remains approximately constant, that means that every
minimum would be inﬁnitely ﬂat according to the volume
(cid:15)-ﬂatness. Since all minima are equally ﬂat, it is not possible
to use volume (cid:15)-ﬂatness to gauge the generalization property
of a minimum.

4.2 Hessian-based measures

The non-Euclidean geometry of the parameter space, cou-
pled with the manifolds of observationally equal behavior of
the model, allows one to move from one region of the param-
eter space to another, changing the curvature of the model
without actually changing the function. This approach has
been used with success to improve optimization, by moving
from a region of high curvature to a region of well behaved

Sharp Minima Can Generalize For Deep Nets

is lower bounded by α−2γ.

Since all norms are equivalent in ﬁnite dimension, there
exists a constant r > 0 such that r|||A|||F ≤ |||A|||2 for all
symmetric matrices A. So by picking α < (cid:112) rγ
M , we are
(cid:12)
(cid:12)
(cid:12)(∇2L)(cid:0)Tα(θ)(cid:1)(cid:12)
(cid:12)
(cid:12)
guaranteed that (cid:12)
(cid:12)2 ≥ M .
(cid:12)
(cid:12)
(cid:12)
(cid:12)

Any minimum with non-zero Hessian will be observation-
ally equivalent to a minimum whose Hessian has an arbi-
trarily large spectral norm. Therefore for any minimum
in the loss function, if there exists another minimum that
generalizes better then there exists another minimum that
generalizes better and is also sharper according the spectral
norm of the Hessian. The spectral norm of critical points’
Hessian becomes as a result less relevant as a measure of
potential generalization error. Moreover, since the spectral
norm lower bounds the trace for a positive semi-deﬁnite
symmetric matrix, the same conclusion can be drawn for
the trace.

Further properties of the Hessian are analyzed in Appendix.

4.3 (cid:15)-sharpness

Figure 4: An illustration of how we exploit non-
identiﬁability and its particular geometry to obtain sharper
minima: although θ is far from the θ2 = 0 line, the observa-
tionally equivalent parameter θ(cid:48) is closer. The green and red
circle centered on each of these points have the same radius.
Best seen with colors.

We have redeﬁned for (cid:15) > 0 the (cid:15)-sharpness of Keskar et al.
(2017) as follow

maxθ(cid:48)∈B2((cid:15),θ)

(cid:0)L(θ(cid:48)) − L(θ)(cid:1)

1 + L(θ)

where B2((cid:15), θ) is the Euclidean ball of radius (cid:15) centered
on θ. This modiﬁcation will demonstrate more clearly the
issues of that metric as a measure of probable generaliza-
tion. If we use K = 2 and (θ1, θ2) corresponding to a
non-constant function, i.e. θ1 (cid:54)= 0 and θ2 (cid:54)= 0, then we can
deﬁne α = (cid:15)
. We will now consider the observation-
ally equivalent parameter Tα(θ1, θ2) = ((cid:15) θ1
, α−1θ2).
(cid:107)θ1(cid:107)2
Given that (cid:107)θ1(cid:107)2 ≤ (cid:107)θ(cid:107)2, we have that (0, α−1θ2) ∈
(cid:0)(cid:15), Tα(θ)(cid:1), making the maximum loss in this neighbor-
B2
hood at least as high as the best constant-valued function,

(cid:107)θ1(cid:107)2

incurring relatively high sharpness. Figure 4 provides a
visualization of the proof.

For rectiﬁed neural network every minimum is observation-
ally equivalent to a minimum that generalizes as well but
with high (cid:15)-sharpness. This also applies when using the
full-space (cid:15)-sharpness used by Keskar et al. (2017). We
can prove this similarly using the equivalence of norms
in ﬁnite dimensional vector spaces and the fact that for
c > 0, (cid:15) > 0, (cid:15) ≤ (cid:15)(c + 1) (see Keskar et al. (2017)). We
have not been able to show a similar problem with random
subspace (cid:15)-sharpness used by Keskar et al. (2017), i.e.
a restriction of the maximization to a random subspace,
which could relate to the notion of wide valleys described
by Chaudhari et al. (2017).

By exploiting the non-Euclidean geometry and non-
identiﬁability of rectiﬁed neural networks, we were able to
demonstrate some of the limits of using typical deﬁnitions of
minimum’s ﬂatness as core explanation for generalization.

5 Allowing reparametrizations

In the previous section 4 we explored the case of a ﬁxed
parametrization, that of deep rectiﬁer models. In this section
we demonstrate a simple observation. If we are allowed to
change the parametrization of some function f , we can
obtain arbitrarily different geometries without affecting how
the function evaluates on unseen data. The same holds for
reparametrization of the input space. The implication is that
the correlation between the geometry of the parameter space
(and hence the error surface) and the behavior of a given
function is meaningless if not preconditioned on the speciﬁc
parametrization of the model.

5.1 Model reparametrization

One thing that needs to be considered when relating ﬂatness
of minima to their probable generalization is that the choice
of parametrization and its associated geometry are arbitrary.
Since we are interested in ﬁnding a prediction function in a
given family of functions, no reparametrization of this fam-
ily should inﬂuence generalization of any of these functions.
Given a bijection g onto θ, we can deﬁne new transformed
parameter η = g−1(θ). Since θ and η represent in different
space the same prediction function, they should generalize
as well.

Let’s call Lη = L ◦ g the loss function with respect to the
new parameter η. We generalize the derivation of Subsec-

Sharp Minima Can Generalize For Deep Nets

critical point becomes

(∇2Lη)(η) = (∇g)(η)T (∇2L)(cid:0)g(η)(cid:1)(∇g)(η).

This means that by reparametrizing the problem we can
modify to a large extent the geometry of the loss function so
as to have sharp minima of L in θ correspond to ﬂat minima
of Lη in η = g−1(θ) and conversely. Figure 5 illustrates that
point in one dimension. Several practical (Dinh et al., 2014;
Rezende & Mohamed, 2015; Kingma et al., 2016; Dinh
et al., 2016) and theoretical works (Hyv¨arinen & Pajunen,
1999) show how powerful bijections can be. We can also
note that the formula for the transformed Hessian at a critical
point also applies if g is not invertible, g would just need
to be surjective over Θ in order to cover exactly the same
family of prediction functions

{fθ, θ ∈ Θ} = {fg(η), η ∈ g−1(Θ)}.

We show in Appendix, bijections that allow us to perturb
the relative ﬂatness between a ﬁnite number of minima.

Instances of commonly used reparametrization are batch
normalization (Ioffe & Szegedy, 2015), or the virtual batch
normalization variant (Salimans et al., 2016), and weight
normalization (Badrinarayanan et al., 2015; Salimans &
Kingma, 2016; Arpit et al., 2016). Im et al. (2016) have
plotted how the loss function landscape was affected by
batch normalization. However, we will focus on weight nor-
malization reparametrization as the analysis will be simpler,
but the intuition with batch normalization will be similar.
Weight normalization reparametrizes a nonzero weight w
as w = s v
with the new parameter being the scale s and
(cid:107)v(cid:107)2
the unnormalized weight v (cid:54)= 0.

Since we can observe that w is invariant to scaling of v,
reasoning similar to Section 3 can be applied with the sim-
pler transformations T (cid:48)
α : v (cid:55)→ αv for α (cid:54)= 0. Moreover,
since this transformation is a simpler isotropic scaling, the
conclusion that we can draw can be actually more powerful
with respect to v:

• every minimum has inﬁnite volume (cid:15)-sharpness;

• every minimum is observationally equivalent to an
inﬁnitely sharp minimum and to an inﬁnitely ﬂat min-
imum when considering nonzero eigenvalues of the
Hessian;

• every minimum is observationally equivalent to a mini-
mum with arbitrarily low full-space and random sub-
space (cid:15)-sharpness and a minimum with high full-space
(cid:15)-sharpness.

This further weakens the link between the ﬂatness of a
minimum and the generalization property of the associated
prediction function when a speciﬁc parameter space has not
been speciﬁed and explained beforehand.

(a) Loss function with default parametrization

(b) Loss function with reparametrization

(c) Loss function with another reparametrization

Figure 5: A one-dimensional example on how much the
geometry of the loss function depends on the parameter
space chosen. The x-axis is the parameter value and the
y-axis is the loss. The points correspond to a regular grid in
the default parametrization. In the default parametrization,
all minima have roughly the same curvature but with a
careful choice of reparametrization, it is possible to turn
a minimum signiﬁcantly ﬂatter or sharper than the others.
Reparametrizations in this ﬁgure are of the form η = (|θ −
ˆθ|2 + b)a(θ − ˆθ) where b ≥ 0, a > − 1
2 and ˆθ is shown with
the red vertical line.

tion 4.2:

Lη(η) = L(cid:0)g(η)(cid:1)

⇒ (∇Lη)(η) = (∇L)(cid:0)g(η)(cid:1)(∇g)(η)
⇒ (∇2Lη)(η) = (∇g)(η)T (∇2L)(cid:0)g(η)(cid:1)(∇g)(η)

+ (∇L)(cid:0)g(η)(cid:1)(∇2g)(η).

At a differentiable critical point, we have by deﬁnition
(∇L)(cid:0)g(η)(cid:1) = 0, therefore the transformed Hessian at a

5.2

Input representation

particular parametrization of the model or input space.

Sharp Minima Can Generalize For Deep Nets

As we conclude that the notion of ﬂatness for a minimum in
the loss function by itself is not sufﬁcient to determine its
generalization ability in the general case, we can choose to
focus instead on properties of the prediction function instead.
Motivated by some work in adversarial examples (Szegedy
et al., 2014; Goodfellow et al., 2015) for deep neural net-
works, one could decide on its generalization property by
analyzing the gradient of the prediction function on exam-
ples. Intuitively, if the gradient is small on typical points
from the distribution or has a small Lipschitz constant, then
a small change in the input should not incur a large change
in the prediction.

But this inﬁnitesimal reasoning is once again very dependent
of the local geometry of the input space. For an invertible
preprocessing ξ−1, e.g. feature standardization, whitening
or gaussianization (Chen & Gopinath, 2001), we will call
fξ = f ◦ ξ the prediction function on the preprocessed input
u = ξ−1(x). We can reproduce the derivation in Section 5
to obtain

∂fξ
∂uT

(cid:0)ξ(u)(cid:1) =

∂f
∂xT

(cid:0)ξ(u)(cid:1) ∂ξ

∂uT (u).

As we can alter signiﬁcantly the relative magnitude of the
gradient at each point, analyzing the amplitude of the gradi-
ent of the prediction function might prove problematic if the
choice of the input space have not been explained before-
hand. This remark applies in applications involving images,
sound or other signals with invariances (Larsen et al., 2015).
For example, Theis et al. (2016) show for images how a
small drift of one to four pixels can incur a large difference
in terms of L2 norm.

6 Discussion

It has been observed empirically that minima found by stan-
dard deep learning algorithms that generalize well tend
to be ﬂatter than found minima that did not generalize
well (Chaudhari et al., 2017; Keskar et al., 2017). How-
ever, when following several deﬁnitions of ﬂatness, we have
shown that the conclusion that ﬂat minima should generalize
better than sharp ones cannot be applied as is without fur-
ther context. Previously used deﬁnitions fail to account for
the complex geometry of some commonly used deep archi-
tectures. In particular, the non-identiﬁability of the model
induced by symmetries, allows one to alter the ﬂatness of a
minimum without affecting the function it represents. Addi-
tionally the whole geometry of the error surface with respect
to the parameters can be changed arbitrarily under different
parametrizations. In the spirit of (Swirszcz et al., 2016), our
work indicates that more care is needed to deﬁne ﬂatness
to avoid degeneracies of the geometry of the model under
study. Also such a concept can not be divorced from the

Acknowledgements

The authors would like to thank Grzegorz ´Swirszcz for an
insightful discussion on the paper, Harm De Vries, Yann
Dauphin, Jascha Sohl-Dickstein and C´esar Laurent for use-
ful discussions about optimization, Danilo Rezende for ex-
plaining universal approximation using normalizing ﬂows
and Kyle Kastner, Adriana Romero, Junyoung Chung, Nico-
las Ballas, Aaron Courville, George Dahl, Yaroslav Ganin,
Prajit Ramachandran, C¸ a˘glar G¨ulc¸ehre, Ahmed Touati and
the ICML reviewers for useful feedback.

References

Amari, Shun-Ichi. Natural gradient works efﬁciently in learning.

Neural Comput., 10(2), 1998.

Arpit, Devansh, Zhou, Yingbo, Kota, Bhargava U, and Govin-
daraju, Venu. Normalization propagation: A parametric tech-
nique for removing internal covariate shift in deep networks.
arXiv preprint arXiv:1603.01431, 2016.

Bach, Francis R. and Blei, David M. (eds.). Proceedings of the
32nd International Conference on Machine Learning, ICML
2015, Lille, France, 6-11 July 2015, volume 37 of JMLR Work-
shop and Conference Proceedings, 2015. JMLR.org. URL
http://jmlr.org/proceedings/papers/v37/.

Badrinarayanan, Vijay, Mishra, Bamdev, and Cipolla, Roberto.
Understanding symmetries in deep networks. arXiv preprint
arXiv:1511.01029, 2015.

Bahdanau, Dzmitry, Cho, Kyunghyun, and Bengio, Yoshua. Neural
machine translation by jointly learning to align and translate. In
ICLR’2015, arXiv:1409.0473, 2015.

Bottou, L´eon. Large-scale machine learning with stochastic gradi-
ent descent. In Proceedings of COMPSTAT’2010, pp. 177–186.
Springer, 2010.

Bottou, L´eon and Bousquet, Olivier. The tradeoffs of large
scale learning.
In Platt, J.C., Koller, D., Singer, Y., and
Roweis, S. (eds.), Advances in Neural Information Process-
ing Systems, volume 20, pp. 161–168. NIPS Foundation
(http://books.nips.cc), 2008. URL http://leon.bottou.
org/papers/bottou-bousquet-2008.

Bottou, L´eon and LeCun, Yann. On-line learning for very large
datasets. Applied Stochastic Models in Business and Industry,
21(2):137–151, 2005. URL http://leon.bottou.org/
papers/bottou-lecun-2004a.

Bottou, L´eon, Curtis, Frank E, and Nocedal, Jorge. Optimiza-
tion methods for large-scale machine learning. arXiv preprint
arXiv:1606.04838, 2016.

Bousquet, Olivier and Elisseeff, Andr´e. Stability and generaliza-
tion. Journal of Machine Learning Research, 2(Mar):499–526,
2002.

Sharp Minima Can Generalize For Deep Nets

Chan, William, Jaitly, Navdeep, Le, Quoc V., and Vinyals, Oriol.
Listen, attend and spell: A neural network for large vocab-
In 2016 IEEE In-
ulary conversational speech recognition.
ternational Conference on Acoustics, Speech and Signal Pro-
cessing, ICASSP 2016, Shanghai, China, March 20-25, 2016,
pp. 4960–4964. IEEE, 2016. ISBN 978-1-4799-9988-0. doi:
10.1109/ICASSP.2016.7472621. URL http://dx.doi.
org/10.1109/ICASSP.2016.7472621.

Chaudhari, Pratik, Choromanska, Anna, Soatto, Stefano, Le-
Cun, Yann, Baldassi, Carlo, Borgs, Christian, Chayes, Jen-
nifer, Sagun, Levent, and Zecchina, Riccardo. Entropy-sgd:
In ICLR’2017,
Biasing gradient descent into wide valleys.
arXiv:1611.01838, 2017.

Chen, Scott Saobing and Gopinath, Ramesh A. Gaussianization. In
Leen, T. K., Dietterich, T. G., and Tresp, V. (eds.), Advances in
Neural Information Processing Systems 13, pp. 423–429. MIT
Press, 2001. URL http://papers.nips.cc/paper/
1856-gaussianization.pdf.

Cho, Kyunghyun, van Merrienboer, Bart, G¨ulc¸ehre, C¸ aglar, Bah-
danau, Dzmitry, Bougares, Fethi, Schwenk, Holger, and Ben-
gio, Yoshua. Learning phrase representations using RNN
encoder-decoder for statistical machine translation. In Mos-
chitti, Alessandro, Pang, Bo, and Daelemans, Walter (eds.),
Proceedings of the 2014 Conference on Empirical Methods in
Natural Language Processing, EMNLP 2014, October 25-29,
2014, Doha, Qatar, A meeting of SIGDAT, a Special Interest
Group of the ACL, pp. 1724–1734. ACL, 2014. ISBN 978-1-
937284-96-1. URL http://aclweb.org/anthology/
D/D14/D14-1179.pdf.

Choromanska, Anna, Henaff, Mikael, Mathieu, Micha¨el, Arous,
G´erard Ben, and LeCun, Yann. The loss surfaces of multilayer
networks. In AISTATS, 2015.

Chorowski, Jan K, Bahdanau, Dzmitry, Serdyuk, Dmitriy, Cho,
Kyunghyun, and Bengio, Yoshua. Attention-based models for
speech recognition. In Advances in Neural Information Process-
ing Systems, pp. 577–585, 2015.

Collobert, Ronan, Puhrsch, Christian, and Synnaeve, Gabriel.
Wav2letter: an end-to-end convnet-based speech recognition
system. arXiv preprint arXiv:1609.03193, 2016.

Gehring, Jonas, Auli, Michael, Grangier, David, and Dauphin,
Yann N. A convolutional encoder model for neural machine
translation. arXiv preprint arXiv:1611.02344, 2016.

Glorot, Xavier, Bordes, Antoine, and Bengio, Yoshua. Deep sparse
rectiﬁer neural networks. In Aistats, volume 15, pp. 275, 2011.

Gonen, Alon and Shalev-Shwartz, Shai. Fast rates for empirical
risk minimization of strict saddle problems. arXiv preprint
arXiv:1701.04271, 2017.

Goodfellow, Ian J, Warde-Farley, David, Mirza, Mehdi, Courville,
Aaron C, and Bengio, Yoshua. Maxout networks. ICML (3), 28:
1319–1327, 2013.

Goodfellow, Ian J, Shlens, Jonathon, and Szegedy, Christian. Ex-
plaining and harnessing adversarial examples. In ICLR’2015
arXiv:1412.6572, 2015.

Graves, Alex, Mohamed, Abdel-rahman, and Hinton, Geoffrey.
Speech recognition with deep recurrent neural networks. In
Acoustics, speech and signal processing (icassp), 2013 ieee
international conference on, pp. 6645–6649. IEEE, 2013.

Hannun, Awni Y., Case, Carl, Casper, Jared, Catanzaro, Bryan,
Diamos, Greg, Elsen, Erich, Prenger, Ryan, Satheesh, San-
jeev, Sengupta, Shubho, Coates, Adam, and Ng, Andrew Y.
Deep speech: Scaling up end-to-end speech recognition. CoRR,
abs/1412.5567, 2014. URL http://arxiv.org/abs/
1412.5567.

Hardt, Moritz, Recht, Ben, and Singer, Yoram. Train faster, gener-
alize better: Stability of stochastic gradient descent. In Balcan,
Maria-Florina and Weinberger, Kilian Q. (eds.), Proceedings
of the 33nd International Conference on Machine Learning,
ICML 2016, New York City, NY, USA, June 19-24, 2016, vol-
ume 48 of JMLR Workshop and Conference Proceedings, pp.
1225–1234. JMLR.org, 2016. URL http://jmlr.org/
proceedings/papers/v48/hardt16.html.

He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian.
Delving deep into rectiﬁers: Surpassing human-level perfor-
mance on imagenet classiﬁcation. In Proceedings of the IEEE
international conference on computer vision, pp. 1026–1034,
2015.

Dauphin, Yann N., Pascanu, Razvan, G¨ulc¸ehre, C¸ aglar, Cho,
KyungHyun, Ganguli, Surya, and Bengio, Yoshua. Identifying
and attacking the saddle point problem in high-dimensional
non-convex optimization. NIPS, 2014.

He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian.
Deep residual learning for image recognition. In Proceedings
of the IEEE Conference on Computer Vision and Pattern Recog-
nition, pp. 770–778, 2016.

Desjardins, Guillaume, Simonyan, Karen, Pascanu, Razvan, and
Kavukcuoglu, Koray. Natural neural networks. NIPS, 2015.

Dinh, Laurent, Krueger, David, and Bengio, Yoshua. Nice: Non-
linear independent components estimation. arXiv preprint
arXiv:1410.8516, 2014.

Dinh, Laurent, Sohl-Dickstein, Jascha, and Bengio, Samy. Density
estimation using real nvp. In ICLR’2017, arXiv:1605.08803,
2016.

Duchi, John, Hazan, Elad, and Singer, Yoram. Adaptive subgra-
dient methods for online learning and stochastic optimization.
Journal of Machine Learning Research, 12(Jul):2121–2159,
2011.

Hinton, Geoffrey E and Van Camp, Drew. Keeping the neural
networks simple by minimizing the description length of the
In Proceedings of the sixth annual conference on
weights.
Computational learning theory, pp. 5–13. ACM, 1993.

Hochreiter, Sepp and Schmidhuber, J¨urgen. Flat minima. Neural

Computation, 9(1):1–42, 1997.

Hyv¨arinen, Aapo and Pajunen, Petteri. Nonlinear independent
component analysis: Existence and uniqueness results. Neural
Networks, 12(3):429–439, 1999.

Im, Daniel Jiwoong, Tao, Michael, and Branson, Kristin. An
empirical analysis of deep network loss surfaces. arXiv preprint
arXiv:1612.04010, 2016.

Sharp Minima Can Generalize For Deep Nets

Ioffe, Sergey and Szegedy, Christian.

Batch normaliza-
tion: Accelerating deep network training by reducing in-
ternal covariate shift.
In Bach & Blei (2015), pp. 448–
456. URL http://jmlr.org/proceedings/papers/
v37/ioffe15.html.

Jarrett, Kevin, Kavukcuoglu, Koray, LeCun, Yann, et al. What
is the best multi-stage architecture for object recognition? In
Computer Vision, 2009 IEEE 12th International Conference on,
pp. 2146–2153. IEEE, 2009.

Keskar, Nitish Shirish, Mudigere, Dheevatsa, Nocedal, Jorge,
Smelyanskiy, Mikhail, and Tang, Ping Tak Peter. On large-
batch training for deep learning: Generalization gap and sharp
minima. In ICLR’2017, arXiv:1609.04836, 2017.

Kingma, Diederik P, Salimans, Tim, Jozefowicz, Rafal, Chen, Xi,
Sutskever, Ilya, and Welling, Max. Improved variational infer-
ence with inverse autoregressive ﬂow. In Lee, D. D., Sugiyama,
M., Luxburg, U. V., Guyon, I., and Garnett, R. (eds.), Advances
in Neural Information Processing Systems 29, pp. 4743–4751.
Curran Associates, Inc., 2016.

Krizhevsky, Alex, Sutskever, Ilya, and Hinton, Geoffrey E. Ima-
genet classiﬁcation with deep convolutional neural networks. In
Advances in neural information processing systems, pp. 1097–
1105, 2012.

Lafond, Jean, Vasilache, Nicolas, and Bottou, L´eon. About diago-
nal rescaling applied to neural nets. ICML Workshop on Opti-
mization Methods for the Next Generation of Machine Learning,
2016.

Larsen, Anders Boesen Lindbo, Sønderby, Søren Kaae, and
Winther, Ole. Autoencoding beyond pixels using a learned
similarity metric. CoRR, abs/1512.09300, 2015. URL http:
//arxiv.org/abs/1512.09300.

Montufar, Guido F, Pascanu, Razvan, Cho, Kyunghyun, and Ben-
gio, Yoshua. On the number of linear regions of deep neural
networks. In Advances in neural information processing sys-
tems, pp. 2924–2932, 2014.

Nair, Vinod and Hinton, Geoffrey E. Rectiﬁed linear units improve
In Proceedings of the 27th
restricted boltzmann machines.
international conference on machine learning (ICML-10), pp.
807–814, 2010.

Nesterov, Yurii and Vial, Jean-Philippe. Conﬁdence level solutions
for stochastic programming. Automatica, 44(6):1559–1568,
2008.

Sagun, Levent, G¨uney, V Ugur, Arous, Gerard Ben, and LeCun,
Yann. Explorations on high dimensional landscapes. arXiv
preprint arXiv:1412.6615, 2014.

Salimans, Tim and Kingma, Diederik P. Weight normalization: A
simple reparameterization to accelerate training of deep neu-
ral networks. In Advances in Neural Information Processing
Systems, pp. 901–901, 2016.

Salimans, Tim, Goodfellow, Ian, Zaremba, Wojciech, Cheung,
Vicki, Radford, Alec, and Chen, Xi. Improved techniques for
training gans. In Advances in Neural Information Processing
Systems, pp. 2226–2234, 2016.

Saxe, Andrew M., McClelland, James L., and Ganguli, Surya.
Exact solutions to the nonlinear dynamics of learning in deep
linear neural networks. CoRR, abs/1312.6120, 2013. URL
http://arxiv.org/abs/1312.6120.

Simonyan, Karen and Zisserman, Andrew. Very deep convolutional
In ICLR’2015,

networks for large-scale image recognition.
arXiv:1409.1556, 2015.

Sutskever, Ilya, Vinyals, Oriol, and Le, Quoc V. Sequence to
sequence learning with neural networks. In Advances in neural
information processing systems, pp. 3104–3112, 2014.

Swirszcz, Grzegorz, Czarnecki, Wojciech Marian, and Pascanu,
Razvan. Local minima in training of deep networks. CoRR,
abs/1611.06310, 2016.

Szegedy, Christian, Zaremba, Wojciech, Sutskever, Ilya, Bruna,
Joan, Erhan, Dumitru, Goodfellow, Ian, and Fergus, Rob.
In ICLR’2014,
Intriguing properties of neural networks.
arXiv:1312.6199, 2014.

Szegedy, Christian, Liu, Wei, Jia, Yangqing, Sermanet, Pierre,
Reed, Scott, Anguelov, Dragomir, Erhan, Dumitru, Vanhoucke,
Vincent, and Rabinovich, Andrew. Going deeper with convo-
lutions. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pp. 1–9, 2015.

Theis, Lucas, Oord, A¨aron van den, and Bethge, Matthias. A
note on the evaluation of generative models. In ICLR’2016
arXiv:1511.01844, 2016.

Wu, Yonghui, Schuster, Mike, Chen, Zhifeng, Le, Quoc V, Norouzi,
Mohammad, Macherey, Wolfgang, Krikun, Maxim, Cao, Yuan,
Gao, Qin, Macherey, Klaus, et al. Google’s neural machine
translation system: Bridging the gap between human and ma-
chine translation. arXiv preprint arXiv:1609.08144, 2016.

Neyshabur, Behnam, Salakhutdinov, Ruslan R, and Srebro, Nati.
Path-sgd: Path-normalized optimization in deep neural net-
works. In Advances in Neural Information Processing Systems,
pp. 2422–2430, 2015.

Zhang, Chiyuan, Bengio, Samy, Hardt, Moritz, Recht, Benjamin,
and Vinyals, Oriol. Understanding deep learning requires re-
In ICLR’2017, arXiv:1611.03530,
thinking generalization.
2017.

Pascanu, Razvan and Bengio, Yoshua. Revisiting natural gradient

for deep networks. ICLR, 2014.

Raghu, Maithra, Poole, Ben, Kleinberg, Jon, Ganguli, Surya, and
Sohl-Dickstein, Jascha. On the expressive power of deep neural
networks. arXiv preprint arXiv:1606.05336, 2016.

Rezende, Danilo Jimenez and Mohamed, Shakir. Variational in-
ference with normalizing ﬂows. In Bach & Blei (2015), pp.
1530–1538. URL http://jmlr.org/proceedings/
papers/v37/rezende15.html.

