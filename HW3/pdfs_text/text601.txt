Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Rakshit Trivedi 1 Hanjun Dai 1 Yichen Wang 1 Le Song 1

Abstract

The availability of large scale event data with time
stamps has given rise to dynamically evolving
knowledge graphs that contain temporal informa-
tion for each edge. Reasoning over time in such
dynamic knowledge graphs is not yet well under-
stood. To this end, we present Know-Evolve, a
novel deep evolutionary knowledge network that
learns non-linearly evolving entity representations
over time. The occurrence of a fact (edge) is mod-
eled as a multivariate point process whose inten-
sity function is modulated by the score for that
fact computed based on the learned entity embed-
dings. We demonstrate signiﬁcantly improved
performance over various relational learning ap-
proaches on two large scale real-world datasets.
Further, our method effectively predicts occur-
rence or recurrence time of a fact which is novel
compared to prior reasoning approaches in multi-
relational setting.

1. Introduction

Reasoning is a key concept in artiﬁcial intelligence. A host
of applications such as search engines, question-answering
systems, conversational dialogue systems, and social net-
works require reasoning over underlying structured knowl-
edge. Effective representation and learning over such knowl-
edge has come to the fore as a very important task. In par-
ticular, Knowledge Graphs have gained much attention as
an important model for studying complex multi-relational
settings. Traditionally, knowledge graphs are considered
to be static snapshot of multi-relational data. However,
recent availability of large amount of event based interac-
tion data that exhibits complex temporal dynamics in addi-
tion to its multi-relational nature has created the need for
approaches that can characterize and reason over tempo-

Figure 1. Sample temporal knowledge subgraph between persons,
organizations and countries.

rally evolving systems. For instance, GDELT (Leetaru &
Schrodt, 2013) and ICEWS (Boschee et al., 2017) are two
popular event based data repository that contains evolving
knowledge about entity interactions across the globe.

Thus traditional knowledge graphs need to be augmented
into Temporal Knowledge Graphs, where facts occur, re-
cur or evolve over time in these graphs, and each edge
in the graphs have temporal information associated with
it. Figure 1 shows a subgraph snapshot of such temporal
knowledge graph. Static knowledge graphs suffer from
incompleteness resulting in their limited reasoning ability.
Most work on static graphs have therefore focussed on ad-
vancing entity-relationship representation learning to infer
missing facts based on available knowledge. But these meth-
ods lack ability to use rich temporal dynamics available in
underlying data represented by temporal knowledge graphs.

Effectively capturing temporal dependencies across facts
in addition to the relational (structural) dependencies can
help improve the understanding on behavior of entities and
how they contribute to generation of facts over time. For
example, one can precisely answer questions like:

• Object prediction. (Who) will Donald Trump mention

1College of Computing, Georgia Institute of Technology. Corre-
spondence to: Rakshit Trivedi <rstrivedi@gatech.edu>, Le Song
<lsong@cc.gatech.edu>.

next?

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by
the author(s).

• Subject

prediction.

(Which

country) will

provide material support to US next month?

• Time prediction. (When) will Bob visit Burger King?

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

”People (entities) change over time and so do relationships.”
When two entities forge a relationship, the newly formed
edge drives their preferences and behavior. This change
is effected by combination of their own historical factors
(temporal evolution) and their compatibility with the his-
torical factors of the other entity (mutual evolution).

For instance, if two countries have tense relationships, they
are more likely to engage in conﬂicts. On the other hand,
two countries forging an alliance are most likely to take
confrontational stands against enemies of each other. Fi-
nally, time plays a vital role in this process. A country that
was once peaceful may not have same characteristics 10
years in future due to various facts (events) that may occur
during that period. Being able to capture this temporal and
evolutionary effects can help us reason better about future re-
lationship of an entity. We term this combined phenomenon
of evolving entities and their dynamically changing relation-
ships over time as “knowledge evolution”.

In this paper, we propose an elegant framework to model
knowledge evolution and reason over complex non-linear in-
teractions between entities in a multi-relational setting. The
key idea of our work is to model the occurrence of a fact as
multidimensional temporal point process whose conditional
intensity function is modulated by the relationship score
for that fact. The relationship score further depends on the
dynamically evolving entity embeddings. Speciﬁcally, our
work makes the following contributions:

• We propose a novel deep learning architecture that
evolves over time based on availability of new facts. The
dynamically evolving network will ingest the incoming
new facts, learn from them and update the embeddings of
involved entities based on their recent relationships and
temporal behavior.

• Besides predicting the occurrence of a fact, our architec-
ture has ability to predict time when the fact may poten-
tially occur which is not possible by any prior relational
learning approaches to the best of our knowledge.

• Our model supports Open World Assumption as missing
links are not considered to be false and may potentially
occur in future. It further supports prediction over unseen
entities due to its novel dynamic embedding process.
• The large-scale experiments on two real world datasets
show that our framework has consistently and signiﬁ-
cantly better performance for link prediction than state-
of-arts that do not account for temporal and evolving
non-linear dynamics.

• Our work aims to introduce the use of powerful math-
ematical tool of temporal point process framework for
temporal reasoning over dynamically evolving knowledge
graphs. It has potential to open a new research direction in
reasoning over time for various multi-relational settings
with underlying spatio-temporal dynamics.

2. Preliminaries

2.1. Temporal Point Process

A temporal point process (Cox & Lewis, 2006) is a ran-
dom process whose realization consists of a list of events
localized in time, {ti} with ti ∈ R+. Equivalently, a given
temporal point process can be represented as a counting
process, N (t), which records the number of events before
time t.

An important way to characterize temporal point processes
is via the conditional intensity function λ(t), a stochastic
model for the time of the next event given all the previous
events. Formally, λ(t)dt is the conditional probability of
observing an event in a small window [t, t + dt) given the
history T (t) := {tk|tk < t} up to t, i.e.,

λ(t)dt := P {event in [t, t + dt)|T (t)}

= E[dN (t)|T (t)]

(1)

where one typically assumes that only one event can happen
in a small window of size dt, i.e., dN (t) ∈ {0, 1}.

From the survival analysis theory (Aalen et al., 2008), given
the history T = {t1, . . . , tn}, for any t > tn, we character-
ize the conditional probability that no event happens during
[tn, t) as S(t|T ) = exp (cid:0) − (cid:82) t
λ(τ ) dτ (cid:1). Moreover, the
tn
conditional density that an event occurs at time t is deﬁned
as :

f (t) = λ(t) S(t)

(2)

The functional form of the intensity λ(t) is often designed
to capture the phenomena of interests. Some Common
forms include: Poisson Process, Hawkes processes (Hawkes,
1971), Self-Correcting Process (Isham & Westcott, 1979),
Power Law and Rayleigh Process.

Rayleigh Process is a non-monotonic process and is well-
adapted to modeling fads, where event likelihood drops
rapidly after rising to a peak. Its intensity function is λ(t) =
α · (t), where α > 0 is the weight parameter, and the log
survival function is log S(t|α) = −α · (t)2/2.

2.2. Temporal Knowledge Graph representation

We deﬁne a Temporal Knowledge Graph (TKG) as a multi-
relational directed graph with timestamped edges between
any pair of nodes. In a TKG, each edge between two nodes
represent an event in the real world and edge type (relation-
ship) represent the corresponding event type. Further an
edge may be available multiple times (recurrence). We do
not allow duplicate edges and self-loops in graph. Hence,
all recurrent edges will have different time points and every
edge will have distinct subject and object entities.

Given ne entities and nr relationships, we extend traditional
triplet representation for knowledge graphs to introduce
time dimension and represent each fact in TKG as a quadru-
plet (es, r, eo, t), where es, eo ∈ {1, . . . , ne}, es (cid:54)= eo,

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

r ∈ {1, . . . , nr}, t ∈ R+. It represents the creation of
relationship edge r between subject entity es, and object
entity eo at time t. The complete TKG can therefore be
represented as an ne × ne × nr × T - dimensional ten-
sor where T is the total number of available time points.
Consider a TKG comprising of N edges and denote the
globally ordered set of corresponding N observed events as
D = {(es, r, eo, t)n}N
n=1, where 0 ≤ t1 ≤ t2 . . . ≤ T .

3. Evolutionary Knowledge Network

We present our uniﬁed knowledge evolution framework
(Know-Evolve) for reasoning over temporal knowledge
graphs. The reasoning power of Know-Evolve stems from
the following three major components:

1. A powerful mathematical tool of temporal point pro-

cess that models occurrence of a fact.

2. A bilinear relationship score that captures multi-
relational interactions between entities and modulates
the intensity function of above point process.

3. A novel deep recurrent network that learns non-linearly
and mutually evolving latent representations of entities
based on their interactions with other entities in multi-
relational space over time.

3.1. Temporal Process

Large scale temporal knowledge graphs exhibit highly het-
erogeneous temporal patterns of events between entities.
Discrete epoch based methods to model such temporal be-
havior fail to capture the underlying intricate temporal de-
pendencies. We therefore model time as a random variable
and use temporal point process to model occurrence of fact.

(¯t)) ∗ (t − ¯t)

(t|¯t) = f (ges,eo

More concretely, given a set of observed events O corre-
sponding to a TKG, we construct a relationship-modulated
multidimensional point process to model occurrence of these
events. We characterize this point process with the following
conditional intensity function:
λes,eo
r

r
where t > ¯t, t is the time of the current event and ¯t =
max(tes
−) is the most recent time point when either
subject or object entity was involved in an event before time
t. Thus, λes,eo
(t|¯t) represents intensity of event involving
triplet (es, r, ej) at time t given previous time point ¯t when
either es or eo was involved in an event. This modulates the
intensity of current event based on most recent activity on
either entities’ timeline and allows to capture scenarios like
non-periodic events and previously unseen events. f (·) =
exp(·) ensures that intensity is positive and well deﬁned.

−, teo

(3)

r

ties in that speciﬁc relationship. Speciﬁcally, for an event
(es, r, eo, t) ∈ D occurring at time t, the score term ges,eo
is computed using a bilinear formulation as follows:

r

ges,eo
r

(t) = ves

(t−)T · Rr · veo

(t−)

(4)

, ves

where ves
∈ Rd represent latent feature embeddings of
entities appearing in subject and object position respectively.
Rr ∈ Rd×d represents relationship weight matrix which
attempts to capture interaction between two entities in the
speciﬁc relationship space r. This matrix is unique for each
relation in dataset and is learned during training. t is time of
current event and t− represent time point just before time
t. ves
(t−), therefore represent most recently
updated vector embeddings of subject and object entities
respectively before time t. As these entity embeddings
evolve and update over time, ges,eo
(t) is able to capture
cumulative knowledge learned about the entities over the
history of events that have affected their embeddings.

(t−) and veo

r

3.3. Dynamically Evolving Entity Representations

We represent latent feature embedding of an entity e at time
t with a low-dimensional vector ve(t). We add superscript
s and o as shown in Eq. (4) to indicate if the embedding
corresponds to entity in subject or object position respec-
tively. We also use relationship-speciﬁc low-dimensional
representation for each relation type.

The latent representations of entities change over time as
entities forge relationships with each other. We design novel
deep recurrent neural network based update functions to
capture mutually evolving and nonlinear dynamics of enti-
ties in their vector space representations. We consider an
event m = (es, r, eo, t)m ∈ D occurring at time t. Also,
consider that event m is entity es’s p-th event while it is
entity eo’s q-th event. As entities participate in events in a
heterogeneous pattern, it is less likely that p = q although
not impossible. Having observed this event, we update the
embeddings of two involved entities as follows:

Subject Embedding:

(tp) = σ(Ws

ves
(tp−) = σ(Wh · [ves

t(tp − tp−1) + Whh · hes
(tp−1) ⊕ veo

(tp−))
(tp−) ⊕ res

hes

Object Embedding:

veo

(tq) = σ(Wo

heo

(tq−) = σ(Wh · [veo

t (tq − tq−1) + Whh · heo
(tq−1) ⊕ ves

(tq−))
(tq−) ⊕ reo

q−1])

p−1])

(5)

(6)

3.2. Relational Score Function

The ﬁrst term in (3) modulates the intensity function by
the relational compatibility score between the involved enti-

, veo

where, ves
∈ Rd. tp = tq = tm is the time of observed
event. For subject embedding update in Eq. (5), tp−1 is the
time point of the previous event in which entity es was

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Figure 2. Realization of Evolutionary Knowledge Network Architecture over a timeline. Here t(cid:48)(cid:48), t(cid:48) and t may or may not be consecutive
time points. We focus on the event at time point t and show how previous events affected the embeddings of entities involved in this event.
From Eq. (5) and (6), tp−1 = t(cid:48) and tq−1 = t(cid:48)(cid:48) respectively. tes
prev, teo
prev represent previous time points in history before t(cid:48), t(cid:48)(cid:48). hother
stands for hidden layer for the entities (other than the ones in focus) involved in events at t(cid:48) and t(cid:48)(cid:48). res
prev = r1. All other
notations mean exactly as deﬁned in text. We only label nodes, edges and embeddings directly relevant to event at time t for clarity.

prev = r2 and reo

(a) Intensity Computation at time t

(c) Entity Embedding update after event observed at time t

Figure 3. One step visualization of Know-Evolve computations done in Figure 2 after observing an event at time t. (Best viewed in color)

involved. tp− is the timepoint just before time tp. Hence,
ves
(tp−1) represents latest embedding for entity es that was
updated after (p − 1)-th event for that entity. veo
(tp−)
represents latest embedding for entity eo that was updated
any time just before tp = tm. This accounts for the fact that
entity eo may have been involved in some other event during
the interval between current (p) and previous (p − 1) event
of entity es. res
p−1 ∈ Rc represent relationship embedding
that corresponds to relationship type of the (p − 1)-th event
of entity es. Note that the relationship vectors are static
and do not evolve over time. hes
(tp−) ∈ Rd is the hidden
layer. The semantics of notations apply similarly to object
embedding update in Eq. (6).

t, Wo

t, Wo

t ∈ Rd×1, Whh ∈ Rd×l and Wh ∈ Rl×(2d+c)
Ws
are weight parameters in network learned during training.
Ws
t captures variation in temporal drift for subject and
object respectively. Whh is shared parameter that captures
recurrent participation effect for each entity. Wh is a shared
projection matrix applied to consider the compatibility of
entities in their previous relationships. ⊕ represent simple
concatenation operator. σ(·) denotes nonlinear activation
function (tanh in our case). Our formulations use simple
RNN units but it can be replaced with more expressive

units like LSTM or GRU in straightforward manner. In
our experiments, we choose d = l and d (cid:54)= c but they
can be chosen differently. Below we explain the rationales
of our deep recurrent architecture that captures nonlinear
evolutionary dynamics of entities over time.

Reasoning Based on Structural Dependency: The hidden
layer (hes
) reasons for an event by capturing the compati-
bility of most recent subject embedding with most recent
object embedding in previous relationship of subject entity.
This accounts for the behavior that within a short period of
time, entities tend to form relationships with other entities
that have similar recent actions and goals. This layer thereby
uses historical information of the two nodes involved in cur-
rent event and the edges they both created before this event.
This holds symmetrically for hidden layer (heo

).

Reasoning based on Temporal Dependency: The recur-
rent layer uses hidden layer information to model the inter-
twined evolution of entity embeddings over time. Speciﬁ-
cally this layer has two main components:

• Drift over time: The ﬁrst term captures the temporal dif-
ference between consecutive events on respective dimen-
sion of each entity. This captures the external inﬂuences

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

that entities may have experienced between events and
allows to smoothly drift their features over time. This
term will not contribute anything in case when multiple
events happen for an entity at same time point (e.g. within
a day in our dataset). While tp − tp−1 may exhibit high
variation, the corresponding weight parameter will cap-
ture these variations and along with the second recurrent
term, it will prevent ves

(tp) to collapse.

• Relation-speciﬁc Mutual Evolution: The latent fea-
tures of both subject and object entities inﬂuence each
other. In multi-relational setting, this is further affected
by the relationship they form. Recurrent update to entity
embedding with the information from the hidden layer
allows to capture the intricate non-linear and evolutionary
dynamics of an entity with respect to itself and the other
entity in a speciﬁc relationship space.

3.4. Understanding Uniﬁed View of Know-Evolve

Figure (2) and Figure (3) shows the architecture of knowl-
edge evolution framework and one step of our model.

The updates to the entity representations in Eq. (5) and (6)
are driven by the events involving those entities which
makes the embeddings piecewise constant i.e. an entity
embedding remains unchanged in the duration between two
events involving that entity and updates only when an event
happens on its dimension. This is justiﬁable as an entity’s
features may update only when it forges a relationship with
other entity within the graph. Note that the ﬁrst term in
Eq. (5) and (6) already accounts for any external inﬂuences.

Having observed an event at time t, Know-Evolve consid-
ers it as an incoming fact that brings new knowledge about
the entities involved in that event. It computes the inten-
sity of that event in Eq. (3) which is based on relational
compatibility score in Eq. (4) between most recent latent
embeddings of involved entities. As these embeddings are
piecewise constant, we use time interval term (t − ¯t) in Eq.
(3) to make the overall intensity piecewise linear which is
standard mathematical choice for efﬁcient computation in
point process framework. This formulation naturally leads
to Rayleigh distribution which models time interval between
current event and most recent event on either entities’ dimen-
sion. Rayleigh distribution has an added beneﬁt of having a
simple analytic form of likelihood which can be further used
to ﬁnd entity for which the likelihood reaches maximum
value and thereby make precise entity predictions.

4. Efﬁcient Training Procedure

The complete parameter space for the above model is:
Ω = {{Ve}e=1:ne , {Rr}r=1:nr , We, Ws
t , Wh,
Whh, Wr}. Although Know-Evolve gains expressive
power from deep architecture, Table 4 (Appendix D) shows
that the memory footprint of our model is comparable to

t, Wo

simpler relational models. The intensity function in (3) al-
lows to use maximum likelihood estimation over all the facts
as our objective function. Concretely, given a collection of
facts recorded in a temporal window [0, T ), we learn the
model by minimizing the joint negative log likelihood of
intensity function (Daley & Vere-Jones, 2007) written as:

L = −

(cid:16)

λes,eo
r

(cid:17)
(tp| ¯tp)

log

N
(cid:88)

p=1

(cid:124)

(cid:123)(cid:122)
happened events

(cid:125)

nr(cid:88)

ne(cid:88)

ne(cid:88)

(cid:90) T

+

λes,eo
r

(τ |¯τ ) dτ

es=1

eo=1

r=1
(cid:124)

0
(cid:123)(cid:122)
survival term

(cid:125)

(7)

The ﬁrst term maximizes the probability of speciﬁc type
of event between two entities; the second term penalizes
non-presence of all possible types of events between all
possible entity pairs in a given observation window. We use
Back Propagation Through Time (BPTT) algorithm to train
our model. Previous techniques (Du et al., 2016; Hidasi
et al., 2016) that use BPTT algorithm decompose data into
independent sequences and train on mini-batches of those
sequences. But there exists intricate relational and tempo-
ral dependencies between data points in our setting which
limits our ability to efﬁciently train by decomposing events
into independent sequences. To address this challenge, we
design an efﬁcient Global BPTT algorithm (Algorithm 2,
Appendix A) that creates mini-batches of events over global
timeline in sliding window fashion and allows to capture
dependencies across batches while retaining efﬁciency.

Intractable Survival Term. To compute the second sur-
vival term in (7), since our intensity function is modulated
by relation-speciﬁc parameter, for each relationship we need
to compute survival probability over all pairs of entities.
Next, given a relation r and entity pair (es, eo), we denote
P(es,eo) as total number of events of type r involving either
es or eo in window [T0, T ). As our intensity function is
piecewise-linear, we can decompose the integration term
− (cid:82) T
λes,eo
(τ |¯τ )dτ into multiple time intervals where in-
r
T0
tensity is constant:

(cid:90) T

T0

=

=

λes,eo
r

(τ |¯τ )dτ

P(es,eo )−1
(cid:88)

(cid:90) tp+1

p=1

tp

P(es,eo )−1
(cid:88)

p=1

λes,eo
r

(τ |¯τ )dτ

(t2

p+1 − t2

p) · exp(ves

(tp)T · Rr · veo

(tp))

The integral calculations in (8) for all possible triplets re-
quires O(n2r) computations (n is number of entities and r is
the number of relations). This is computationally intractable

(8)

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

end if
¯t = max(tes
subj surv += (t end2 − ¯t2) · exp(subj f eatT ·
rel weight · obj other f eat)

−, teo

−)

5.2. Competitors

Algorithm 1 Survival Loss Computation in mini-batch
Input: Minibatch E, size s, Batch Entity List bl
loss = 0.0
for p = 0 to s − 1 do

(t−)
(t−)

subj feat = Ep → ves
obj feat = Ep → veo
rel weight = Ep → Rr
t end = Ep → t
subj surv = 0, obj surv = 0, total surv = 0
for i = 0 to bl.size do
obj other = bl[i]
if obj other == Ep → es then

continue

end for
for j = 0 to bl.size do
subj other = bl[i]
if subj other == Ep → eo then

continue

end if
¯t = max(tes
obj surv
exp(subj other f eatT · rel weight · obj f eat)

(t end2 − ¯t2)

−, teo

+=

−)

·

end for
loss += subj surv + obj surv

end for

and also unnecessary. Knowledge tensors are inherently
sparse and hence it is plausible to approximate the survival
loss in a stochastic setting. We take inspiration from tech-
niques like noise contrastive (Gutmann & Hyv¨arinen, 2012)
estimation and adopt a random sampling strategy to com-
pute survival loss: Given a mini-batch of events, for each
relation in the mini-batch, we compute dyadic survival term
across all entities in that batch. Algorithm 1 presents the
survival loss computation procedure. While this procedure
may randomly avoid penalizing some dimensions in a rela-
tionship, it still includes all dimensions that had events on
them. The computational complexity for this procedure will
be O(2n(cid:48)r(cid:48)m) where m is size of mini-batch and n(cid:48) and r(cid:48)
represent number of entities and relations in the mini-batch.

5. Experiments

5.1. Temporal Knowledge Graph Data

We use two datasets: Global Database of Events, Language,
and Tone (GDELT) (Leetaru & Schrodt, 2013) and Inte-
grated Crisis Early Warning System (ICEWS) (Boschee
et al., 2017) which has recently gained attention in learning
community (Schein et al., 2016) as useful temporal KGs.
GDELT data is collected from April 1, 2015 to Mar 31,

2016 (temporal granularity of 15 mins). ICEWS dataset is
collected from Jan 1, 2014 to Dec 31, 2014 (temporal gran-
ularity of 24 hrs). Both datasets contain records of events
that include two actors, action type and timestamp of event.
We use different hierarchy of actions in two datasets - (top
level 20 relations for GDELT while last level 260 relations
for ICEWS) - to test on variety of knowledge tensor conﬁg-
urations. Note that this does not ﬁlter any record from the
dataset. We process both datasets to remove any duplicate
quadruples, any mono-actor events (i.e., we use only dyadic
events), and self-loops. We report our main results on full
versions of each dataset. We create smaller version of both
datasets for exploration purposes. Table 1 (Appendix B)
provide statistics about the data and Table 2 (Appendix B)
demonstrates the sparsity of knowledge tensor.

We compare the performance of our method with following
relational learning methods: RESCAL, Neural Tensor Net-
work (NTN), Multiway Neural Network (ER-MLP), TransE
and TransR. To the best of our knowledge, there are no exist-
ing relational learning approaches that can predict time for a
new fact. Hence we devised two baseline methods for evalu-
ating time prediction performance — (i) Multi-dimensional
Hawkes process (MHP): We model dyadic entity interac-
tions as multi-dimensional Hawkes process similar to (Du
et al., 2015). Here, an entity pair constitutes a dimension
and for each pair we collect sequence of events on its dimen-
sion and train and test on that sequence. Relationship is not
modeled in this setup. (ii) Recurrent Temporal Point Pro-
cess (RTPP): We implement a simpliﬁed version of RMTPP
(Du et al., 2016) where we do not predict the marker. For
training, we concatenate static entity and relationship em-
beddings and augment the resulting vector with temporal
feature. This augmented unit is used as input to global RNN
which produces output vector ht. During test time, for a
given triplet, we use this vector ht to compute conditional
intensity of the event given history which is further used to
predict next event time. Appendix C provides implementa-
tion details of our method and competitors.

5.3. Evaluation Protocol

We report experimental results on two tasks: Link prediction
and Time prediction.

r

= λes,eo
r

Link prediction: Given a test quadruplet (es, r, eo, t), we
replace eo with all the entities in the dataset and compute the
conditional density des,eo
(t) for the re-
sulting quadruplets including the ground truth. We then sort
all the quadruplets in the descending order of this density to
rank the correct entity for object position. We also conduct
testing after applying the ﬁltering techniques described in
(Bordes et al., 2013) - we only rank against the entities that
do not generate a true triplet (seen in train) when it replaces

(t)Ses,eo
r

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

(a) ICEWS-raw

(b) ICEWS-ﬁltered

(c) GDELT-raw

(d) GDELT-ﬁltered

Figure 4. Mean Average Rank (MAR) for Entity Prediction on both datasets.

(a) ICEWS-raw

(b) ICEWS-ﬁltered

(c) GDELT-raw

(d) GDELT-ﬁltered

Figure 5. Standard Deviation (STD) in MAR for Entity Prediction on both datasets.

(a) ICEWS-raw

(b) ICEWS-ﬁltered

(c) GDELT-raw

(d) GDELT-ﬁltered

Figure 6. HITS@10 for Entity Prediction on both datasets.

ground truth object. We report Mean Absolute Rank (MAR),
Standard Deviation for MAR and HITS@10 (correct entity
in top 10 predictions) for both Raw and Filtered Versions.

Time prediction: Give a test triplet (es, r, eo), we pre-
dict the expected value of next time the fact (es, r, eo)
can occur. This expectation is deﬁned by: Ees,eo
(t) =
(cid:113)
(t) is computed using equa-

, where ges,eo

π

r

r

2 exp(ges ,eo

r

(t))

tion (4). We report Mean Absolute Error (MAE) between
the predicted time and true time in hours.

Sliding Window Evaluation. As our work concentrates
on temporal knowledge graphs, it is more interesting to
see the performance of methods over time span of test set
as compared to single rank value. This evaluation method
can help to realize the effect of modeling temporal and
evolutionary knowledge. We therefore partition our test set
in 12 different slides and report results in each window. For
both datasets, each slide included 2 weeks of time.

5.4. Quantitative Analysis

Link Prediction Results. Figure (4, 5, 6) demonstrate
link prediction performance comparison on both datasets.
Know-Evolve signiﬁcantly and consistently outperforms all
competitors in terms of prediction rank without any dete-

rioration over time. Neural Tensor Network’s second best
performance compared to other baselines demonstrate its
rich expressive power but it fails to capture the evolving dy-
namics of intricate dependencies over time. This is further
substantiated by its decreasing performance as we move test
window further in time.

The second row represents deviation error for MAR across
samples in a given test window. Our method achieves signif-
icantly low deviation error compared to competitors making
it most stable. Finally, high performance on HITS@10 met-
ric demonstrates extensive discriminative ability of Know-
Evolve. For instance, GDELT has only 20 relations but
32M events where many entities interact with each other in
multiple relationships. In this complex setting, other meth-
ods depend only on static entity embeddings to perform
prediction unlike our method which does effectively infers
new knowledge using powerful evolutionary network and
provides accurate prediction results.

Time Prediction Results. Figure 7 demonstrates that
Know-Evolve performs signiﬁcantly better than other point
process based methods for predicting time. MHP uses a spe-
ciﬁc parametric form of the intensity function which limits
its expressiveness. Further, each entity pair interaction is
modeled as an independent dimension and does not take

2005001000200024681012141618202224WeekMARER-MLPKnow-EvolveNTNRESCALTransETransR1002005001000200024681012141618202224WeekMARER-MLPKnow-EvolveNTNRESCALTransETransR5001000200024681012141618202224WeekMARER-MLPKnow-EvolveNTNRESCALTransETransR5001000200024681012141618202224WeekMARER-MLPKnow-EvolveNTNRESCALTransETransR100015002000250030003500400024681012141618202224WeekSTDEVER-MLPKnow-EvolveNTNRESCALTransETransR500100015002000250030003500400024681012141618202224WeekSTDEVER-MLPKnow-EvolveNTNRESCALTransETransR1500200025003000350024681012141618202224WeekSTDEVER-MLPKnow-EvolveNTNRESCALTransETransR10001500200025003000350024681012141618202224WeekSTDEVER-MLPKnow-EvolveNTNRESCALTransETransR0.20.40.60.824681012141618202224WeekHITS_10ER-MLPKnow-EvolveNTNRESCALTransETransR0.20.40.60.81.024681012141618202224WeekHITS_10ER-MLPKnow-EvolveNTNRESCALTransETransR0.20.40.60.824681012141618202224WeekHITS_10ER-MLPKnow-EvolveNTNRESCALTransETransR0.40.60.81.024681012141618202224WeekHITS_10ER-MLPKnow-EvolveNTNRESCALTransETransRKnow-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

(a) GDELT-500

(b) ICEWS-500

Figure 7. Time prediction performance (Unit is hours).

into account relational feature which fails to capture the
intricate inﬂuence of different entities on each other. On the
other hand, RTPP uses relational features as part of input,
but it sees all events globally and cannot model the intricate
evolutionary dependencies on past events. We observe that
our method effectively captures such non-linear relational
and temporal dynamics.

In addition to the superior quantitative performance, we
demonstrate the effectiveness of our method by providing
extensive exploratory analysis in Appendix E.

6. Related Work

In this section, we discuss relevant works in relational learn-
ing and temporal modeling techniques.

6.1. Relational Learning

Among various relational learning techniques, neural em-
bedding models that focus on learning low-dimensional
representations of entities and relations have shown state-
of-the-art performance. These methods compute a score
for the fact based on different operations on these latent
representations. Such models can be mainly categorized
into two variants:

Compositional Models. RESCAL (Nickel et al., 2011)
uses a relation speciﬁc weight matrix to explain triplets
via pairwise interactions of latent features. Neural Tensor
Network (NTN) (Socher et al., 2013) is more expressive
model as it combines a standard NN layer with a bilinear
tensor layer. (Dong et al., 2014) employs a concatenation-
projection method to project entities and relations to lower
dimensional space. Other sophisticated models include
Holographic Embeddings (HoLE) (Nickel et al., 2016b)
that employs circular correlation on entity embeddings and
Neural Association Models (NAM) (Liu et al., 2016), a
deep network used for probabilistic reasoning.

Translation Based Models. (Bordes et al., 2011) uses two
relation-speciﬁc matrices to project subject and object enti-
ties and computes L1 distance to score a fact between two
entity vectors. (Bordes et al., 2013) proposed TransE model
that computes score as a distance between relation-speciﬁc
translations of entity embeddings. (Wang et al., 2014) im-
proved TransE by allowing entities to have distributed rep-
resentations on relation speciﬁc hyperplane where distance

between them is computed. TransR (Lin et al., 2015) ex-
tends this model to use separate semantic spaces for entities
and relations and does translation in the relationship space.

(Nickel et al., 2016a) and (Yang et al., 2015; Toutanova &
Chen, 2015) contains comprehensive reviews and empirical
comparison of relational learning techniques respectively.
All these methods consider knowledge graphs as static mod-
els and lack ability to capture temporally evolving dynamics.

6.2. Temporal Modeling

Temporal point processes have been shown as very effec-
tive tool to model various intricate temporal behaviors in
networks (Yang & Zha, 2013; Farajtabar et al., 2014; 2015;
Du et al., 2015; 2016; Wang et al., 2016a;b;c; 2017a;b).
Recently, (Wang et al., 2016a; Dai et al., 2016b) proposed
novel co-evolutionary feature embedding process that cap-
tures self-evolution and co-evolution dynamics of users and
items interacting in a recommendation system. In relational
setting, (Loglisci et al., 2015) proposed relational mining ap-
proach to discover changes in structure of dynamic network
over time. (Loglisci & Malerba, 2017) proposes method to
capture temporal autocorrelation in data to improve predic-
tive performance. (Sharan & Neville, 2008) proposes sum-
marization techniques to model evolving relational-temporal
domains. Recently, (Esteban et al., 2016) proposed multi-
way neural network architecture for modeling event based
relational graph. The authors draw a synergistic relation
between a static knowledge graph and an event set wherein
the knowledge graph provide information about entities par-
ticipating in events and new events in turn contribute to
enhancement of knowledge graph. They do not capture the
evolving dynamics of entities and model time as discrete
points which limits its capacity to model complex temporal
dynamics. (Jiang et al., 2016) models dependence of rela-
tionship on time to facilitate time-aware link prediction but
do not capture evolving entity dynamics.

7. Conclusion

We propose a novel deep evolutionary knowledge network
that efﬁciently learns non-linearly evolving entity represen-
tations over time in multi-relational setting. Evolutionary
dynamics of both subject and object entities are captured by
deep recurrent architecture that models historical evolution
of entity embeddings in a speciﬁc relationship space. The
occurrence of a fact is then modeled by multivariate point
process that captures temporal dependencies across facts.
The superior performance and high scalability of our method
on large real-world temporal knowledge graphs demonstrate
the importance of supporting temporal reasoning in dynam-
ically evolving relational systems. Our work establishes
previously unexplored connection between relational pro-
cesses and temporal point processes with a potential to open
a new direction of research on reasoning over time.

110.81116.8841875.4101000MethodsMAEMethodsKnow-EvolveMHPER-TPP42.821348.9242727101000MethodsMAEMethodsKnow-EvolveMHPER-TPPKnow-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Acknowledgement

This project was supported in part by NSF IIS-1218749,
NIH BIGDATA 1R01GM108341, NSF CAREER IIS-
1350983, NSF IIS-1639792 EAGER, ONR N00014-15-1-
2340, NVIDIA, Intel and Amazon AWS.
References

Aalen, Odd, Borgan, Ornulf, and Gjessing, Hakon. Sur-
vival and event history analysis: a process point of view.
Springer, 2008.

Bordes, Antoine, Weston, Jason, Collobert, Ronan, and
Bengio, Yoshua. Learning structured embeddings of
knowledge bases. In Conference on Artiﬁcial Intelligence,
number EPFL-CONF-192344, 2011.

Bordes, Antoine, Usunier, Nicolas, Garcia-Duran, Alberto,
Weston, Jason, and Yakhnenko, Oksana. Translating em-
beddings for modeling multi-relational data. In Advances
in neural information processing systems, pp. 2787–2795,
2013.

Boschee, Elizabeth, Lautenschlager, Jennifer, O’Brien,
Sean, Shellman, Steve, Starz, James, and Ward, Michael.
Icews coded event data. 2017.

Cox, D.R. and Lewis, P.A.W. Multivariate point processes.
Selected Statistical Papers of Sir David Cox: Volume 1,
Design of Investigations, Statistical Methods and Appli-
cations, 1:159, 2006.

Dai, Hanjun, Dai, Bo, and Song, Le. Discriminative em-
beddings of latent variable models for structured data. In
ICML, 2016a.

Dai, Hanjun, Wang, Yichen, Trivedi, Rakshit, and Song,
Le. Deep coevolutionary network: Embedding user
and item features for recommendation. arXiv preprint
arXiv:1609.03675, 2016b.

Daley, D.J. and Vere-Jones, D. An introduction to the the-
ory of point processes: volume II: general theory and
structure, volume 2. Springer, 2007.

Dong, Xin, Gabrilovich, Evgeniy, Heitz, Geremy, Horn,
Wilko, Lao, Ni, Murphy, Kevin, Strohmann, Thomas,
Sun, Shaohua, and Zhang, Wei. Knowledge vault: A
web-scale approach to probabilistic knowledge fusion.
In Proceedings of the 20th ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining,
pp. 601–610, 2014.

Du, Nan, Wang, Yichen, He, Niao, and Song, Le. Time
sensitive recommendation from recurrent user activities.
In NIPS, 2015.

Du, Nan, Dai, Hanjun, Trivedi, Rakshit, Upadhyay, Utkarsh,
Gomez-Rodriguez, Manuel, and Song, Le. Recurrent
marked temporal point processes: Embedding event his-
tory to vector. In KDD, 2016.

Esteban, Cristobal, Tresp, Volker, Yang, Yinchong, Baier,
Stephan, and Krompa, Denis. Predicting the co-evolution
of event and knowledge graphs. In 2016 19th Interna-
tional Conference on Information Fusion (FUSION), pp.
98–105, 2016.

Farajtabar, Mehrdad, Du, Nan, Gomez-Rodriguez, Manuel,
Valera, Isabel, Zha, Hongyuan, and Song, Le. Shaping
social activity by incentivizing users. In NIPS, 2014.

Farajtabar, Mehrdad, Wang, Yichen, Gomez-Rodriguez,
Manuel, Li, Shuang, Zha, Hongyuan, and Song, Le. Coe-
volve: A joint point process model for information diffu-
sion and network co-evolution. In NIPS, 2015.

Gutmann, Michael U and Hyv¨arinen, Aapo. Noise-
contrastive estimation of unnormalized statistical models,
with applications to natural image statistics. Journal of
Machine Learning Research, 13(Feb):307–361, 2012.

Hawkes, Alan G. Spectra of some self-exciting and mutually
exciting point processes. Biometrika, 58(1):83–90, 1971.

Hidasi, Balazs, Karatzoglou, Alexandros, Baltrunas, Linas,
and Tikk, Domonkos. Session-based recommendations
with recurrent neural networks. In ICLR, 2016.

Isham, V. and Westcott, M. A self-correcting pint process.
Advances in Applied Probability, 37:629–646, 1979.

Jiang, Tingsong, Liu, Tianyu, Ge, Tao, Lei, Sha, Li, Suijan,
Chang, Baobao, and Sui, Zhifang. Encoding temporal
information for time-aware link prediction. 2016.

Leetaru, Kalev and Schrodt, Philip A. Gdelt: Global data on
events, location, and tone. ISA Annual Convention, 2013.

Lin, Yankai, Liu, Zhiyuan, Sun, Maosong, and Zhu, Xuan.
Learning entity and relation embeddings for knowledge
graph completion. 2015.

Liu, Quan, Jiang, Hui, Evdokimov, Andrew, Ling, Zhen-
Hua, Zhu, Xiaodan, Wei, Si, and Hu, Yu. Probabilistic
reasoning via deep learning: Neural association models.
arXiv:1603.07704v2, 2016.

Loglisci, Corrado and Malerba, Donato. Leveraging tempo-
ral autocorrelation of historical data for improving accu-
racy in network regression. Statistical Analysis and Data
Mining: The ASA Data Science Journal, 10(1):40–53,
2017.

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Wang, Zhen, Zhang, Jianwen, Feng, Jianlin, and Chen,
Zheng. Knowledge graph embedding by translating on
hyperplanes. 2014.

Yang, Bishan, Yih, Wen-tau, He, Xiaodong, Gao, Jianfeng,
and Deng, Li. Embedding entities and relations for learn-
ing and inference in knowledge bases. arXiv:1412.6575,
2015.

Yang, Shuang-Hong and Zha, Hongyuan. Mixture of mutu-
ally exciting processes for viral diffusion. In ICML, pp.
1–9, 2013.

Loglisci, Corrado, Ceci, Michelangelo, and Malerba, Do-
nato. Relational mining for discovering changes in evolv-
ing networks. Neurocomputing, 150, Part A:265–288,
2015.

Nickel, Maximilian, Tresp, Volker, and Kriegel, Hans-
Peter. A three-way model for collective learning on multi-
relational data. In Proceedings of the 28th International
Conference on Machine Learning (ICML-11), pp. 809–
816, 2011.

Nickel, Maximilian, Murphy, Kevin, Tresp, Volker, and
Gabrilovich, Evgeniy. A review of relational machine
learning for knowledge graphs. Proceedings of the IEEE,
2016a.

Nickel, Maximilian, Rosasco, Lorenzo, and Poggio, Tomaso.
Holographic embeddings of knowledge graphs. 2016b.

Schein, Aaron, Zhou, Mingyuan, Blei, David, and Wal-
lach, Hanna. Bayesian poisson tucker decomposi-
tion for learning the structure of international relations.
arXiv:1606.01855, 2016.

Sharan, Umang and Neville, Jennifer. Temporal-relational
classiﬁers for prediction in evolving domains. In 2008
Eighth IEEE International Conference on Data Mining,
pp. 540–549, 2008.

Socher, Richard, Chen, Danqi, Manning, Christopher D,
and Ng, Andrew. Reasoning with neural tensor networks
for knowledge base completion. In Advances in Neural
Information Processing Systems, pp. 926–934, 2013.

Toutanova, Kristina and Chen, Danqi. Observed versus
latent features for knowledge base and text inference.
2015.

Wang, Yichen, Du, Nan, Trivedi, Rakshit, and Song, Le.
Coevolutionary latent feature processes for continuous-
time user-item interactions. In NIPS, 2016a.

Wang, Yichen, Theodorou, Evangelos, Verma, Apurv, and
Song, Le. A stochastic differential equation framework
for guiding online user activities in closed loop. arXiv
preprint arXiv:1603.09021, 2016b.

Wang, Yichen, Xie, Bo, Du, Nan, and Song, Le. Isotonic

hawkes processes. In ICML, 2016c.

Wang, Yichen, Williams, Grady, Theodorou, Evangelos, and
Song, Le. Variational policy for guiding point processes.
In ICML, 2017a.

Wang, Yichen, Ye, Xiaojing, Zhou, Haomin, Zha,
Hongyuan, and Song, Le. Linking micro event history
to macro prediction in point process models. In AISTAT,
2017b.

