Learning to Align the Source Code to the Compiled Object Code –
Supplementary Material

1. The Effect of Optimization

Fig. 1 demonstrates the effect of code optimization to
the translated object code and the additional challenge it
presents to our neural alignment network. The C code in
(a) is being compiled without optimization (b), and with
optimization levels 1–3 (c–e). As can be seen, optimiza-
tion drastically reduces the length of the object code (N )
from over a hundred statements in the unoptimized compi-
lation to 26 statements in all three levels of optimization.
The optimization also results in parts of the C code that are
not covered by any statement of the object code, due to pre-
computation at compilation time. In general, the alignment
is non-monotonous, and is less and less so as the level of
optimization increases.

2. Sample Alignment Results

A few alignment prediction results are shown in Fig. 2,
where the soft- and the hard-predictions output by our Con-
volutional Grid Decoder are displayed side by side with the
ground truth. It is evident that the soft predictions them-
selves are mostly conﬁdent with values that are concen-
trated around 0 and 1, and that the hard-predictions closely
match the ground truth alignments.

Learning to Align the Source Code to the Compiled Object Code – Supplementary Material

1

i n t

f u n c 1 ( i n t a1 ,
i n t a4 ,

i n t a2 ,
i n t a5 )

i n t a3 ,

{

i n t v6 , v7 , v8 , v9 , v10 , v11 = 0 ;
v6 = 0 ;
f o r
{

( v7 = 0 ; v7 ++; v7<a5 )

( a2 < a5 )

v6 += ( a3 − a5 ) + a2 ;

v6 += a1 ∗ ( a5 − a3 ) ;

( v9 = 0 ; v9 ++; v9<a5 )

v8 += a1 ∗ a5 + a3 ;

( a4 < a1 )

v10 = a2 − a5 ;

2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37

i f
{

}
e l s e
{

}

}
v8 = 0 ;
f o r
{

}
i f
{

}
i f
{

}
e l s e
{

}
e l s e
{

v11 = ( ( a4 + a5 ) + a3 ) − a1 ;

}
r e t u r n v10+v11+ a1 + a3 + a2 + a5 +
a4 +v6+v7+v8+v9 ;

38

}

(a)

v10 = a2 ∗ a3 ∗ a5 + a3 ;

( v6 < a3 )

(b)

v11 = a3 ∗ a5 ∗ ( a1 − a3 ) ;

(c)

(d)

(e)

Figure 1. The effect of compiler optimization levels on the compiled object code. (a) A sample C function. (b-e) The alignment matrices
for the object code that results from compiling the C code using the GCC compiler with optimization levels 0,1,2,3 respectively (the
object code itself is not shown). The alignment is much less monotonous post-optimization, and the optimization results in many source
code statements that have been precomputed and are not aligned. Also, for this speciﬁc code, the results of optimization levels 2 and 3
are identical.

Learning to Align the Source Code to the Compiled Object Code – Supplementary Material

(a)

(b)

(c)

Figure 2. Samples of alignments predicted by our proposed Con-
volutional Grid Decoder. Each row is one sample. The ﬁrst
sample is using -O1 optimization; The next two samples employ
-O2, and the rest employ -O3. Each matrix cell varies between
0 (black) to 1 (white). (a) The soft prediction of the alignment.
(b) The predicted hard-alignment. (c) Ground truth. The soft pre-
dictions are mostly certain and the hard predictions match almost
completely the ground truth.

