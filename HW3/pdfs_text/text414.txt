Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks
Using Householder Reﬂections

Zakaria Mhammedi 1 2 Andrew Hellicar 2 Ashfaqur Rahman 2 James Bailey 1

Abstract

The problem of learning long-term dependencies
in sequences using Recurrent Neural Networks
(RNNs) is still a major challenge. Recent meth-
ods have been suggested to solve this problem
by constraining the transition matrix to be uni-
tary during training which ensures that its norm
is equal to one and prevents exploding gradients.
These methods either have limited expressive-
ness or scale poorly with the size of the network
when compared with the simple RNN case, es-
pecially when using stochastic gradient descent
with a small mini-batch size. Our contributions
are as follows; we ﬁrst show that constraining the
transition matrix to be unitary is a special case of
an orthogonal constraint. Then we present a new
parametrisation of the transition matrix which al-
lows efﬁcient training of an RNN while ensuring
that the matrix is always orthogonal. Our results
show that the orthogonal constraint on the transi-
tion matrix applied through our parametrisation
gives similar beneﬁts to the unitary constraint,
without the time complexity limitations.

1. Introduction

Recurrent Neural Networks (RNNs) have been successfully
used in many applications involving time series. This is be-
cause RNNs are well suited for sequential data as they pro-
cess inputs one element at a time and store relevant infor-
mation in their hidden state. In practice, however, training
simple RNNs (sRNN) can be challenging due to the prob-
lem of exploding and vanishing gradients (Hochreiter et al.,
2001). It has been shown that exploding gradients can oc-
cur when the transition matrix of an RNN has a spectral
norm larger than one (Glorot & Bengio, 2010). This results

1The University of Melbourne, Parkville, Australia 2Data61,
CSIRO, Australia. Correspondence to: Zakaria Mhammedi
<zak.mhammedi@data61.csiro.au>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

in an error surface, associated with some objective func-
tion, having very steep walls (Pascanu et al., 2013). On the
other hand, when the spectral norm of the transition matrix
is less than one, the information at one time step tend to
vanish quickly after a few time steps. This makes it chal-
lenging to learn long-term dependencies in sequential data.

Different methods have been suggested to solve either the
vanishing or exploding gradient problem. The LSTM has
been speciﬁcally designed to help with the vanishing gra-
dient (Hochreiter & Schmidhuber, 1997). This is achieved
by using gate vectors which allow a linear ﬂow of in-
formation through the hidden state. However, the LSTM
does not directly address the exploding gradient problem.
One approach to solving this issue is to clip the gradients
(Mikolov, 2012) when their norm exceeds some thresh-
old value. However, this adds an extra hyperparameter to
the model. Furthermore, if exploding gradients can occur
within some parameter search space, the associated error
surface will still have steep walls. This can make training
challenging even with gradient clipping.

Another way to approach this problem is to improve the
shape of the error surface directly by making it smoother,
which can be achieved by constraining the spectral norm of
the transition matrix to be less than or equal to one. How-
ever, a value of exactly one is best for the vanishing gra-
dient problem. A good choice of the activation function
between hidden states is also crucial in this case. These
ideas have been investigated in recent works. In particu-
lar, the unitary RNN (Arjovsky et al., 2016) uses a spe-
cial parametrisation to constrain the transition matrix to be
unitary, and hence, of norm one. This parametrisation and
other similar ones (Hyland & R¨atsch, 2017; Wisdom et al.,
2016) have some advantages and drawbacks which we will
discuss in more details in the next section.

The main contributions of this work are as follows:

• We ﬁrst show that constraining the search space of the
transition matrix of an RNN to the set of unitary ma-
trices U(n) is equivalent to limiting the search space
to a subset of O(2n) (O(2n) is the set of 2n × 2n or-
thogonal matrices) of a new RNN with twice the hid-
den size. This suggests that it may not be necessary to

Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

work with complex matrices.

• We present a simple way to parametrise orthogo-
nal transition matrices of RNNs using Householder
matrices, and we derive the expressions of
the
back-propagated gradients with respect to the new
parametrisation. This new parametrisation can also be
used in other deep architectures.

• We develop an algorithm to compute the back-
propagated gradients efﬁciently. Using this algorithm,
we show that the worst case time complexity of one
gradient step is of the same order as that of the sRNN.

2. Related Work

Throughout this work we will refer to elements of the fol-
lowing sRNN architecture.

h(t) = φ(W h(t−1) + V x(t)),
o(t) = Y h(t),

(1)

(2)

where W , V and Y are the hidden-to-hidden, input-to-
hidden, and hidden-to-output weight matrices. h(t−1) and
h(t) are the hidden vectors at time steps t − 1 and t respec-
tively. Finally, φ is a non-linear activation function. We
have omitted the bias terms for simplicity.

Recent research explored how the initialisation of the tran-
sition matrix W inﬂuences training and the ability to learn
long-term dependencies.
In particular, initialisation with
the identity or an orthogonal matrix can greatly improve
performance (Le et al., 2015). In addition to these initial-
isation methods, one study also considered removing the
non-linearity between the hidden-to-hidden connections
(Henaff et al., 2016), i.e. the term W h(t−1) in Equation (1)
is outside the activation function φ. This method showed
good results when compared to the LSTM on pathological
problems exhibiting long-term dependencies.

After training a model for a few iterations using gradient
descent, nothing guarantees that the initial structures of the
transition matrix will be held. In fact, its spectral norm can
deviate from one, and exploding and vanishing gradients
can be a problem again. It is possible to constrain the tran-
sition matrix to be orthogonal during training using special
parametrisations (Arjovsky et al., 2016; Hyland & R¨atsch,
2017), which ensure that its spectral norm is always equal
to one. The unitary RNN (uRNN) (Arjovsky et al., 2016)
is one example where the hidden matrix W ∈ Cn×n is the
product of elementary matrices, consisting of reﬂection, di-
agonal, and Fourier transform matrices. When the size of
hidden layer is equal to n, the transition matrix has a total of
only 7n parameters. Another advantage of this parametri-
sation is computational efﬁciency - the matrix-vector prod-
uct W v, for some vector v, can be calculated in time com-
plexity O(n log n). However, it has been shown that this

parametrisation does not allow the transition matrix to span
the full unitary group (Wisdom et al., 2016) when the size
of the hidden layer is greater than 7. This may limit the
expressiveness of the model.

(cid:104)(cid:80)n2

Another interesting parametrisation (Hyland & R¨atsch,
2017) has been suggested which takes advantage of the al-
gebraic properties of the unitary group U(n). The idea is
to use the corresponding matrix Lie algebra u(n) of skew
hermitian matrices. In particular, the transition matrix can
(cid:105)
be written as W = exp
, where exp is the ex-
i=1 λiTi
ponential matrix map and {Ti}n2
i=1 are predeﬁned n × n
matrices forming a bases of the Lie algebra u(n). The
learning parameters are the weights {λi}. The fact that the
matrix Lie algebra u(n) is closed and connected ensures
that the exponential mapping from u(n) to U(n) is surjec-
tive. Therefore, with this parametrisation the search space
of the transition matrix spans the whole unitary group. This
is one advantage over the original unitary parametrisation
(Arjovsky et al., 2016). However, the cost of computing
the matrix exponential to get W is O(n3), where n is the
dimension of the hidden state. .

Another method (Wisdom et al., 2016) performs optimi-
sation directly of the Stiefel manifold using the Cayley
transformation. The corresponding model was called full-
capacity unitary RNN. Using this approach, the transition
matrix can span the full set of unitary matrices. However,
this method involves a matrix inverse as well as matrix-
matrix products which have time complexity O(n3). This
can be problematic for large neural networks when using
stochastic gradient descent with a small mini-batch size.

A more recent study (Vorontsov et al., 2017) investigated
the effect of soft versus hard orthogonal constraints on the
performance of RNNs. The soft constraint was applied by
specifying an allowable range for the maximum singular
value of the transition matrix. To this end, the transition
matrix was factorised as W = U SV (cid:48), where U and V are
orthogonal matrices and S is a diagonal matrix containing
the singular values of W . A soft orthogonal constraint con-
sists of specifying small allowable intervals around 1 for
the diagonal elements of S. Similarly to (Wisdom et al.,
2016), the matrices U and V were updated at each training
iteration using the Cayley transformation, which involves a
matrix inverse, to ensure that they remain orthogonal.

All the methods discussed above, except for the original
unitary RNN, involve a step that requires at least a O(n3)
time complexity. All of them, except for one, require the
use of complex matrices. Table 1 summarises the time
complexities of various methods, including our approach,
In the next section, we
for one stochastic gradient step.
show that imposing a unitary constraint on a transition ma-
trix W ∈ Cn×n is equivalent to imposing a special orthog-

Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

onal constraint on a new RNN with twice the hidden size.
Furthermore, since the norm of orthogonal matrices is also
always one, using the latter has the same theoretical bene-
ﬁts as using unitary matrices when it comes to the explod-
ing gradient problem.

3. Complex unitary versus orthogonal

We can show that when the transition matrix W ∈ Cn×n of
an RNN is unitary, there exists an equivalent representation
of this RNN involving an orthogonal matrix ˆW ∈ R2n×2n.

In fact, consider a complex unitary transition matrix W =
A + iB ∈ Cn×n, where A and B are now real-valued ma-
trices in Rn×n. We also deﬁne the following new variables
(cid:21)

(cid:21)

(cid:20)(cid:60) (cid:0)h(t)(cid:1)
(cid:61) (cid:0)h(t)(cid:1)

, ˆV =

(cid:20)(cid:60) (V )
(cid:21)
(cid:61) (V )

, ˆW =

(cid:20)A −B
B A

,

∀t, ˆh(t) =

where (cid:60) and (cid:61) denote the real and imaginary parts of a
complex number. Note that ˆh(t) ∈ R2n, ˆW ∈ R2n×2n,
and ˆV ∈ R2n×nx , where nx is the dimension of the input
vector x(t) in Equation (1).

Assuming that the activation function φ applies to the real
and imaginary parts separately, it is easy to show that the
update equation of the complex hidden state h(t) of the uni-
tary RNN has the following real space representation

ˆh(t) = φ( ˆW ˆh(t−1) + ˆV x(t)).

(3)

Even when the activation function φ does not apply to the
real and imaginary parts separately, it is still possible to ﬁnd
an equivalent representation in the real space. Consider the
activation function proposed by (Arjovsky et al., 2016)
(cid:26)(|z| + b) z

|z| ,

if |z| + b > 0
otherwise

0,

(4)

σmodRelU(z) =

where b is a bias vector. For a hidden state ˆh ∈ R2n, the
equivalent activation function in the real space representa-
tion is given by

(cid:104) ˆφ(a)

(cid:105)

=

i

(cid:113)






+b˜ki

a2
i +a2
ki
(cid:113)
a2
i +a2
ki
0,

(cid:113)

ai,

if

i + a2
a2
ki

+ b˜ki

> 0

otherwise

where ki = ((i + n) mod 2n) and ˜ki = (i mod n) for all
i ∈ {1, . . . , 2n}. The activation function ˆφ is no longer
applied to hidden units independently.
Now we will show that the matrix ˆW is orthogonal. By
deﬁnition of a unitary matrix, we have W W ∗ = I where
the ∗ represents the conjugate transpose. This implies that
AA(cid:48) + BB(cid:48) = I and BA(cid:48) − AB(cid:48) = 0. And since we have

ˆW ˆW (cid:48) =

(cid:20)AA(cid:48) + BB(cid:48) AB(cid:48) − BA(cid:48)
BA(cid:48) − AB(cid:48) AA(cid:48) + BB(cid:48)

(cid:21)

,

(5)

it follows that ˆW ˆW (cid:48) = I. Also note that ˆW has a special
structure - it is a block-matrix.

The discussion above shows that using a complex, unitary
transition matrix in Cn×n is equivalent to using an orthogo-
nal matrix, belonging to a subset of O(2n), in a new RNN
with twice the hidden size. This is why in this work we
focus mainly on parametrising orthogonal matrices.

4. Parametrisation of the transition matrix

Before discussing the details of our parametrisation, we
ﬁrst introduce a few notations. For n, k ∈ N and 2 ≤ k ≤
n, let Hk : Rk → Rn×n be deﬁned as

Hk(u) =

(cid:34)

In−k
0

0
Ik − 2 uu(cid:48)
(cid:107)u(cid:107)2

(cid:35)

,

where Ik denotes the k-dimensional identity matrix. For
u ∈ Rk, Hk(u) is the Householder Matrix in O(n) rep-
resenting the reﬂection about the hyperplane orthogonal to
n−k, u(cid:48))(cid:48) ∈ Rn and passing through the ori-
the vector (0(cid:48)
gin, where 0n−k denotes the zero vector in Rn−k.
We also deﬁne the mapping H1 : R → Rn×n as

(6)

(7)

H1(u) =

(cid:20)In−1
0

(cid:21)

0
u

.

Note that H1(u) is not necessarily a Householder reﬂec-
tion. However, when u ∈ {1, −1}, H1(u) is orthogonal.
Finally, for n, k ∈ N and 1 ≤ k ≤ n, we deﬁne

Mk : Rk × · · · × Rn → Rn×n

(uk, . . . , un) (cid:55)→ Hn(un) . . . Hk(uk).

We propose to parametrise the transition matrix W of an
RNN using the mappings {Mk}. When using m reﬂection
vectors {ui}, the parametrisation can be expressed as

W = Mn−m+1(un−m+1, . . . , un)

= Hn(un) . . . Hn−m+1(un−m+1),

(8)

where ui ∈ Ri for i ∈ {n − m + 1, . . . , n}.

For the particular case where m = n in the above
parametrisation, we have the following result.
Theorem 1. The image of M1 includes the set of all n × n
orthogonal matrices, i.e. O(n) ⊂ M1[R × · · · × Rn].

Note that Theorem 1 would not be valid if H1(·) was
In fact, in the two-
a standard Householder reﬂection.
dimensional case, for instance, the matrix (cid:0) 1 0
(cid:1) cannot
be expressed as the product of exactly two standard House-
holder matrices.

0 −1

The parametrisation in (8) has the following advantages:

Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

Methods

uRNN (Arjovsky et al., 2016)

Constraint on the Time complexity of one
transition matrix
(cid:107)W (cid:107) = 1

online gradient step
O(T n log(n))

Full-capacity uRNN
(Wisdom et al., 2016)
Unitary RNN
(Hyland & R¨atsch, 2017)
oRNN
(Our approach)

(cid:107)W (cid:107) = 1

(cid:107)W (cid:107) = 1

(cid:107)W (cid:107) = 1

Search space of the
transition matrix
A subset of U(n)
when n > 7
The full U(n) set

O(T n2 + n3)

O(T n2 + n3)

The full U(n) set

O(T nm)
where m ≤ n

The full O(n) set
when m = n

Table 1. Table showing the time complexities associated with one stochastic gradient step (mini-batch size =1) for different methods,
when the size of the hidden layer of an RNN is n and the input sequence has length T .

at each time step t. Note that in Equation (10) h(t−1) is
taken as a constant with respect to U . Furthermore, we
∂L
have ∂L
∂U (t) , where T is the length of the input
sequence. The gradient ﬂow through the RNN at time step
t is shown in Figure 1.

∂U = (cid:80)T

t=1

1. The parametrisation is smooth*, which is convenient
for training with gradient descent. It is also ﬂexible - a
good trade-off between expressiveness and speed can
be found by tuning the number of reﬂection vectors.

2. The time and space complexities involved in one gra-
dient calculation are, in the worst case, the same as
that of the sRNN with the same number of hidden
units. This is discussed in the following subsections.

3. When m < n, the matrix W is always orthogonal, as
long as the reﬂection vectors are nonzero. For m = n,
the only additional requirement for W to be orthogo-
nal is that u1 ∈ {−1, 1}.

4. When m = n, the transition matrix can span the whole
set of n × n orthogonal matrices. In this case, the total
number of parameters needed for W is n(n + 1)/2.
This results in only n redundant parameters since the
orthogonal set O(n) is a n(n − 1)/2 manifold.

4.1. Back-propagation algorithm

Let ui ∈ Ri. Let U := (un| . . . |un−m+1) ∈ Rn×m be
the parameter matrix constructed from the reﬂection vec-
tors {ui}. In particular, the j-th column of U can be ex-
pressed using the zero vector 0j−1 ∈ Rj−1 as

Figure 1. Gradient ﬂow through the RNN at time step t. Note that
we have L = (cid:80)T

t=1 Lt(ot, yt), where {yt} are target outputs.

∂L

∂U (t) and

Before describing the algorithm to compute the back-
propagated gradients ∂L
∂h(t−1) , we ﬁrst derive their
expressions as a function of U , h(t−1) and ∂L
∂C(t) using the
compact WY representation (Joffrain et al., 2006) of the
product of Householder reﬂections.
Proposition 1. Let n, m ∈ N s.t. m ≤ n − 1. Let ui ∈
Ri and U = (un| . . . |un−m+1) be the matrix deﬁned in
Equation (9). We have

Hn(un) . . . Hn−m+1(un−m+1) = I − U T −1U (cid:48),

where striu(U (cid:48)U ), and diag(U (cid:48)U ) represent the strictly up-
per part and the diagonal of the matrix U (cid:48)U , respectively.

(12)

(13)

U∗,j =

(cid:21)

(cid:20) 0j−1
un−j+1

∈ Rn,

1 ≤ j ≤ m.

(9)

T := striu(U (cid:48)U ) +

diag(U (cid:48)U ),

1
2

Let L be a scalar loss function and C (t) := W h(t−1), where
W is constructed using the {ui} vectors following Equa-
tion (8). In order to back-propagate the gradients through
time, we need to compute the following partial derivatives

∂L
∂U (t)

:=

∂L
∂h(t−1)

=

(cid:21)(cid:48)

(cid:20) ∂C (t)
∂U
(cid:20) ∂C (t)
∂h(t−1)

,

∂L
∂C (t)
(cid:21)(cid:48)

∂L
∂C (t)

,

*except on a subset of zero Lebesgue measure.

(10)

(11)

Equation (13) is the compact WY representation of the
product of Householder reﬂections. For the particular case
where m = n, the RHS of Equation (13) should be re-
placed by (cid:0)I − U T −1U (cid:48)(cid:1) H1(u1), where H1 is deﬁned in
(7) and U = (un| . . . |u2).

The following theorem gives the expressions of the gradi-
ents ∂L
∂h(t−1) when m ≤ n − 1 and h = h(t−1).

∂U (t) and

∂L

Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

∂L

∂L
∂U (t) ,

∂C , U = (un| . . . |un−m+1).
∂h(t−1) , C (t) = W h(t−1)

Algorithm 1 Local forward and backward propagations at
time step t. For a matrix A, A∗,k denotes the k-th column.
1: Inputs: h(t−1), ∂L
2: Outputs:
3: Require: G ∈ Rn×m, g ∈ Rn, H ∈ Rn×(m+1)
4: N ← ((cid:107)un(cid:107)2 , . . . , (cid:107)un−m+1(cid:107)2)
5: H∗,m+1 ← h(t−1)
6: g ← ∂L
∂C
7: for k = m to 1 do {Local Forward Propagation}
U (cid:48)
8:
9: H∗,k ← H∗,k+1 − ˜hkU∗,k
10: end for
11: for k = 1 to m do {Local Backward Propagation}
12:

˜hk ← 2
Nk

∗,kH∗,k+1

U (cid:48)

˜Ck ← 2
∗,kg
Nk
g ← g − ˜CkU∗,k

13:
14: G∗,k ← −˜hkg − ˜CkH∗,k+1
15: end for
16: C (t) ← H∗,1
∂L
∂h(t−1) ← g
17:
∂L
∂U (t) ← G

18:

Theorem 2. Let n, m ∈ N s.t. m ≤ n−1. Let U ∈ Rn×m,
h ∈ Rn, and C = (I − U T −1U (cid:48))h, where T is deﬁned in
Equation (12). If L is a scalar loss function which depends
on C, then we have

=U [(˜h ˜C (cid:48)) ◦ B(cid:48) + ( ˜C˜h(cid:48)) ◦ B] −

˜h(cid:48) − h ˜C (cid:48), (14)

∂L
∂C

∂L
∂U
∂L
∂h

=

∂L
∂C

− U ˜C,

(15)

where ˜h = T −1U (cid:48)h, ˜C = (T (cid:48))−1U (cid:48) ∂L
striu(J) + 1
and ◦ the Hadamard product.

∂C , and B =
2 I, with J being the m × m matrix of all ones

The proof of Equations (14) and (15) is provided in Ap-
pendix A. Based on Theorem 2, Algorithm 1 performs the
one-step forward-propagation (FP) and back-propagation
(BP) required to compute C (t),
∂h(t−1) . See
Appendix B for more detail about how this algorithm is de-
rived using Theorem 2.

∂L
∂U (t) , and

∂L

In the next section we analyse the time and space complex-
ities of this algorithm.

4.2. Time and Space complexity

At each time step t, the ﬂop count required by Algorithm
1 is (13n + 2)m; 6nm for the one-step FP and (7n + 2)m
for the one-step BP. Note that the vector N only needs to
be calculated at one time step. This reduces the ﬂop count
at the remaining time steps to (11n + 3)m. The fact that
the matrix U has all zeros in its upper triangular part can be
used to further reduce the total ﬂop count to (11n − 3m +

Model
oRNN (n, m)
sRNN (n)

Flop counts

FP

BP

(4n − m + 2)m (7n − 2m + 3)m

2n2 − n

3n2 − n

Table 2. Summary of the ﬂop counts due to the computations of
one-step FP and BP through the hidden-to-hidden connections.
The BP ﬂop counts for the oRNN case assumes that the H ma-
trices (see Algorithm 1) are not locally generated during the BP
steps. Otherwise, the ﬂop count would be (11n − 3m + 5)m.

5)m; (4n − m + 2)m for the one-step FP and (7n − 2m +
3)m for the one-step BP. See Appendix C for more details.

Note that if the values of the matrices H, deﬁned in Algo-
rithm 1, are ﬁrst stored during a “global” FP (i.e. through
all time steps), then used in the BP steps, the time com-
plexity† for a global FP and BP using one input sequence
of length T are, respectively, ≈ 3n2T and ≈ 5n2T , when
m ≈ n and n (cid:29) 1. In contrast with the sRNN case with
n hidden units, the global FP and BP have time complex-
ities ≈ 2n2T and ≈ 3n2T . Hence, when m ≈ n, the FP
and BP steps using our parametrisation require only about
twice more ﬂops than the sRNN case with the same number
of hidden units.

Note, however, that storing the values of the matrices H at
all time steps requires the storage of mnT values for one
sequence of length T , compared with nT when only the
hidden states {h(t)}t=1 are stored. When m (cid:29) 1 this may
not be practical. One solution to this problem is to generate
the matrices H locally at each BP step using U and h(t−1).
This results in a global BP complexity of (11n − 3m +
5)mT . Table 2 summarises the ﬂop counts for the FP and
BP steps. Note that these ﬂop counts are for the case when
m ≤ n − 1. When m = n, the complexity added due to the
multiplication by H1(u1) is negligible.

4.3. Extension to the Unitary case

Although we decided to focus on the set of real-valued or-
thogonal matrices, for the reasons given in Section 3, our
parametrisation can readily be modiﬁed to apply to the gen-
eral unitary case.
Let ˆHk : Ck → Cn×n, 2 ≤ k ≤ n, be deﬁned by Equation
(6) where the transpose sign (cid:48) is replaced by the conjugate
transpose ∗. Furthermore, let ˆH1 : Rn → Cn×n be deﬁned
as ˆH1(θ) = diag(eiθ1, . . . , eiθn ). With the new mappings
{ ˆHk}k=n

k=1 , we have the following corollary.

†We considered only the time complexity due to computations

through the hidden-to-hidden connections of the network.

Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

Corollary 1. Let ˆM1 be the mapping deﬁned as

ˆM1 : Rn × C2 × · · · × Cn → Cn×n

(θ, u2, . . . , un) (cid:55)→ ˆHn(un) . . . ˆH2(u2) ˆH1(θ).

The image of ˆM1 spans the full set of unitary matrices
U(n) and any point on its image is a unitary matrix.

5. Experiments

All RNN models were implemented using the python li-
brary theano (Theano Development Team, 2016). For ef-
ﬁciency, we implemented the one-step FP and BP algo-
rithms described in Algorithm 1 using C code‡. We tested
the new parametrisation on ﬁve different datasets all having
long-term dependencies. We call our parametrised network
oRNN (for orthogonal RNN). We set its activation function
to the leaky_ReLU deﬁned as φ(x) = max( x
10 , x). To
ensure that the transition matrix of the oRNN is always or-
thogonal, we set the scalar u1 to -1 if u1 ≤ 0 and 1 oth-
erwise after each gradient update. Note that the parameter
matrix U in Equation (9) has all zeros in its upper triangular
part. Therefore, after calculating the gradient of a loss with
respect to U (i.e. ∂L
∂U ), the values in the upper triangular
part are set to zero.

For all experiments, we used the adam method for stochas-
tic gradient descent (Kingma & Ba, 2014). We initialised
all the parameters using uniform distributions similar to
(Arjovsky et al., 2016). The biases of all models were set
to zero, except for the forget bias of the LSTM, which we
set to 5 to facilitate the learning of long-term dependencies
(Koutn´ık et al., 2014).

5.1. Sequence generation

In this experiment, we followed a similar setting to
(Koutn´ık et al., 2014) where we trained RNNs to encode
song excerpts. We used the track Manyrista from album
Musica Deposita by Cuprum. We extracted ﬁve consecu-
tive excerpts around the beginning of the song, each hav-
ing 800 data points and corresponding to 18ms with a
44.1Hz sampling frequency. We trained an sRNN, LSTM,
and oRNN for 5000 epochs on each of the pieces with
ﬁve random seeds. For each run, the lowest Normalised
Mean Squared Error (NMSE) during the 5000 epochs was
recorded. For each model, we tested three different hidden
sizes. The total number of parameters Np corresponding
to these hidden sizes was approximately equal to 250, 500,
and 1000. For the oRNN, we set the number of reﬂection
vectors to the hidden size for each case, so that the tran-
sition matrix is allowed to span the full set of orthogonal

‡Our implementation can be found at https://github.

com/zmhammedi/Orthogonal_RNN.

Figure 2. Sequence generation task: The plots show the NMSE
distributions for the different models with respect to the total num-
ber of parameters for the sequence generation task. The horizontal
red lines represent the medians of the NMSE over 25 data points
(i.e. ﬁve seeds for each of the ﬁve song excerpts). The solid
rectangles and the dashed bars represent the [25% − 75%] and
[9% − 91%] conﬁdence intervals respectively.

Figure 3. Sequence generation task: The RNN-generated se-
quences against the true data for one of the ﬁve excerpts used.
We only displayed the best performing models for Np (cid:39) 1000.

matrices. The results are shown in Figures 2 and 3. All the
learning rates were set to 10−3. The orthogonal parametri-
sation outperformed the sRNN and performed on average
better than the LSTM.

5.2. Addition Task

In this experiment, we followed a similar setting to (Ar-
jovsky et al., 2016), where the goal of the RNN is to output
the sum of two elements in the ﬁrst dimension of a two-
dimensional sequence. The location of the two elements
to be summed are speciﬁed by the entries in the second
dimension of the input sequence. In particular, the ﬁrst di-
mension of every input sequence consists of random num-
bers between 0 and 1. The second dimension has all zeros
except for two elements equal to 1. The ﬁrst unit entry

# param2745111066NMSE00.20.40.60.81LSTM# param2445191026oRNN# param2675011051sRNN-101True dataLSTM-101True dataoRNN200400600800-101True datasRNNEfﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

is located in the ﬁrst half of the sequence, and the second
one in the second half. We tested two different sequence
lengths T = 400, 800. All models were trained to min-
imise the Mean Squared Error (MSE). The baseline MSE
for this task is 0.167; for a model that always outputs one.

Figure 5. MNIST experiment: Validation accuracy of the oRNN
in Table 3 as a function of the number of epochs. mBS and LR in
the legend stand for mini-batch size and learning rate respectively.

Figure 4. Addition task: For each lag T , the red curves represent
two runs of the oRNN model with two different random initiali-
sation seeds. LSTM and sRNN did not beat the baseline MSE.

We trained an oRNN with n = 128 hidden units and
m = 16 reﬂections. We trained an LSTM and sRNN with
hidden sizes 28 and 54, respectively, corresponding to a to-
tal number of parameters ≈ 3600 (i.e. same as the oRNN
model). We chose a batch size of 50, and after each itera-
tion, a new set of sequences was generated randomly. The
learning rate for the oRNN was set to 0.01. Figure 4 dis-
plays the results for both lags.

The oRNN was able to beat the baseline MSE in less than
5000 iterations for both lags and for two different random
initialisation seeds. This is in line with the results of the
unitary RNN (Arjovsky et al., 2016).

5.3. Pixel MNIST

In this experiment, we used the MNIST image dataset.
We split the dataset into training (55000 instances), valida-
tion (5000 instances), and test sets (10000 instances). We
trained oRNNs with n ∈ {128, 256} and m ∈ {16, 32, 64},
where n and m are the number of hidden units and reﬂec-
tions vectors respectively, to minimise the cross-entropy
error function. We experimented with (mini-batch size,
learning rate) ∈ {(1, 10−4), (50, 10−3)}.

Table 3 compares the test performance of our best model
against results available in the literature for unitary/orthog-
onal RNNs. Despite having fewer total number of param-
eters, our model performed better than three out the four
models selected for comparison (all having ≥ 16K param-
eters). Figure 5 shows the validation accuracy as a function
of the number of epochs of our oRNN model in Table 3.

Figure 6. MNIST experiment: Effect of varying the number of re-
ﬂection vectors m on the validation accuracy and speed of conver-
gence. mBS (resp, LR) stands for mini-batch size (resp, learning
rate).

Figure 6 shows the effect of varying the number of reﬂec-
tion vectors m on the performance.

5.4. Penn Tree Bank

In this experiment, we tested the oRNN on the task of char-
acter level prediction using the Penn Tree Bank Corpus.
The data was split into training (5017K characters), vali-
dation (393K characters), and test sets (442K characters).
The total number of unique characters in the corpus was 49.
The vocabulary size was 10K and any other words were re-
placed by the special token <unk>. The number of charac-
ters per instance (i.e. char/line) in the training data ranged
between 2 and 518 with an average of 118 char/line. We
trained an oRNN and LSTM with hidden units 512 and 183
respectively, corresponding to a total of ≈ 180K parame-
ters, for 20 epochs. We set the number of reﬂections to 510

x 100 iterations 020400MSE00.10.20.30.40.5T = 400LSTMsRNNoRNNx 100 iterations 020406080T = 800LSTMsRNNoRNNepochs5101520Accuracy0.40.50.60.70.80.91MNIST convergence plotoRNN n=256, m=32, mBS=1, LR=10-4epochs246Accuracy0.40.50.60.70.80.91MNIST convergence plots for oRNN(n,m,mBS,LR)=(256,16,1,10-4)(n,m,mBS,LR)=(256,32,1,10-4)(n,m,mBS,LR)=(256,64,1,10-4)(n,m,mBS,LR)=(128,32,50,10-3)(n,m,mBS,LR)=(128,64,50,10-3)Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

Model

oRNN
RNN (Vorontsov et al., 2017)
uRNN (Arjovsky et al., 2016)
RC uRNN (Wisdom et al., 2016)
FC uRNN (Wisdom et al., 2016)

hidden size
(# reﬂections)
256 (m=32)
128
512
512
116

Number of
parameters
≈11K
≈35K
≈16K
≈16K
≈16K

validation
accuracy
97.0 %
-
-
-
-

test
accuracy
97.2 %
94.1 %
95.1 %
97.5 %
92.8 %

Table 3. Results summary for the MNIST digit classiﬁcation experiment and comparison with the uRNN results available in the literature.
’FC’ and ’RC’ stand for Full-Capacity and Restricted Capacity respectively. The oRNN with n = 256 was trained using a mini-batch
size of 1 and a learning rate of 10−4.

Model (nh) # params

e
t
s
-
1

p oRNN (512)
LSTM (184)
p oRNN (512)
LSTM (183)

e
t
s
-
5

183K
181K
183K
180K

valid cost
1.73
1.69
3.85
3.81

test cost
1.68
1.68
3.85
3.8

Table 4. Results summary for the Penn Tree bank experiment.

for the oRNN. The learning rate was set to 0.0001 for both
models with a mini-batch size of 1.

Similarly to (Pascanu et al., 2013) we considered two tasks:
one where the model predicts one character ahead and the
It
other where it predicts a character ﬁve steps ahead.
was suggested that solving the later task would require the
learning of longer term correlations in the data rather than
the shorter ones. Table 4 summarises the test results. The
oRNN and LSTM performed similarly to each other on the
one-step head prediction task. Whereas on the ﬁve-step
ahead prediction task, the LSTM was better. The perfor-
mance of both models on this task was close to the state of
the art result for RNNs 3.74 bpc (Pascanu et al., 2013).

Nevertheless, our oRNN still outperformed the results of
(Vorontsov et al., 2017) which used both soft and hard or-
thogonality constraints on the transition matrix. Their RNN
was trained on 99% of the data (sentences with ≤ 300 char-
acters) and had the same number of hidden units as the
oRNN in our experiment. The lowest test cost achieved
was 2.20(bpc) for the one-step-ahead prediction task.

5.5. Copying task

We tested our model on the copy task described in details in
(Gers et al., 2001; Arjovsky et al., 2016). Using an oRNN
with the leaky_ReLU we were not able to reproduce the
same performance as the uRNN (Arjovsky et al., 2016;
Wisdom et al., 2016). However, we were able to achieve
a comparable performance when using the OPLU activation
function (Chernodub & Nowicki, 2016), which is a norm-
preserving activation function. In order to explore whether
the poor performance of the oRNN was only due to the acti-
vation function, we tested the same activation as the uRNN

(i.e. the real representation of modReLU deﬁned in Equa-
tion (4)) on the oRNN. This did not improve the perfor-
mance compared to the leaky_ReLU case suggesting that
the block structure of the uRNN transition matrix, when ex-
pressed in the real space (see Section 3), may confer special
beneﬁts in some cases.

6. Discussion

In this work, we presented a new parametrisation of
the transition matrix of a recurrent neural network us-
ing Householder reﬂections. This method allows an easy
and computationally efﬁcient way to enforce an orthogo-
nal constraint on the transition matrix which then ensures
that exploding gradients do not occur during training. Our
method could also be applied to other deep neural architec-
tures to enforce orthogonality between hidden layers. Note
that a “soft” orthogonal constraint could also be applied
using our parametrisation by, for example, allowing u1 to
vary continuously between -1 and 1.

It is important to note that our method is particularly ad-
vantageous for stochastic gradient descent when the mini-
batch size is close to 1. In fact, if B is the mini-batch size
and T is the average length of the input sequences, then
a network with n hidden units trained using other meth-
ods (Vorontsov et al., 2017; Wisdom et al., 2016; Hyland
& R¨atsch, 2017) that enforce orthogonality (see Section 2),
would have time complexity O(BT n2 +n3). Clearly when
BT (cid:29) n this becomes O(BT n2), which is the same time
complexity as that of the sRNN and oRNN (with m = n).
In contrast with the case of fully connected deep forward
networks with no weight sharing between layers (# layer
= L), the time complexity using our method is O(BLnm)
whereas other methods discussed in this work (see Section
2) would have time complexity O(BLn2 + Ln3). The lat-
ter methods are less efﬁcient in this case since B (cid:29) n is
less likely to be the case compared with BT (cid:29) n when
using SGD.

From a performance point of view, further experiments
should be performed to better understand the difference be-
tween the unitary versus orthogonal constraint.

Efﬁcient Orthogonal Parametrisation of Recurrent Neural Networks

Koutn´ık, Jan, Greff, Klaus, Gomez, Faustino J., and
Schmidhuber, J¨urgen. A clockwork RNN. In Proceed-
ings of the 31th International Conference on Machine
Learning, ICML 2014, Beijing, China, 21-26 June 2014,
pp. 1863–1871, 2014. URL http://jmlr.org/
proceedings/papers/v32/koutnik14.html.

Le, Quoc V., Jaitly, Navdeep, and Hinton, Geoffrey E. A
simple way to initialize recurrent networks of rectiﬁed
linear units. CoRR, abs/1504.00941, 2015. URL http:
//arxiv.org/abs/1504.00941.

Mikolov, Tom´aˇs. Statistical language models based on
neural networks. PhD thesis, Brno University of Tech-
nology, 2012.

Pascanu, Razvan, Mikolov, Tomas, and Bengio, Yoshua.
On the difﬁculty of training recurrent neural networks.
ICML (3), 28:1310–1318, 2013.

Theano Development Team. Theano: A Python framework
for fast computation of mathematical expressions. arXiv
e-prints, abs/1605.02688, May 2016. URL http://
arxiv.org/abs/1605.02688.

Vorontsov, Eugene, Trabelsi, Chiheb, Kadoury, Samuel,
and Pal, Chris. On orthogonality and learning recurrent
networks with long term dependencies. arXiv preprint
arXiv:1702.00071, 2017.

Wisdom, Scott, Powers, Thomas, Hershey, John R., Roux,
Jonathan Le, and Atlas, Les E. Full-capacity unitary re-
current neural networks. In Advances in Neural Infor-
mation Processing Systems 29: Annual Conference on
Neural Information Processing Systems 2016, December
5-10, 2016, Barcelona, Spain, pp. 4880–4888, 2016.

Acknowledgment

The authors would like to acknowledge Department of
State Growth Tasmania for partially funding this work
through SenseT. We would also like to thank Christfried
Webers for his valuable feedback.

References

Arjovsky, Martin, Shah, Amar, and Bengio, Yoshua. Uni-
In Interna-
tary evolution recurrent neural networks.
tional Conference on Machine Learning (ICML), 2016.

Chernodub, Artem and Nowicki, Dimitri. Norm-preserving
orthogonal permutation linear unit activation functions
(oplu). arXiv preprint arXiv:1604.02313, 2016.

Gers, F. A., Eck, D., and Schmidhuber, J. Applying
LSTM to time series predictable through time-window
In Dorffner, Gerg (ed.), Artiﬁcial Neural
approaches.
Networks – ICANN 2001 (Proceedings), pp. 669–676,
Berlin, 2001. Springer.

Glorot, Xavier and Bengio, Yoshua. Understanding the dif-
ﬁculty of training deep feedforward neural networks. In
Aistats, volume 9, pp. 249–256, 2010.

Henaff, Mikael, Szlam, Arthur, and LeCun, Yann. Or-
thogonal rnns and long-memory tasks. arXiv preprint
arXiv:1602.06662, 2016.

Hochreiter, Sepp and Schmidhuber, J¨urgen. Long short-
term memory. Neural computation, 9(8):1735–1780,
1997.

Hochreiter, Sepp, Bengio, Yoshua, Frasconi, Paolo, and
Schmidhuber, J¨urgen. Gradient ﬂow in recurrent nets:
the difﬁculty of learning long-term dependencies, 2001.

Hyland, Stephanie L. and R¨atsch, Gunnar.
Learning
In Pro-
unitary operators with help from u(n).
ceedings of
the Thirty-First AAAI Conference on
Artiﬁcial Intelligence, February 4-9, 2017, San Fran-
cisco, California, USA., pp. 2050–2058, 2017. URL
http://aaai.org/ocs/index.php/AAAI/
AAAI17/paper/view/14930.

Joffrain, Thierry, Low, Tze Meng, Quintana-Ort´ı, En-
rique S, Geijn, Robert van de, and Zee, Field G Van. Ac-
cumulating householder transformations, revisited. ACM
Transactions on Mathematical Software (TOMS), 32(2):
169–179, 2006.

Kingma, Diederik P. and Ba, Jimmy. Adam: A method
for stochastic optimization. CoRR, abs/1412.6980, 2014.
URL http://arxiv.org/abs/1412.6980.

