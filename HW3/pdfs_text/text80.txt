Learning to Discover Sparse Graphical Models

990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044

Empirical
Graph Lasso
DeepGraph

mean (cid:107) ˆΣ − Σ(cid:107)2
0.0267
0.0223
0.0232

0.543
0.680
0.673

2 mean (cid:107) ˆΣ − Σ(cid:107)∞

Table 5: Covariance prediction of ABIDE data. Averaged over 50
trials of 35 samples from the ABIDE Control data

A Supplementary Experiments and

Analysis

A.1 Predicting Covariance Matrices

Using our framework it is possible to attempt to directly predict an
accurate covariance matrix given a noisy one constructed from few
observations. This is a more challenging task than predicting the
edges. In this section we show preliminay experiments which given
an empirical covariance matrix from few observations attempts to
predict a more accurate covariance matrix that takes into account
underlying sparse data dependency structure.

One challenge is that outputs of our covariance predictor must
be on the positive semideﬁnite cone, thus we choose to instead
predict on the cholesky decompositions, which allows us to always
produce positive deﬁnite covariances. We train a similar structure
to DeepGraph-39 structure modifying the last layer to be fully
connected linear layer that predicts on the cholesky decomposition
of the true covariance matrices generated by our model with a
squared loss.

We evaluate this network using the ABIDE dataset described in
Section 3. The ABIDE data has a large number of samples al-
lowing us to obtain a large sample estimate of the covariance and
compare it to our estimator as well as graphical lasso and empirical
covariance estimators. Using the large sample ABIDE empiri-
cal covariance matrix. We ﬁnd that we can obtain competitive
(cid:96)2 and (cid:96)∞ norm using few samples. We use 403 subjects from
the ABIDE Control group each with a recording of 150 − 200
samples to construct covariance matrix, totaling 77 330 samples
(some correlated). This acts as our very approximate estimate of
the population Σ. We then evaluate covariance estimation on 35
samples using the empirical covariance estimator, graphical lasso,
and DeepGraph trained to output covariance matrices. We repeat
the experiment for 50 different subsamples of the data. We see in
?? that the prediction approach can obtain competitive results. In
terms of (cid:96)2 graphical lasso performs better, however our estimate
is better than empirical covariance estimation and much faster then
graphical lasso. In some applications such as robust estimation a
fast estimate of the covariance matrix (automatically embedding
sparsity assumptions) can be of great use. For (cid:96)∞ error we see the
empirical covariance estimation outperforms graphical lasso and
DeepGraph for this dataset, while DeepGraph performs better in
terms of this metric.

We note these results are preliminary, as the covariance predicting
networks were not heavily optimized, moreover the ABIDE dataset
is very noisy even when pre-processed and thus even the large
sample covariance estimate may not be accurate. We believe this
is an interesting alternate application of our paper.

A.2 Additional Synthetic Results on Sparsity

We investigate the affect of sparsity on DeepGraph-39 which has
been trained with input that has sparsity 96% − 92% sparse. We
ﬁnd that DeepGraph performs well at the 2% sparsity level despite
not seeing this at training time. At the same time performance

Figure 6: Average test likelihood over 50 trials of applying a
network trained for 500 nodes, used on a 175 node problem
begins to degrade for 15% but is still competitive in several cate-
gories. The results are shown in Table ??. Future investigation can
consider how alternate variation of sparsity at training time will
affect these results.

A.3 Application of Larger Network on Smaller Input

We perform preliminary investigation of application of a network
trained for a larger number of nodes to a smaller set of nodes.
Speciﬁcally, we consider the breast invasive carcinoma groups
gene data. We now take all 175 valid genes from Appendix C.2
of (Honorio et al., 2012). We take the network trained on 500
nodes in the synthetic experiments section. We use the same
experimental setup as in the gene experiments. The 175 × 175
covariance matrix from 40 samples and padded to the appropriate
size. We observe that DeepGraph has similar performance to graph
lasso while permuting the input and ensembling the result gives
substantial improvement.

A.4 Permutation as Ensemble Method

As discussed in Section 2.3, permuting the input and averaging
several permutations can produce an improved result empirically.
We interpret this as a typical ensembling method. This can be an
advantage of the proposed architecture as we are able to easily
use standard ensemble techniques. We perform an experiment
to further verify that indeed the permutation of the input (and
subsequent inverse permutation) allows us to produce separate
classiﬁers that have uncorrelated errors.

We use the setup from the synthetic experiments with DeepGraph-
39 in Section 3 with n = 35 and p = 39. We construct 20
permutation matrices as in the experimental section. Treating each
as a separate classiﬁer we compute the correlation coefﬁcient of the
errors on 50 synthetic input examples. We ﬁnd that the average cor-
relation coefﬁcient of the errors of two classiﬁers is 0.028 ± 0.002,
suggesting they are uncorrelated. Finally we note the individual
errors are relatively small, as can already be inferred from our ex-
tensive experimental results in Section 3. We however compute the
average absolute error of all the outputs across each permutation
for this set of inputs as 0.03, notably the range of outputs is 0 to
1. Thus since prediction error differ at each permutation but are
accurate we can average and yield a lower total prediction error.

Finally we note that our method is extremely efﬁcient computation-
ally thus averaging the results of several permutations is practical
even as the graph becomes large.

1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099

20406080100120Edges in support250248246244242240238236234Log-Likehood Test DataEdge Selection Breast invasive carcinoma SubjectsDeepGraphDeepGraph+PermuteglassoledoitrandomLearning to Discover Sparse Graphical Models

Experimental Setup

Gaussian Random Graphs
(n=35,p=39,sparsity=2%)

Gaussian Random Graphs
(n=35,p=39,sparsity=15%)

Method
Glasso
Glasso (optimal)
BDGraph
DeepGraph-39

Prec@5%
0.464 ± 0.038
0.519 ± 0.035
0.587 ± 0.033
0.590 ± 0.026
DeepGraph-39+Perm 0.598 ± 0.026
0.732 ± 0.046
0.847 ± 0.029
0.861 ± 0.015
0.678 ± 0.032
DeepGraph-39+Perm 0.792 ± 0.023

Glasso
Glasso (optimal)
BDGraph
DeepGraph-39

AUC
0.726 ± 0.021
0.754 ± 0.019
0.811 ± 0.017
0.810 ± 0.019
0.831 ± 0.017
0.562 ± 0.013
0.595 ± 0.011
0.654 ± 0.013
0.643 ± 0.012
0.660 ± 0.011

CE
0.02
0.02
0.15
0.03
0.03
0.32
0.33
0.33
0.33
0.33

Table 6: For each scenario we generate 100 graphs with 39 nodes, and corresponding data matrix sampled from distributions with those
underlying graphs. The number of samples is indicated by n.

1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154

1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209

