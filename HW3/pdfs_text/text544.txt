Learning Important Features Through Propagating Activation Differences

Avanti Shrikumar 1 Peyton Greenside 1 Anshul Kundaje 1

Abstract

The purported “black box” nature of neural
networks is a barrier to adoption in applica-
tions where interpretability is essential. Here
we present DeepLIFT (Deep Learning Impor-
tant FeaTures), a method for decomposing the
output prediction of a neural network on a spe-
ciﬁc input by backpropagating the contributions
of all neurons in the network to every feature
of the input. DeepLIFT compares the activa-
tion of each neuron to its ‘reference activation’
and assigns contribution scores according to the
difference. By optionally giving separate con-
sideration to positive and negative contributions,
DeepLIFT can also reveal dependencies which
are missed by other approaches. Scores can
be computed efﬁciently in a single backward
pass. We apply DeepLIFT to models trained
on MNIST and simulated genomic data, and
show signiﬁcant advantages over gradient-based
methods. Video tutorial: http://goo.gl/
qKb7pL, code: http://goo.gl/RM8jvH.

1. Introduction

As neural networks become increasingly popular,
their
black box reputation is a barrier to adoption when in-
terpretability is paramount. Here, we present DeepLIFT
(Deep Learning Important FeaTures), a novel algorithm
to assign importance score to the inputs for a given out-
put. Our approach is unique in two regards. First, it
frames the question of importance in terms of differences
from a ‘reference’ state, where the ‘reference’ is chosen
according to the problem at hand.
In contrast to most
gradient-based methods, using a difference-from-reference
allows DeepLIFT to propagate an importance signal even
in situations where the gradient is zero and avoids artifacts
caused by discontinuities in the gradient. Second, by op-

1Stanford University, Stanford, California, USA. Correspon-

dence to: A Kundaje <akundaje@stanford.edu>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

tionally giving separate consideration to the effects of posi-
tive and negative contributions at nonlinearities, DeepLIFT
can reveal dependencies missed by other approaches. As
DeepLIFT scores are computed using a backpropagation-
like algorithm, they can be obtained efﬁciently in a single
backward pass after a prediction has been made.

2. Previous Work

This section provides a review of existing approaches to as-
sign importance scores for a given task and input example.

2.1. Perturbation-Based Forward Propagation

Approaches

These approaches make perturbations to individual inputs
or neurons and observe the impact on later neurons in the
network. Zeiler & Fergus (Zeiler & Fergus, 2013) occluded
different segments of an input image and visualized the
change in the activations of later layers. “In-silico muta-
genesis” (Zhou & Troyanskaya, 2015) introduced virtual
mutations at individual positions in a genomic sequence
and quantiﬁed the their impact on the output. Zintgraf et
al.
(Zintgraf et al., 2017) proposed a clever strategy for
analyzing the difference in a prediction after marginalizing
over each input patch. However, such methods can be com-
putationally inefﬁcient as each perturbation requires a sep-
arate forward propagation through the network. They may
also underestimate the importance of features that have sat-
urated their contribution to the output (Fig. 1).

2.2. Backpropagation-Based Approaches

Unlike perturbation methods, backpropagation approaches
propagate an importance signal from an output neuron
backwards through the layers to the input in one pass, mak-
ing them efﬁcient. DeepLIFT is one such approach.

2.2.1. GRADIENTS, DECONVOLUTIONAL NETWORKS

AND GUIDED BACKPROPAGATION

Simonyan et al.
(Simonyan et al., 2013) proposed using
the gradient of the output w.r.t. pixels of an input image
to compute a “saliency map” of the image in the context
of image classiﬁcation tasks. The authors showed that this
was similar to deconvolutional networks (Zeiler & Fergus,

DeepLIFT: Learning Important Features Through Propagating Activation Differences

tor to an elementwise product between the saliency maps of
Simonyan et al. and the input (in other words, gradient ×
input). In our experiments, we compare DeepLIFT to gra-
dient × input as the latter is easily implemented on a GPU,
whereas LRP does not currently have GPU implementa-
tions available to our knowledge.

While gradient × input is often preferable to gradients
alone as it leverages the sign and strength of the input, it
still does not address the saturation problem in Fig. 1 or
the thresholding artifact in Fig. 2.

2.2.3. INTEGRATED GRADIENTS

Instead of computing the gradients at only the current value
of the input, one can integrate the gradients as the inputs
are scaled up from some starting value (eg: all zeros) to
their current value (Sundararajan et al., 2016). This ad-
dressess the saturation and thresholding problems of Fig.
1 and Fig. 2, but numerically obtaining high-quality inte-
grals adds computational overhead. Further, this approach
can still give misleading results (see Section 3.4.3).

2.3. Grad-CAM and Guided CAM

Grad-CAM (Selvaraju et al., 2016) computes a coarse-
grained feature-importance map by associating the feature
maps in the ﬁnal convolutional layer with particular classes
based on the gradients of each class w.r.t. each feature
map, and then using the weighted activations of the fea-
ture maps as an indication of which inputs are most impor-
tant. To obtain more ﬁne-grained feature importance, the
authors proposed performing an elementwise product be-
tween the scores obtained from Grad-CAM and the scores
obtained from Guided Backpropagation, termed Guided
Grad-CAM. However, this strategy inherits the limitations
of Guided Backpropagation caused by zero-ing out nega-
tive gradients during backpropagation. It is also speciﬁc to
convolutional neural networks.

3. The DeepLIFT Method

3.1. The DeepLIFT Philosophy

DeepLIFT explains the difference in output from some ‘ref-
erence’ output in terms of the difference of the input from
some ‘reference’ input. The ‘reference’ input represents
some default or ‘neutral’ input that is chosen according to
what is appropriate for the problem at hand (see Section
3.3 for more details). Formally, let t represent some tar-
get output neuron of interest and let x1, x2, ..., xn represent
some neurons in some intermediate layer or set of layers
that are necessary and sufﬁcient to compute t. Let t0 rep-
resent the reference activation of t. We deﬁne the quantity
∆t to be the difference-from-reference, that is ∆t = t − t0.
DeepLIFT assigns contribution scores C∆xi∆t to ∆xi s.t.:

Figure 1. Perturbation-based approaches and gradient-based
approaches fail to model saturation. Illustrated is a simple net-
work exhibiting saturation in the signal from its inputs. At the
point where i1 = 1 and i2 = 1, perturbing either i1 or i2 to 0 will
not produce a change in the output. Note that the gradient of the
output w.r.t the inputs is also zero when i1 + i2 > 1.

2013) except for the handling of the nonlinearity at rectiﬁed
linear units (ReLUs). When backpropagating importance
using gradients, the gradient coming into a ReLU during
the backward pass is zero’d out if the input to the ReLU
during the forward pass is negative. By contrast, when
backpropagating an importance signal in deconvolutional
networks, the importance signal coming into a ReLU dur-
ing the backward pass is zero’d out if and only if it is neg-
ative, with no regard to sign of the input to the ReLU dur-
ing the forward pass. Springenberg et al., (Springenberg
et al., 2014) combined these two approaches into Guided
Backpropagation, which zero’s out the importance signal
at a ReLU if either the input to the ReLU during the for-
ward pass is negative or the importance signal during the
backward pass is negative. Guided Backpropagation can be
thought of as equivalent to computing gradients, with the
caveat that any gradients that become negative during the
backward pass are discarded at ReLUs. Due to the zero-ing
out of negative gradients, both guided backpropagation and
deconvolutional networks can fail to highlight inputs that
contribute negatively to the output. Additionally, none of
the three approaches would address the saturation problem
illustrated in Fig. 1, as the gradient of y w.r.t. h is negative
(causing Guided Backprop and deconvolutional networks
to assign zero importance), and the gradient of h w.r.t both
i1 and i2 is zero when i1 + i2 > 1 (causing both gradients
and Guided Backprop to be zero). Discontinuities in the
gradients can also cause undesirable artifacts (Fig. 2).

2.2.2. LAYERWISE RELEVANCE PROPAGATION AND

GRADIENT × INPUT

Bach et al. (Bach et al., 2015) proposed an approach for
propagating importance scores called Layerwise Relevance
Propagation (LRP). Shrikumar et al. and Kindermans et al.
(Shrikumar et al., 2016; Kindermans et al., 2016) showed
that absent modiﬁcations to deal with numerical stability,
the original LRP rules were equivalent within a scaling fac-

DeepLIFT: Learning Important Features Through Propagating Activation Differences

n
(cid:88)

i=1

C∆xi∆t = ∆t

(1)

We call Eq. 1 the summation-to-delta property. C∆xi∆t
can be thought of as the amount of difference-from-
reference in t that is attributed to or ‘blamed’ on the
difference-from-reference of xi. Note that when a neuron’s
transfer function is well-behaved, the output is locally lin-
ear in its inputs, providing additional motivation for Eq. 1.
C∆xi∆t can be non-zero even when ∂t
is zero. This al-
∂xi
lows DeepLIFT to address a fundamental limitation of gra-
dients because, as illustrated in Fig. 1, a neuron can be sig-
naling meaningful information even in the regime where its
gradient is zero. Another drawback of gradients addressed
by DeepLIFT is illustrated in Fig. 2, where the discontinu-
ous nature of gradients causes sudden jumps in the impor-
tance score over inﬁnitesimal changes in the input. By con-
trast, the difference-from-reference is continuous, allowing
DeepLIFT to avoid discontinuities caused by bias terms.

Figure 2. Discontinuous gradients can produce misleading im-
portance scores. Response of a single rectiﬁed linear unit with a
bias of −10. Both gradient and gradient×input have a discontinu-
ity at x = 10; at x = 10 + (cid:15), gradient×input assigns a contribu-
tion of 10 + (cid:15) to x and −10 to the bias term ((cid:15) is a small positive
number). When x < 10, contributions on x and the bias term are
both 0. By contrast, the difference-from-reference (red arrow, top
ﬁgure) gives a continuous increase in the contribution score.

3.2. Multipliers and the Chain Rule

3.2.1. DEFINITION OF MULTIPLIERS

For a given input neuron x with difference-from-reference
∆x, and target neuron t with difference-from-reference ∆t
that we wish to compute the contribution to, we deﬁne the
multiplier m∆x∆t as:

m∆x∆t =

C∆x∆t
∆x

(2)

In other words, the multiplier m∆x∆t is the contribution of
∆x to ∆t divided by ∆x. Note the close analogy to the

idea of partial derivatives: the partial derivative ∂t
∂x is the
inﬁnitesimal change in t caused by an inﬁnitesimal change
in x, divided by the inﬁnitesimal change in x. The multi-
plier is similar in spirit to a partial derivative, but over ﬁnite
differences instead of inﬁnitesimal ones.

3.2.2. THE CHAIN RULE FOR MULTIPLIERS

Assume we have an input layer with neurons x1, ..., xn, a
hidden layer with neurons y1, ..., yn, and some target out-
put neuron t. Given values for m∆xi∆yj and m∆yj ∆t,
the following deﬁnition of m∆xi∆t is consistent with the
summation-to-delta property in Eq. 1 (see Appendix A for
the proof):

m∆xi∆t =

m∆xi∆yj m∆yj ∆t

(3)

(cid:88)

j

We refer to Eq. 3 as the chain rule for multipliers. Given
the multipliers for each neuron to its immediate successors,
we can compute the multipliers for any neuron to a given
target neuron efﬁciently via backpropagation - analogous
to how the chain rule for partial derivatives allows us to
compute the gradient w.r.t. the output via backpropagation.

3.3. Deﬁning the Reference

When formulating the DeepLIFT rules described in Sec-
tion 3.5, we assume that the reference of a neuron is its
activation on the reference input. Formally, say we have a
neuron y with inputs x1, x2, ... such that y = f (x1, x2, ...).
Given the reference activations x0
2, ... of the inputs, we
can calculate the reference activation y0 of the output as:

1, x0

y0 = f (x0

1, x0

2, ...)

(4)

i.e. references for all neurons can be found by choosing a
reference input and propagating activations through the net.

The choice of a reference input is critical for obtaining
insightful results from DeepLIFT. In practice, choosing a
good reference would rely on domain-speciﬁc knowledge,
and in some cases it may be best to compute DeepLIFT
scores against multiple different references. As a guiding
principle, we can ask ourselves “what am I interested in
measuring differences against?”. For MNIST, we use a ref-
erence input of all-zeros as this is the background of the im-
ages. For the binary classiﬁcation tasks on DNA sequence
inputs (strings over the alphabet {A,C,G,T}), we obtained
sensible results using either a reference input containing the
expected frequencies of ACGT in the background (Fig. 5),
or by averaging the results over multiple reference inputs
for each sequence that are generated by shufﬂing each orig-
inal sequence (Appendix J). For CIFAR10 data, we found
that using a blurred version of the original image as the

DeepLIFT: Learning Important Features Through Propagating Activation Differences

reference highlighted outlines of key objects, while an all-
zeros reference highlighted hard-to-interpret pixels in the
background (Appendix L).

It is important to note that gradient×input implicitly uses a
reference of all-zeros (it is equivalent to a ﬁrst-order Taylor
approximation of gradient×∆input where ∆ is measured
w.r.t. an input of zeros). Similary, integrated gradients
(Section 2.2.3) requires the user to specify a starting point
for the integral, which is conceptually similar to specify-
ing a reference for DeepLIFT. While Guided Backprop and
pure gradients don’t use a reference, we argue that this is
a limitation as these methods only describe the local be-
haviour of the output at the speciﬁc input value, without
considering how the output behaves over a range of inputs.

3.4. Separating Positive and Negative Contributions

We will see in Section 3.5.3 that, in some situations, it is
essential to treat positive and negative contributions differ-
ently. To do this, for every neuron y, we will introduce
∆y+ and ∆y− to represent the positive and negative com-
ponents of ∆y, such that:

∆y = ∆y+ + ∆y−

C∆y∆t = C∆y+∆t + C∆y−∆t

For linear neurons, ∆y+ and ∆y− are found by writing ∆y
as a sum of terms involving its inputs ∆xi and grouping
positive and negative terms together. The importance of
this will become apparent when applying the RevealCancel
rule (Section 3.5.3), where for a given target neuron t we
may ﬁnd that m∆y+∆t and m∆y−∆t differ. However, when
applying only the Linear or Rescale rules (Section 3.5.1
and Section 3.5.2), m∆y∆t = m∆y+∆t = m∆y−∆t.

3.5. Rules for Assigning Contribution Scores

We present the rules for assigning contribution scores for
each neuron to its immediate inputs. In conjunction with
the chain rule for multipliers (Section 3.2), these rules can
be used to ﬁnd the contributions of any input (not just the
immediate inputs) to a target output via backpropagation.

3.5.1. THE LINEAR RULE

This applies to Dense and Convolutional layers (excluding
nonlinearities). Let y be a linear function of its inputs xi
such that y = b + (cid:80)
i wixi. We have ∆y = (cid:80)
i wi∆xi.
We deﬁne the positive and negative parts of ∆y as:

∆y+ =

1{wi∆xi > 0}wi∆xi

=

1{wi∆xi > 0}wi(∆x+

i + ∆x−
i )

(cid:88)

i
(cid:88)

i

∆y− =

1{wi∆xi < 0}wi∆xi

=

1{wi∆xi < 0}wi(∆x+

i + ∆x−
i )

(cid:88)

i
(cid:88)

i

Which leads to the following choice for the contributions:
C∆x+
C∆x−
C∆x+
C∆x−

i ∆y+ = 1{wi∆xi > 0}wi∆x+
i ∆y+ = 1{wi∆xi > 0}wi∆x−
i ∆y− = 1{wi∆xi < 0}wi∆x+
i ∆y− = 1{wi∆xi < 0}wi∆x−

i

i

i

i

We can then ﬁnd multipliers using the deﬁnition in Section
3.2.1, which gives m∆x+
i ∆y+ = 1{wi∆xi >
0}wi and m∆x+

i ∆y− = 1{wi∆xi < 0}wi.

i ∆y− = m∆x−

i ∆y+ = m∆x−

i and ∆x−

What about when ∆xi = 0? While setting multipliers to 0
in this case would be consistent with summation-to-delta,
it is possible that ∆x+
i are nonzero (and cancel
each other out), in which case setting the multiplier to 0
would fail to propagate importance to them. To avoid this,
i ∆y− = 0.5wi when ∆xi is 0
we set m∆x+
(similarly for ∆x−). See Appendix B for how to compute
these multipliers using standard neural network ops.

i ∆y+ = m∆x+

3.5.2. THE RESCALE RULE

This rule applies to nonlinear transformations that take a
single input, such as the ReLU, tanh or sigmoid operations.
Let neuron y be a nonlinear transformation of its input x
such that y = f (x). Because y has only one input, we
have by summation-to-delta that C∆x∆y = ∆y, and conse-
quently m∆x∆y = ∆y
∆x . For the Rescale rule, we set ∆y+
and ∆y− proportional to ∆x+ and ∆x− as follows:

∆y+ =

∆x+ = C∆x+∆y+

∆y− =

∆x− = C∆x−∆y−

∆y
∆x
∆y
∆x

Based on this, we get:

m∆x+∆y+ = m∆x−∆y− = m∆x∆y =

∆y
∆x

In the case where x → x0, we have ∆x → 0 and ∆y → 0.
The deﬁnition of the multiplier approaches the derivative,
i.e. m∆x∆y → dy
dx is evaluated at x = x0.
We can thus use the gradient instead of the multiplier when
x is close to its reference to avoid numerical instability is-
sues caused by having a small denominator.

dx , where the dy

Note that the Rescale rule addresses both the saturation
and the thresholding problems illustrated in Fig. 1 and
2 = 0, then
Fig. 2.
at i1 + i2 > 1 we have ∆h = −1 and ∆y = 1, giving

In the case of Fig. 1, if i0

1 = i0

DeepLIFT: Learning Important Features Through Propagating Activation Differences

∆h = −1 even though dy

m∆h∆y = ∆y
dh = 0 (in other words,
using difference-from-reference allows information to ﬂow
even when the gradient is zero). In the case of Fig. 2, as-
suming x0 = y0 = 0, at x = 10 + (cid:15) we have ∆y = (cid:15),
giving m∆x∆y = (cid:15)
10+(cid:15) and C∆x∆y = ∆x × m∆x∆y = (cid:15).
By contrast, gradient×input assigns a contribution of 10+(cid:15)
to x and −10 to the bias term (DeepLIFT never assigns im-
portance to bias terms).

As revealed in previous work (Lundberg & Lee, 2016),
there is a connection between DeepLIFT and Shapely val-
ues. Brieﬂy,
the Shapely values measure the average
marginal effect of including an input over all possible or-
derings in which inputs can be included. If we deﬁne “in-
cluding” an input as setting it to its actual value instead of
its reference value, DeepLIFT can be thought of as a fast
approximation of the Shapely values. At the time, Lund-
berg & Lee cited a preprint of DeepLIFT which described
only the Linear and Rescale rules with no separate treat-
ment of positive and negative contributions.

3.5.3. AN IMPROVED APPROXIMATION OF THE

SHAPELY VALUES: THE REVEALCANCEL RULE

While the Rescale rule improves upon simply using gra-
dients, there are still some situations where it can provide
misleading results. Consider the min(i1, i2) operation de-
picted in Fig. 3, with reference values of i1 = 0 and i2 = 0.
Using the Rescale rule, all importance would be assigned
either to i1 or to i2 (whichever is smaller). This can obscure
the fact that both inputs are relevant for the min operation.

the multiplier m∆h1∆h2 is ∆h2
∆h1

To understand why this occurs, consider the case when
i1 > i2. We have h1 = (i1 − i2) > 0 and h2 =
max(0, h1) = h1. By the Linear rule, we calculate that
C∆i1∆h1 = i1 and C∆i2∆h1 = −i2. By the Rescale
= 1, and thus
rule,
C∆i1∆h2 = m∆h1∆h2 C∆i1∆h1 = i1 and C∆i2∆h2 =
m∆h1∆h2 C∆i2∆h1 = −i2. The total contribution of i1 to
the output o becomes (i1 − C∆i1∆h2) = (i1 − i1) = 0,
and the total contribution of i2 to o is −C∆i2∆h2 = i2.
This calculation is misleading as it discounts the fact that
C∆i2∆h2 would be 0 if i1 were 0 - in other words, it ig-
nores a dependency induced between i1 and i2 that comes
from i2 canceling out i1 in the nonlinear neuron h2. A
similar failure occurs when i1 < i2; the Rescale rule re-
sults in C∆i1∆o = i1 and C∆i2∆o = 0. Note that gra-
dients, gradient×input, Guided Backpropagation and inte-
grated gradients would also assign all importance to either
i1 or i2, because for any given input the gradient is zero for
one of i1 or i2 (see Appendix C for a detailed calculation).

One way to address this is by treating the positive and
negative contributions separately. We again consider the
nonlinear neuron y = f (x).
Instead of assuming that
∆y+ and ∆y− are proportional to ∆x+ and ∆x− and that

1
2
1
2
1
2
1
2
C∆x+y+
∆x+ =

m∆x+∆y+ = m∆x−∆y− = m∆x∆y (as is done for the
Rescale rule), we deﬁne them as follows:
(cid:0)f (x0 + ∆x+) − f (x0)(cid:1)

∆y+ =

+

(cid:0)f (x0 + ∆x− + ∆x+) − f (x0 + ∆x−)(cid:1)

∆y− =

(cid:0)f (x0 + ∆x−) − f (x0)(cid:1)

+

(cid:0)f (x0 + ∆x+ + ∆x−) − f (x0 + ∆x+)(cid:1)

m∆x+∆y+ =

∆y+
∆x+ ; m∆x−∆y− =

∆y−
∆x−

In other words, we set ∆y+ to the average impact of ∆x+
after no terms have been added and after ∆x− has been
added, and we set ∆y− to the average impact of ∆x− after
no terms have been added and after ∆x+ has been added.
This can be thought of as the Shapely values of ∆x+ and
∆x− contributing to y.

By considering the impact of the positive terms in the ab-
sence of negative terms, and the impact of negative terms
in the absence of positive terms, we alleviate some of the
issues that arise from positive and negative terms canceling
each other out. In the case of Fig. 3, RevealCancel would
assign a contribution of 0.5 min(i1, i2) to both inputs (see
Appendix C for a detailed calculation).

While the RevealCancel rule also avoids the saturation and
thresholding pitfalls illustrated in Fig. 1 and Fig. 2, there
are some circumstances where we might prefer to use the
Rescale rule. Speciﬁcally, consider a thresholded ReLU
where ∆y > 0 iff ∆x ≥ b. If ∆x < b merely indicates
noise, we would want to assign contributions of 0 to both
∆x+ and ∆x− (as done by the Rescale rule) to mitigate the
noise. RevealCancel may assign nonzero contributions by
considering ∆x+ in the absence of ∆x− and vice versa.

Figure 3. Network computing o = min(i1, i2). Assume i0
1 =
2 = 0. When i1 < i2 then dy
i0
= 0, and when i2 < i1 then
di2
do
= 0. Using any of the backpropagation approaches described
di1
in Section 2.2 would result in importance assigned either exclu-
sively to i1 or i2. With the RevealCancel rule, the net assigns
0.5 min(i1, i2) importance to both inputs.

3.6. Choice of Target Layer

In the case of softmax or sigmoid outputs, we may pre-
fer to compute contributions to the linear layer preceding
the ﬁnal nonlinearity rather than the ﬁnal nonlinearity it-
self. This would be to avoid an attentuation caused by the

DeepLIFT: Learning Important Features Through Propagating Activation Differences

Sxidiff > 0. We then evaluate the change in the log-odds
score between classes co and ct for the original image and
the image with the pixels erased.

As shown in Fig. 4, DeepLIFT with the RevealCancel rule
outperformed the other backpropagation-based methods.
Integrated gradients (Section 2.2.3) computed numerically
over either 5 or 10 intervals produced results comparable
to each other, suggesting that adding more intervals would
not change the result. Integrated gradients also performed
comparably to gradient*input, suggesting that saturation
and thresholding failure modes are not common on MNIST
data. Guided Backprop discards negative gradients during
backpropagation, perhaps explaining its poor performance
at discriminating between classes. We also explored using
the Rescale rule instead of RevealCancel on various layers
and found that it degraded performance (Appendix E).

1 = x0

summation-to-delta property described in Section 3.1. For
example, consider a sigmoid output o = σ(y), where y is
the logit of the sigmoid function. Assume y = x1 + x2,
where x0
2 = 0. When x1 = 50 and x2 = 0, the
output o saturates at very close to 1 and the contributions
of x1 and x2 are 0.5 and 0 respectively. However, when
x1 = 100 and x2 = 100, the output o is still very close
to 0, but the contributions of x1 and x2 are now both 0.25.
This can be misleading when comparing scores across dif-
ferent inputs because a stronger contribution to the logit
would not always translate into a higher DeepLIFT score.
To avoid this, we compute contributions to y rather than o.

Adjustments for Softmax Layers

If we compute contributions to the linear layer preceding
the softmax rather than the softmax output, an issue that
could arise is that the ﬁnal softmax output involves a nor-
malization over all classes, but the linear layer before the
softmax does not. To address this, we can normalize the
contributions to the linear layer by subtracting the mean
contribution to all classes. Formally, if n is the number of
classes, C∆x∆ci represents the unnormalized contribution
to class ci in the linear layer and C (cid:48)
represents the
normalized contribution, we have:

∆x∆ci

C (cid:48)

∆x∆ci

= C∆x∆ci −

C∆x∆cj

(5)

1
n

n
(cid:88)

j=1

As a justiﬁcation for this normalization, we note that sub-
tracting a ﬁxed value from all the inputs to the softmax
leaves the output of the softmax unchanged.

4. Results

4.1. Digit Classiﬁcation (MNIST)

We train a convolutional neural network on MNIST (Le-
Cun et al., 1999) using Keras (Chollet, 2015) to perform
digit classiﬁcation and obtain 99.2% test-set accuracy. The
architecture consists of two convolutional layers, followed
by a fully connected layer, followed by the softmax output
layer (see Appendix D for full details on model architec-
ture and training). We used convolutions with stride > 1
instead of pooling layers, which did not result in a drop in
performance as is consistent with previous work (Springen-
berg et al., 2014). For DeepLIFT and integrated gradients,
we used a reference input of all zeros.

To evaluate importance scores obtained by different meth-
ods, we design the following task: given an image that orig-
inally belongs to class co, we identify which pixels to erase
to convert the image to some target class ct. We do this by
ﬁnding Sxidiff = Sxico − Sxict (where Sxic is the score for
pixel xi and class c) and erasing up to 157 pixels (20% of
the image) ranked in descending order of Sxidiff for which

Figure 4. DeepLIFT with the RevealCancel rule better identi-
ﬁes pixels to convert one digit to another. Top: result of mask-
ing pixels ranked as most important for the original class (8) rela-
tive to the target class (3 or 6). Importance scores for class 8, 3 and
6 are also shown. The selected image had the highest change in
log-odds scores for the 8→6 conversion using gradient*input or
integrated gradients to rank pixels. Bottom: boxplots of increase
in log-odds scores of target vs. original class after the mask is ap-
plied, for 1K images belonging to the original class in the testing
set. “Integrated gradients-n” refers to numerically integrating the
gradients over n evenly-spaced intervals using the midpoint rule.

DeepLIFT: Learning Important Features Through Propagating Activation Differences

Figure 5. DeepLIFT with RevealCancel gives qualitatively desirable behavior on TAL-GATA simulation. (a) Scatter plots of im-
portance score vs. strength of TAL1 motif match for different tasks and methods (see Appendix G for GATA1). For each region, top 5
motif matches are plotted. X-axes: log-odds of TAL1 motif match vs. background. Y-axes: total importance assigned to the match for
speciﬁed task. Red dots are from regions where both TAL1 and GATA1 motifs were inserted during simulation; blue have GATA1 only,
green have TAL1 only, black have no motifs inserted. “DeepLIFT-fc-RC-conv-RS” refers to using RevealCancel on the fully-connected
layer and Rescale on the convolutional layers, which appears to reduce noise relative to using RevealCancel on all layers. (b) proportion
of strong matches (log-odds > 7) to TAL1 motif in regions containing both TAL1 and GATA1 that had total score ≤ 0 for task 0; Guided
Backprop×inp and DeepLIFT with RevealCancel have no false negatives, but Guided Backprop has false positives for Task 1 (Panel (a))

4.2. Classifying Regulatory DNA (Genomics)

Next, we compared the importance scoring methods when
applied to classiﬁcation tasks on DNA sequence inputs
(strings over the alphabet {A,C,G,T}). The human genome
has millions of DNA sequence elements ( 200-1000 in
length) containing speciﬁc combinations of short func-
tional words to which regulatory proteins (RPs) bind to
regulate gene activity. Each RP (e.g. GATA1) has binding
afﬁnity to speciﬁc collections of short DNA words (mo-
tifs) (e.g. GATAA and GATTA). A key problem in compu-
tational genomics is the discovery of motifs in regulatory
DNA elements that give rise to distinct molecular signa-
tures (labels) which can be measured experimentally. Here,
in order to benchmark DeepLIFT and competing methods
to uncover predictive patterns in DNA sequences, we de-
sign a simple simulation that captures the essence of the
motif discovery problem described above.

Background DNA sequences of length 200 were gener-
ated by sampling the letters ACGT at each position with

probabilities 0.3, 0.2, 0.2 and 0.3 respectively. Motif in-
stances were randomly sampled from previously known
probabilistic motif models (See Appendix F) of two RPs
named GATA1 and TAL1 (Fig. 6a)(Kheradpour & Kel-
lis, 2014), and 0-3 instances of a given motif were in-
serted at random non-overlapping positions in the DNA se-
quences. We trained a multi-task neural network with two
convolutional layers, global average pooling and one fully-
connected layer on 3 binary classiﬁcation tasks. Positive
labeled sequences in task 1 represented “both GATA1 and
TAL1 present”, task 2 represented “GATA1 present” and
in task 3 represented “TAL1 present”. 1
4 of sequences had
both GATA1 and TAL1 motifs (labeled 111), 1
4 had only
GATA1 (labeled 010), 1
4 had only TAL1 (labeled 001), and
1
4 had no motifs (labeled 000). Details of the simulation,
network architecture and predictive performance are given
in Appendix F. For DeepLIFT and integrated gradients,
we used a reference input that had the expected frequencies
of ACGT at each position (i.e. we set the ACGT channel
axis to 0.3, 0.2, 0.2, 0.3; see Appendix J for results using

DeepLIFT: Learning Important Features Through Propagating Activation Differences

Gradient×inp, integrated gradients and DeepLIFT-Rescale
occasionally miss relevance of TAL1 for Task 0 (Fig. 5b),
which is corrected by using RevealCancel on the fully con-
nected layer (see example sequence in Fig. 6). Note that
the RevealCancel scores seem to be tiered. As illustrated
in Appendix I, this is related to having multiple instances
of a given motif in a sequence (eg: when there are multiple
TAL1 motifs, the importance assigned to the presence of
TAL1 is distributed across all the motifs).

shufﬂed sequences as a reference). For fair comparison,
this reference was also used for gradient×input and Guided
Backprop×input (“input” is more accurately called ∆input
where ∆ measured w.r.t the reference). For DNA sequence
inputs, we found Guided Backprop×input performed better
than vanilla Guided Backprop; thus, we used the former.

Given a particular subsequence, it is possible to compute
the log-odds score that the subsequence was sampled from
a particular motif vs. originating from the background
distribution of ACGT. To evaluate different importance-
scoring methods, we found the top 5 matches (as ranked
by their log-odds score) to each motif for each sequence
from the test set, as well as the total importance allocated
to the match by different importance-scoring methods for
each task. The results are shown in Fig. 5 (for TAL1) and
Appendix E (for GATA1). Ideally, we expect an impor-
tance scoring method to show the following properties: (1)
high scores for TAL1 motifs on task 2 and (2) low scores
for TAL1 on task 1, with (3) higher scores corresponding to
stronger log-odds matches; analogous pattern for GATA1
motifs (high for task 1, low for task 2); (4) high scores for
both TAL1 and GATA1 motifs for task 0, with (5) higher
scores on sequences containing both kinds of motifs vs. se-
quences containing only one kind (revealing cooperativity;
corresponds to red dots lying above green dots in Fig. 5).

We observe Guided Backprop×input fails (2) by assigning
positive importance to TAL1 on task 1 (see Appendix H
for an example sequence). It fails property (4) by failing
to identify cooperativity in task 0 (red dots overlay green
dots). Both Guided Backprop×input and gradient×input
show suboptimal behavior regarding property (3), in that
there is a sudden increase in importance when the log-odds
score is around 7, but little differentiation at higher log-
odds scores (by contrast, the other methods show a more
gradual increase). As a result, Guided Backprop×input and
gradient×input can assign unduly high importance to weak
motif matches (Fig. 6). This is a practical consequence of
the thresholding problem from Fig. 2. The large discontin-
uous jumps in gradient also result in inﬂated scores (note
the scale on the y-axes) relative to other methods.

We explored three versions of DeepLIFT: Rescale at all
nonlinearities (DeepLIFT-Rescale), RevealCancel at all
nonlinearities (DeepLIFT-RevealCancel), and Rescale at
convolutional layers with RevealCancel at the fully con-
nected layer (DeepLIFT-fc-RC-conv-RS). In contrast to the
results on MNIST, we found that DeepLIFT-fc-RC-conv-
RS reduced noise relative to pure RevealCancel. We think
this is because of the noise-suppression property discussed
in Section 3.5.3; if the convolutional layers act like mo-
tif detectors, the input to convolutional neurons that do not
ﬁre may just represent noise and importance should not be
propagated to them (see Fig. 6 for an example sequence).

Figure 6. RevealCancel highlights both TAL1 and GATA1 mo-
tifs for Task 0. (a) PWM representations of the GATA1 motif
and TAL1 motif used in the simulation (b) Scores for example se-
quence containing both TAL1 and GATA1 motifs. Letter height
reﬂects the score. Blue box is location of embedded GATA1 mo-
tif, green box is location of embedded TAL1 motif. Red underline
is chance occurrence of weak match to TAL1 (CAGTTG instead
of CAGATG). Both TAL1 and GATA1 motifs should be high-
lighted for Task 0. RevealCancel on only the fully-connected
layer reduces noise compared to RevealCancel on all layers.

5. Conclusion

We have presented DeepLIFT, a novel approach for com-
puting importance scores based on explaining the differ-
ence of the output from some ‘reference’ output in terms
of differences of the inputs from their ‘reference’ inputs.
Using the difference-from-reference allows information to
propagate even when the gradient is zero (Fig. 1), which
could prove especially useful in Recurrent Neural Net-
works where saturating activations like sigmoid or tanh are
popular. DeepLIFT avoids placing potentially misleading
importance on bias terms (in contrast to gradient*input -
see Fig. 2). By allowing separate treatment of positive and
negative contributions, the DeepLIFT-RevealCancel rule
can identify dependencies missed by other methods (Fig.
3). Open questions include how to apply DeepLIFT to
RNNs, how to compute a good reference empirically from
the data, and how best to propagate importance through
‘max’ operations (as in Maxout or Maxpooling neurons)
beyond simply using the gradients.

DeepLIFT: Learning Important Features Through Propagating Activation Differences

Zeiler, Matthew D. and Fergus, Rob.

Visualizing
CoRR,
and understanding convolutional networks.
abs/1311.2901, 2013. URL http://arxiv.org/
abs/1311.2901.

Zhou, Jian and Troyanskaya, Olga G. Predicting effects of
noncoding variants with deep learning-based sequence
model. Nat Methods, 12:931–4, 2015 Oct 2015. ISSN
1548-7105. doi: 10.1038/nmeth.3547.

Zintgraf, Luisa M, Cohen, Taco S, Adel, Tameem,
Visualizing deep neural net-
ICLR,
URL https://openreview.net/pdf?

and Welling, Max.
work decisions: Prediction difference analysis.
2017.
id=BJ5UeU9xx.

6. Acknowledgements

We thank Anna Shcherbina for early experiments applying
DeepLIFT to image data and beta-testing.

7. Funding

AS is supported by a Howard Hughes Medical Institute
International Student Research Fellowship and a Bio-X
Bowes Fellowship. PG is supported by a Bio-X Stanford
Interdisciplinary Graduate Fellowship. AK was supported
by NIH grants DP2-GM-123485 and 1R01ES025009-02.

8. Author Contributions

AS & PG conceptualized DeepLIFT. AS implemented
DeepLIFT. AS ran experiments on MNIST. AS & PG ran
experiments on genomic data. AK provided guidance and
feedback. AS, PG and AK wrote the manuscript.

References

Bach, Sebastian, Binder, Alexander, Montavon, Gr´egoire,
Klauschen, Frederick, M¨uller, Klaus-Robert,
and
Samek, Wojciech. On Pixel-Wise explanations for
Non-Linear classiﬁer decisions by Layer-Wise relevance
propagation. PLoS One, 10(7):e0130140, 10 July 2015.

Chollet, Franois.

keras.

https://github.com/

fchollet/keras, 2015.

Kheradpour, Pouya and Kellis, Manolis. Systematic dis-
covery and characterization of regulatory motifs in en-
code tf binding experiments. Nucleic acids research, 42
(5):2976–2987, 2014.

Kindermans, Pieter-Jan, Schtt, Kristof, Mller, Klaus-
Robert, and Dhne, Sven. Investigating the inﬂuence of
noise and distractors on the interpretation of neural net-
works. CoRR, abs/1611.07270, 2016. URL https:
//arxiv.org/abs/1611.07270.

LeCun, Yann, Cortes, Corinna, and Burges, Christo-
The mnist database of handwritten dig-
http://yann.lecun.com/exdb/mnist/,

pher J.C.
its.
1999.

Lundberg, Scott and Lee, Su-In. An unexpected unity
interpreting model predictions.
among methods for
CoRR, abs/1611.07478, 2016. URL http://arxiv.
org/abs/1611.07478.

Selvaraju, Ramprasaath R., Das, Abhishek, Vedantam, Ra-
makrishna, Cogswell, Michael, Parikh, Devi, and Ba-
tra, Dhruv. Grad-cam: Why did you say that? visual
explanations from deep networks via gradient-based lo-
calization. CoRR, abs/1610.02391, 2016. URL http:
//arxiv.org/abs/1610.02391.

Shrikumar, Avanti, Greenside, Peyton, Shcherbina, Anna,
and Kundaje, Anshul. Not just a black box: Learning
important features through propagating activation differ-
ences. arXiv preprint arXiv:1605.01713, 2016.

Simonyan, Karen, Vedaldi, Andrea, and Zisserman, An-
drew. Deep inside convolutional networks: Visualising
image classiﬁcation models and saliency maps. arXiv
preprint arXiv:1312.6034, 2013.

Springenberg, Jost Tobias, Dosovitskiy, Alexey, Brox,
Thomas, and Riedmiller, Martin A. Striving for simplic-
ity: The all convolutional net. CoRR, abs/1412.6806,
URL http://arxiv.org/abs/1412.
2014.
6806.

Sundararajan, Mukund, Taly, Ankur, and Yan, Qiqi. Gra-
dients of counterfactuals. CoRR, abs/1611.02639, 2016.
URL http://arxiv.org/abs/1611.02639.

