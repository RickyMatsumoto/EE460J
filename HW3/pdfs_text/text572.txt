Supplementary Material for “Relative Fisher Information
and Natural Gradient for Learning Large Modular Models”

Ke Sun and Frank Nielsen

Contents

1 Non-linear Activation Functions

2 Examples of RFIMs

2.1 A Single tanh Neuron . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 A Single sigm Neuron . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.3 A Single relu Neuron . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.4 A Single elu Neuron . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.5 RFIM of a Linear Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.6 RFIM of a Non-Linear Layer
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.7 RFIM of a Softmax Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.8 RFIM of Two layers

3 Proof of Theorem 3

4 Experimental Settings & Zoomed Learning Curves

1 Non-linear Activation Functions

By deﬁnition,

and

tanh(t) def=

exp(t) − exp(−t)
exp(t) + exp(−t)

,

sech(t) def=

2
exp(t) + exp(−t)

.

It is easy to verify that

sech2(t) = [1 + tanh(t)] [1 − tanh(t)] = 1 − tanh2(t).

1

1

2
3
4
5
5
5
6
7
7

8

8

(1)

By eq. (1),

tanh(cid:48)(t) =

By deﬁnition,

Therefore

exp(t) − exp(−t)
[exp(t) + exp(−t)]2 [exp(t) − exp(−t)]

−

exp(t) + exp(−t)
exp(t) + exp(−t)
[exp(t) + exp(−t)]2 − [exp(t) − exp(−t)]2
[exp(t) + exp(−t)]2

=

4

=

[exp(t) + exp(−t)]2 = sech2(t).

sigm(t) def=

1
1 + exp(−t)

.

sigm(cid:48)(t) = −

1

[1 + exp(−t)]2 (− exp(−t)) =

[1 + exp(−t)]2 = sigm(t) [1 − sigm(t)] .

exp(−t)

A smoothed version of the relu function is given by

reluω(t) def= ω ln

exp

(cid:18)

(cid:19)

(cid:18) ιt
ω

+ exp

(cid:19)(cid:19)

,

(cid:18) t
ω

where ω > 0 and 0 ≤ ι < 1. Then,

relu(cid:48)

ω(t) = ω

(cid:18) ι
ω

exp

+

exp

(cid:19)

(cid:18) ιt
ω

1
ω

(cid:19)(cid:19)

(cid:18) t
ω

ω

exp (cid:0) ιt
ι exp (cid:0) ιt
exp (cid:0) ιt

ω

ω

=

= ι + (1 − ι)

= ι + (1 − ι)

1

ω

(cid:1)

(cid:1) + exp (cid:0) t
(cid:1) + exp (cid:0) t
(cid:1)
ω
(cid:1)
(cid:1) + exp (cid:0) t
exp (cid:0) t
(cid:1)
(cid:1) + exp (cid:0) t

exp (cid:0) ιt

ω

ω

ω

(cid:1)

ω

1

exp (cid:0)(ι − 1) t
(cid:18) 1 − ι
ω

t

(cid:1) + 1
ω
(cid:19)

.

= ι + (1 − ι)sigm

By deﬁnition,

Therefore

(cid:26) t

elu(t) =

α (exp(t) − 1)

if t ≥ 0
if t < 0.

(cid:26) 1

elu(cid:48)(t) =

α exp(t)

if t ≥ 0
if t < 0.

2 Examples of RFIMs

Table 1 shows a list of commonly used RFIMs, with detailed derivations given in the following
subsections.

(2)

(3)

2

Table 1: Commonly used RFIMs

A tanh neuron
A sigm neuron
A relu neuron

Subsystem the RFIM gy(w)
sech2(w(cid:124) ˜x) ˜x ˜x(cid:124)
sigm(w(cid:124) ˜x) [1 − sigm(w(cid:124) ˜x)] ˜x ˜x(cid:124)
(cid:2)ι + (1 − ι)sigm (cid:0) 1−ι
ω w(cid:124) ˜x(cid:1)(cid:3)2 ˜x ˜x(cid:124)
(cid:26) ˜x ˜x(cid:124)

A elu neuron

(α exp(w(cid:124) ˜x))2 ˜x ˜x(cid:124)

if w(cid:124) ˜x ≥ 0
if w(cid:124) ˜x < 0

A linear layer
A non-linear layer
A soft-max layer
Two layers

diag [ ˜x ˜x(cid:124), · · · , ˜x ˜x(cid:124)]
diag [νf (w1, ˜x) ˜x ˜x(cid:124), · · · , νf (wm, ˜x) ˜x ˜x(cid:124)]
a dense matrix as shown in eq. (10)
a dense matrix as shown in eq. (12)

2.1 A Single tanh Neuron

Consider a neuron with parameters w and a Bernoulli output y ∈ {+, −}, p(y = +) = p+,
p(y = −) = p−, and p+ + p− = 1. By the deﬁnition of RFIM, we have
gy(w) = p+ ∂ ln p+
∂w
∂p+
1
p+
∂w

∂w(cid:124) + p− ∂ ln p−
∂w
∂p−
∂w(cid:124) .

∂p+
∂w(cid:124) +

∂ ln p−
∂w(cid:124)

∂p−
∂w

∂ ln p+

1
p−

=

Since p+ + p− = 1,

∂p+
∂w

+

∂p−
∂w

= 0.

Therefore, the RFIM of a Bernoulli neuron has the general form
(cid:18) 1

1
p−

(cid:19) ∂p+
∂w

∂p+
∂w(cid:124) =

1
p+p−

∂p+
∂w

∂p+
∂w(cid:124) .

p+ +

gy(w) =

A single tanh neuron with stochastic output y ∈ {−1, 1} is given by

By eq. (4),

p(y = −1) =

p(y = 1) =

1 − µ(x)
2
1 + µ(x)
2

,

,

µ(x) = tanh(w(cid:124) ˜x).

(cid:19)

(cid:19) (cid:18) 1
2

∂µ
∂w(cid:124)

(cid:2)1 − µ2(x)(cid:3)2

˜x ˜x(cid:124)

gy(w) =

(cid:18) 1
2

∂µ
∂w

1
1+µ(x)
1−µ(x)
2
2
1
(1 − µ(x)) (1 + µ(x))

=

= (cid:2)1 − µ2(x)(cid:3) ˜x ˜x(cid:124)
= (cid:2)1 − tanh2(w(cid:124) ˜x)(cid:3) ˜x ˜x(cid:124)
= sech2(w(cid:124) ˜x) ˜x ˜x(cid:124).

3

(4)

(5)

(6)

(7)

(ﬁrst linear term vanishes)

The intuitive meaning of gy(w) is a weighted covariance to emphasize such “informative” x’s

An alternative analysis is given as follows. By eqs. (5) to (7),

p(y = −1) =

p(y = 1) =

exp(−w(cid:124) ˜x)
exp(w(cid:124)x) + exp(−w(cid:124)x)
exp(w(cid:124) ˜x)
exp(w(cid:124) ˜x) + exp(−w(cid:124) ˜x)

,

.

Then,

gy(w) = Ey∼p(y | x)

(cid:19)

(cid:18)

−

=

∂2

∂2 ln p(y)
∂w∂w(cid:124)
∂w∂w(cid:124) ln [exp(w(cid:124) ˜x) + exp(−w(cid:124) ˜x)]
(cid:20) exp(w(cid:124) ˜x) − exp(−w(cid:124) ˜x)
∂
˜x
exp(w(cid:124) ˜x) + exp(−w(cid:124) ˜x)
∂w(cid:124)
∂
∂w(cid:124) tanh(w(cid:124) ˜x) ˜x
=
= sech2(w(cid:124) ˜x) ˜x ˜x(cid:124).

=

(cid:21)

that

• are in the linear region of tanh

• contain “ambiguous” samples

2.2 A Single sigm Neuron

A single sigm neuron is given by

We will need at least dim(w) samples to make gy(w) full rank.

p(y = 0) = 1 − µ(x),

p(y = 1) = µ(x),

µ(x) = sigm(w(cid:124) ˜x).

By eq. (4),

gy(w) =

∂p(y = 1)
∂w(cid:124)

=

∂µ
∂w

∂p(y = 1)
∂w
∂µ
∂w(cid:124)

1
p(y = 0)p(y = 1)
1
µ(x)(1 − µ(x))
1
µ(x)(1 − µ(x))
= µ(x)(1 − µ(x)) ˜x ˜x(cid:124)
= sigm(w(cid:124) ˜x) [1 − sigm(w(cid:124) ˜x)] ˜x ˜x(cid:124).

=

µ2(x)(1 − µ(x))2 ˜x ˜x(cid:124)

4

(8)

2.3 A Single relu Neuron

Consider a single neuron with Gaussian output p(y | w, x) = G(y | µ(w, x), σ2). Then

gy(w | x) = Ep(y | w,x)

= Ep(y | w,x)

(cid:21)

∂ ln G(y | µ, σ2)
∂w(cid:124)
(cid:19) ∂

(cid:18)

(cid:18)

(cid:20) ∂ ln G(y | µ, σ2)
∂w
1
2σ2 (y − µ)2
(cid:19)2 ∂µ
∂w

(cid:20) ∂
∂w
(cid:34)(cid:18)

−

−

∂w(cid:124)
(cid:35)

∂µ
∂w(cid:124)

−

1
2σ2 (y − µ)2

(cid:19)(cid:21)

= Ep(y | w,x)

1
σ2 (µ − y)
σ4 Ep(y | w,x) (µ − y)2 ∂µ

∂w

1

=

∂µ
∂w(cid:124)

=

1
σ2

∂µ
∂w

∂µ
∂w(cid:124) .

We set σ = 1 to get rid of a scale parameter of the RFIM. We get

A single relu neuron is given by

By eqs. (2) and (8),

gy(w | x) =

∂µ
∂w

∂µ
∂w(cid:124) .

µ(w, x) = reluω(w(cid:124) ˜x).

(cid:20)

gy(w) =

ι + (1 − ι)sigm

(cid:18) 1 − ι
ω

(cid:19)(cid:21)2

w(cid:124) ˜x

˜x ˜x(cid:124).

2.4 A Single elu Neuron

Similar to the analysis in Subsec. 2.3, a single elu neuron is given by

By eq. (3),

By eq. (8),

µ(w, x) = elu(w(cid:124) ˜x).

∂µ
∂w

=

(cid:26) ˜x

if w(cid:124) ˜x ≥ 0
α exp(w(cid:124) ˜x) ˜x if w(cid:124) ˜x < 0.

(cid:26) ˜x ˜x(cid:124)

gy(w) =

(α exp(w(cid:124) ˜x))2 ˜x ˜x(cid:124)

if w(cid:124) ˜x ≥ 0
if w(cid:124) ˜x < 0.

2.5 RFIM of a Linear Layer

Consider a linear layer

p(y) = G (cid:0)y | W (cid:124) ˜x, σ2I(cid:1) ,

where W = (w1, · · · , wDy ). By the deﬁnition of the multivariate Gaussian distribution,

ln p(y) = −

ln 2π −

ln σ2 −

1
2

Dy
2

1
2σ2

Dy
(cid:88)

i=1

(yi − w

(cid:124)

i ˜x)2 .

5

Therefore,

Therefore,

∀i,

ln p(y) = −

1
σ2 (w

(cid:124)
i ˜x − yi) ˜x.

∂
∂wi

∂
(cid:124)
∂w
j

∀i, ∀j

ln p(y)

ln p(y) =

∂
∂wi

1
σ4 (yi − w

(cid:124)

i ˜x) (cid:0)yj − w

(cid:124)

j ˜x(cid:1) ˜x ˜x(cid:124).

W is vectorized by stacking its columns {wi}Dy
i=1. In the following W will be used interchangeably
to denote either the matrix or its vector form. Correspondingly, the RFIM gy(W ) has Dy × Dy
blocks, where the oﬀ-diagonal blocks are

∀i (cid:54)= j, Ep(y)

ln p(y)

ln p(y)

=

(cid:32)

∂
∂wi

∂
∂w

(cid:124)
j

(cid:33)

1
σ4 Ep(y)

(cid:2)(yi − w

(cid:124)

i ˜x) (cid:0)yj − w

(cid:124)

j ˜x(cid:1)(cid:3) ˜x ˜x(cid:124) = 0,

and the diagonal blocks are

∀i, Ep(y)

ln p(y)

ln p(y)

=

(cid:18) ∂
∂wi

∂
(cid:124)
∂w
i

(cid:19)

1
σ4 Ep(y) (yi − w

(cid:124)

i ˜x)2 ˜x ˜x(cid:124) =

1
σ2

˜x ˜x(cid:124).

In summary,

By setting σ = 1 we get

gy(W ) =

1
σ2 diag [ ˜x ˜x(cid:124), · · · , ˜x ˜x(cid:124)] .

gy(W ) = diag [ ˜x ˜x(cid:124), · · · , ˜x ˜x(cid:124)] .

2.6 RFIM of a Non-Linear Layer

The statistical model of a non-linear layer with independent output units is

p(y | W , x) =

p(yi | wi, x).

ln p(y | W , x) =

ln p(yi | wi, x).

Then,

Therefore,

∂2

∂W ∂W (cid:124) ln p(y | W , x) =







∂2
(cid:124)
∂w1∂w
1

ln p(y1 | w1, x)

. . .







.

∂2

∂wDy ∂w

(cid:124)
Dy

ln p(yDy | wDy , x)

Therefore the RFIM gy(W ) is a block-diagonal matrix, with the i’th block given by

−Ep(y | W ,x)

(cid:20)

∂2
(cid:124)
∂wi∂w
i

(cid:21)
ln p(yi | wi, x)

= −Ep(yi | wi,x)

ln p(yi | wi, x)

,

(cid:21)

(cid:20)

∂2
∂wi∂w

(cid:124)
i

which is simply the single neuron RFIM of the i’th neuron.

Dy
(cid:89)

i=1

Dy
(cid:88)

i=1

6

2.7 RFIM of a Softmax Layer

Recall that

Then

Hence

∀i ∈ {1, · · · , m} ,

p(y = i) =

exp(wi ˜x)
i=1 exp(wi ˜x)

.

(cid:80)m

∀i,

ln p(y = i) = wi ˜x − ln

exp(wi ˜x).

m
(cid:88)

i=1

∀i, ∀j,

∂ ln p(y = i)
∂wj

= δij ˜x −

exp(wj ˜x)
i=1 exp(wi ˜x)

(cid:80)m

˜x,

where δij = 1 if and only if i = j and δij = 0 otherwise. Then

∀i, ∀j, ∀k,

∂2 ln p(y = i)
∂wj∂w

(cid:124)
k

(cid:80)m

= −δjk

exp(wj ˜x)
i=1 exp(wi ˜x)
= (−δjkηj + ηjηk) ˜x ˜x(cid:124).

˜x ˜x(cid:124) +

exp(wj ˜x)

i=1 exp(wi ˜x))2 exp(wk ˜x) ˜x ˜x(cid:124)

((cid:80)m

The right-hand-side of eq. (9) does not depend on i. Therefore

gy(W ) =








1) ˜x ˜x(cid:124)
(η1 − η2
−η2η1 ˜x ˜x(cid:124)
...
−ηmη1 ˜x ˜x(cid:124)

−η1η2 ˜x ˜x(cid:124)
2) ˜x ˜x(cid:124)
(η2 − η2
...
−ηmη2 ˜x ˜x(cid:124)

· · ·
· · ·
. . .
· · ·

−η1ηm ˜x ˜x(cid:124)
−η2ηm ˜x ˜x(cid:124)
...
(ηm − η2

m) ˜x ˜x(cid:124)








.

2.8 RFIM of Two layers

Consider a two layer structure, where the output y satisﬁes a multivariate Bernoulli distribution
with independent dimensions. By a similar analysis to Subsec. 2.1, we have

(9)

(10)

(11)

gy(W ) =

νf (cl, h)

Dy
(cid:88)

l=1

(cid:124)
∂c
l h
∂W

(cid:124)
∂c
l h
∂W (cid:124) .

It can be written block by block as gy(W ) = [Gij]Dh×Dh
, where each block Gij means the
correlation between the i’th hidden neuron with weights wi and the j’th hidden neuron with
weights wj. By eq. (11),

Gij =

νf (cl, h)

=

νf (cl, h)

∂cilhi
∂wi

∂cjlhj
(cid:124)
∂w
j

(cid:124)
∂c
l h
∂wi

∂c
∂w

(cid:124)
l h
(cid:124)
j

Dy
(cid:88)

l=1

∂hi
∂wi

∂hj
(cid:124)
∂w
j

=

Dy
(cid:88)

l=1

νf (cl, h)cilcjl

νf (cl, h)cilcjl (νf (wi, x) ˜x) (νf (wj, x) ˜x(cid:124))

cilcjlνf (cl, h)νf (wi, x)νf (wj, x) ˜x ˜x(cid:124).

(12)

Dy
(cid:88)

l=1
Dy
(cid:88)

l=1
Dy
(cid:88)

l=1

=

=

The proof of the other case, where two relu layers have stochastic output y satisfying a
multivariate Gaussian distribution with independent dimensions, is very similar and is omitted.

7

3 Proof of Theorem 3

Proof. By assumption, the joint distribution p(x, h) is in a factorable form. Therefore

log p(x, h) =

log p(hl | θl, rl),

(13)

L
(cid:88)

l=1

where l = 1, · · · , L is the index of subsystems, hl is the subsystem output, and rl is the reference
of the subsystem. We have (cid:85)L

l=1{θl} = {Θ}. Therefore

(cid:18)

Ep

−

∂2
∂θl∂θ

(cid:124)
l

log p(x, h)

= Ep

−

log p(hl | θl, rl)

(cid:19)

l=1{hl} = {x, h} and (cid:85)L
(cid:18)

(cid:19)

∂2
∂θl∂θ
(cid:18)

(cid:124)
l

= Ep(rl)

Ep(hl | rl)

−

log p(hl | θl, rl)

(cid:18)

∂2
∂θl∂θ

(cid:124)
l

(cid:19)(cid:19)

= Ep

(cid:0)ghl (θl)(cid:1) ,

and

(cid:32)

Ep

−

∂2
∂θl1∂θ

(cid:124)
l2

(cid:33)

log p(x, h)

= 0 (∀l1 (cid:54)= l2).

Based on the Hessian expression of RFIM, J (Θ) is in a block-diagonal form, with each block
given by Ep

(cid:0)ghl (θl)(cid:1).

4 Experimental Settings & Zoomed Learning Curves

The training/validation/testing sets have 50,000/10,000/10,000 images, respectively. Each sam-
ple is a gray scale image of size 28 × 28 (784 dimensional feature space) and is labeled as one of
ten diﬀerent classes. For all methods, the mini-batch size is ﬁxed to 50 and the L2 regularization
strength is ﬁxed to 10−3. For each optimizer, we try to ﬁnd the best learning rate in the range
{· · · , 10−1, 5 × 10−2, 10−2, 5 × 10−3, 10−3, · · · }. On the tested architectures, a good learning rate
conﬁguration for RNGD is usually around 10−2 or 5 × 10−3. The optimizers are in their default
settings in TensorFlow 1.0. For the Adam optimizer, β1 = 0.9, β2 = 0.999, (cid:15) = 10−8. For RNGD,
we set empirically T = 100, λ = 0.005 and ω = 1. We use the Glorot uniform initializer to set
the initial weights.

For each method and each learning rate conﬁguration, we try 40 independent runs with
diﬀerent random seeds. Then, we select the best conﬁguration based on the validation accuracy.
Then, we plot the 40 learning curves as well as the average validation curve. The learning curves
are obtained by evaluating the training error and validation accuracy after each epoch (one pass
over all available training data).

See the following ﬁgs. (1–4) for the learning curves on four diﬀerent architectures with relu
activation units and L2 regularization. Only the training curves and validation curves are shown
for a clear presentation. The testing accuracy is close to the validation accuracy (run our codes
to see the detailed results).

8

Figure 1: A MLP with shape 784–80–80–80–10.

9

0.9660.9680.9700.9720.9740.976accuracy020406080100#epochs0.100.150.200.250.300.350.40errorPLAIN+SGD (train)PLAIN+SGD (valid)PLAIN+ADAM (train)PLAIN+ADAM (valid)PLAIN+RNGD (train)PLAIN+RNGD (valid)Figure 2: A MLP with shape 784–80–80–80–10 and batch normalization after each hidden layer.

10

0.9700.9710.9720.9730.9740.9750.9760.9770.978accuracy020406080100#epochs0.10.20.30.40.5errorBNA+SGD (train)BNA+SGD (valid)BNA+ADAM (train)BNA+ADAM (valid)BNA+RNGD (train)BNA+RNGD (valid)Figure 3: A MLP with shape 784–100–100–100–10.

11

0.9660.9680.9700.9720.9740.9760.978accuracy020406080100#epochs0.100.150.200.250.300.350.40errorPLAIN+SGD (train)PLAIN+SGD (valid)PLAIN+ADAM (train)PLAIN+ADAM (valid)PLAIN+RNGD (train)PLAIN+RNGD (valid)Figure 4: A MLP with shape 784–100–100–100–10 and batch normalization after each hidden
layer.

12

0.9700.9720.9740.9760.978accuracy020406080100#epochs0.10.20.30.40.5errorBNA+SGD (train)BNA+SGD (valid)BNA+ADAM (train)BNA+ADAM (valid)BNA+RNGD (train)BNA+RNGD (valid)