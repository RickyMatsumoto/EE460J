Max-value Entropy Search for Efﬁcient Bayesian Optimization

Zi Wang 1 Stefanie Jegelka 1

Abstract

Entropy Search (ES) and Predictive Entropy
Search (PES) are popular and empirically suc-
cessful Bayesian Optimization techniques. Both
rely on a compelling information-theoretic mo-
tivation, and maximize the information gained
about the arg max of the unknown function; yet,
both are plagued by the expensive computation
for estimating entropies. We propose a new crite-
rion, Max-value Entropy Search (MES), that in-
stead uses the information about the maximum
function value. We show relations of MES to
other Bayesian optimization methods, and es-
tablish a regret bound. We observe that MES
maintains or improves the good empirical perfor-
mance of ES/PES, while tremendously lighten-
ing the computational burden. In particular, MES
is much more robust to the number of samples
used for computing the entropy, and hence more
efﬁcient for higher dimensional problems.

1. Introduction

Bayesian optimization (BO) has become a popular and ef-
fective way for black-box optimization of nonconvex, ex-
pensive functions in robotics, machine learning, computer
vision, and many other areas of science and engineering
(Brochu et al., 2009; Calandra et al., 2014; Krause & Ong,
2011; Lizotte et al., 2007; Snoek et al., 2012; Thornton
et al., 2013; Wang et al., 2017). In BO, a prior is posed on
the (unknown) objective function, and the uncertainty given
by the associated posterior is the basis for an acquisition
function that guides the selection of the next point to query
the function. The selection of queries and hence the acqui-
sition function is critical for the success of the method.

Different BO techniques differ in this acquisition function.

1Computer Science and Artiﬁcial Intelligence Laboratory,
Massachusetts Institute of Technology, Massachusetts, USA. Cor-
respondence to: Zi Wang <ziw@csail.mit.edu>, Stefanie Jegelka
<stefje@csail.mit.edu>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

Among the most popular ones range the Gaussian process
upper conﬁdence bound (GP-UCB) (Auer, 2002; Srinivas
et al., 2010), probability of improvement (PI) (Kushner,
1964), and expected improvement (EI) (Mo˘ckus, 1974).
Particularly successful recent additions are entropy search
(ES) (Hennig & Schuler, 2012) and predictive entropy
search (PES) (Hern´andez-Lobato et al., 2014), which aim
to maximize the mutual information between the queried
points and the location of the global optimum.

ES and PES are effective in the sense that they are query-
efﬁcient and identify a good point within competitively few
iterations, but determining the next query point involves
very expensive computations. As a result, these methods
are most useful if the black-box function requires a lot of
effort to evaluate, and are relatively slow otherwise. More-
over, they rely on estimating the entropy of the arg max of
the function. In high dimensions, this estimation demands
a large number of samples from the input space, which can
quickly become inefﬁcient.

We propose a twist to the viewpoint of ES and PES that re-
tains the information-theoretic motivation and empirically
successful query-efﬁciency of those methods, but at a much
reduced computational cost. The key insight is to replace
the uncertainty about the arg max with the uncertainty
about the maximum function value. As a result, we refer
to our new method as Max-value Entropy Search (MES).
As opposed to the arg max, the maximum function value
lives in a one-dimensional space, which greatly facilitates
the estimation of the mutual information via sampling. We
explore two strategies to make the entropy estimation ef-
ﬁcient: an approximation by a Gumbel distribution, and a
Monte Carlo approach that uses random features.

Our contributions are as follows: (1) MES, a variant of
the entropy search methods, which enjoys efﬁcient com-
putation and simple implementation; (2) an intuitive analy-
sis which establishes the ﬁrst connection between ES/PES
and the previously proposed criteria GP-UCB, PI and
EST (Wang et al., 2016), where the bridge is formed by
MES; (3) a regret bound for a variant of MES, which, to
our knowledge, is the ﬁrst regret bound established for any
variant of the entropy search methods; (4) an extension of
MES to the high dimensional settings via additive Gaus-
sian processes; and (5) empirical evaluations which demon-

Max-value Entropy Search for Efﬁcient Bayesian Optimization

strate that MES identiﬁes good points as quickly or better
than ES/PES, but is much more efﬁcient and robust in es-
timating the mutual information, and therefore much faster
than its input-space counterparts.

After acceptance of this work, we learned that Hoffman &
Ghahramani (2015) independently arrived at the acquisi-
tion function in Eq. (5). Yet, our approximation (Eq. (6))
is different, and hence the actual acquisition function we
evaluate and analyze is different.

2. Background

Our goal is to maximize a black-box function f : X → R
where X ⊂ Rd and X is compact. At time step t, we select
point xt and observe a possibly noisy function evaluation
yt = f (xt) + (cid:15)t, where (cid:15)t ∼ N (0, σ2) are i.i.d. Gaus-
sian variables. We use Gaussian processes (Rasmussen &
Williams, 2006) to build a probabilistic model of the black-
box function to be optimized. For high dimensional cases,
we use a variant of the additive Gaussian process (Duve-
naud et al., 2011; Kandasamy et al., 2015). For complete-
ness, we here introduce some basics of GP and add-GP.

2.1. Gaussian Processes

Gaussian processes (GPs) are distributions over functions,
and popular priors for Bayesian nonparametric regres-
sion.
In a GP, any ﬁnite set of function values has a
multivariate Gaussian distribution. A Gaussian process
GP (µ, k) is fully speciﬁed by a mean function µ(x)
and covariance (kernel) function k(x, x(cid:48)).
Let f be
a function sampled from GP (µ, k). Given the observa-
tions Dt = {(xτ , yτ )}t
τ =1, we obtain the posterior mean
µt(x) = kt(x)T(Kt + σ2I)−1yt and posterior covariance
kt(x, x(cid:48)) = k(x, x(cid:48)) − kt(x)T(Kt + σ2I)−1kt(x(cid:48)) of the
function via the kernel matrix Kt = [k(xi, xj)]xi,xj ∈Dt
and kt(x) = [k(xi, x)]xi∈Dt (Rasmussen & Williams,
2006). The posterior variance is σ2

t (x) = kt(x, x).

2.2. Additive Gaussian Processes

Additive Gaussian processes (add-GP) were proposed
in (Duvenaud et al., 2011), and analyzed in the BO set-
ting in (Kandasamy et al., 2015).
Following the lat-
ter, we assume that the function f is a sum of inde-
pendent functions sampled from Gaussian processes that
are active on disjoint sets Am of input dimensions. Pre-
cisely, f (x) = (cid:80)M
m=1 f (m)(xAm), with Ai ∩ Aj =
i=1 Ai| = d, and f (m) ∼
| ∪M
∅ for all i
GP (µ(m), k(m)), for all m ≤ M (M ≤ d < ∞).
the function f is
As a result of this decomposition,
distributed according to GP ((cid:80)M
m=1 k(m)).
Given a set of noisy observations Dt = {(xτ , yτ )}t
τ =1
where yτ ∼ N (f (xτ ), σ2),
the posterior mean and

m=1 µ(m), (cid:80)M

(cid:54)= j,

t

covariance of
inferred as µ(m)
and k(m)
t
σ2I)−1k(m)
t
and Kt =

(x) = k(m)

the function component f (m) can be
(x)T(Kt + σ2I)−1yt
(x)T(Kt +
(x) = [k(m)(xi, x)]xi∈Dt
. For simplicity,

(cid:105)
m=1 k(m)(xi, xj)

(x, x(cid:48)) = k(m)(x, x(cid:48)) − k(m)

(x(cid:48)), where k(m)

(cid:104)(cid:80)M

t

t

t

xi,xj ∈Dt

we use the shorthand k(m)(x, x(cid:48)) = k(m)(xAm, x(cid:48)Am).

2.3. Evaluation Criteria

We use two types of evaluation criteria for BO, sim-
ple regret and inference regret.
In each iteration, we
choose to evaluate one input xt to “learn” where the
arg max of the function is. The simple regret rT =
maxx∈X f (x) − maxt∈[1,T ] f (xt) measures the value of
the best queried point so far. After all queries, we may
infer an arg max of the function, which is usually chosen
as ˜xT = arg maxx∈X µT (x) (Hennig & Schuler, 2012;
Hern´andez-Lobato et al., 2014). We denote the inference
regret as RT = maxx∈X f (x) − f (˜xT ) which character-
izes how satisfying our inference of the arg max is.

3. Max-value Entropy Search

Entropy search methods use an information-theoretic per-
spective to select where to evaluate. They ﬁnd a query
point that maximizes the information about the location
x∗ = arg maxx∈X f (x) whose value y∗ = f (x∗) achieves
the global maximum of the function f . Using the negative
differential entropy of p(x∗|Dt) to characterize the uncer-
tainty about x∗, ES and PES use the acquisition functions

αt(x) = I({x, y}; x∗ | Dt)

(1)
= H (p(x∗ | Dt)) − E [H(p(x∗ | Dt ∪ {x, y}))] (2)
= H(p(y | Dt, x)) − E [H(p(y | Dt, x, x∗))] .
(3)

ES uses formulation (2), in which the expectation is over
p(y|Dt, x), while PES uses the equivalent, symmetric for-
mulation (3), where the expectation is over p(x∗|Dt). Un-
fortunately, both p(x∗|Dt) and its entropy is analytically
intractable and have to be approximated via expensive com-
putations. Moreover, the optimum may not be unique,
adding further complexity to this distribution.

We follow the same information-theoretic idea but propose
a much cheaper and more robust objective to compute. In-
stead of measuring the information about the argmax x∗,
we use the information about the maximum value y∗ =
f (x∗). Our acquisition function is the gain in mutual in-
formation between the maximum y∗ and the next point we
query, which can be approximated analytically by evaluat-
ing the entropy of the predictive distribution:

αt(x) = I({x, y}; y∗ | Dt)
= H(p(y | Dt, x)) − E[H(p(y | Dt, x, y∗))]

(4)

(5)

Max-value Entropy Search for Efﬁcient Bayesian Optimization

≈

1
K

(cid:88)

y∗∈Y∗

(cid:20) γy∗ (x)ψ(γy∗ (x))
2Ψ(γy∗ (x))

(cid:21)
− log(Ψ(γy∗ (x)))

(6)

σt(x)

where ψ is the probability density function and Ψ the cu-
mulative density function of a normal distribution, and
γy∗ (x) = y∗−µt(x)
. The expectation in Eq. (5) is over
p(y∗|Dn), which is approximated using Monte Carlo esti-
mation by sampling a set of K function maxima. Notice
that the probability in the ﬁrst term p(y|Dt, x) is a Gaus-
sian distribution with mean µt(x) and variance kt(x, x).
The probability in the second term p(y|Dn, x, y∗) is a
truncated Gaussian distribution: given y∗, the distribution
of y needs to satisfy y < y∗.
Importantly, while ES
and PES rely on the expensive, d-dimensional distribution
p(x∗|Dt), here, we use the one-dimensional p(y∗|Dn),
which is computationally much easier.

It may not be immediately intuitive that the value should
bear sufﬁcient information for a good search strategy. Yet,
the empirical results in Section 5 will demonstrate that this
strategy is typically at least as good as ES/PES. From a
formal perspective, Wang et al. (2016) showed how an esti-
mate of the maximum value implies a good search strategy
(EST). Indeed, Lemma 3.1 will make the relation between
EST and a simpler, degenerate version of MES explicit.

Hence, it remains to determine how to sample y∗. We
propose two strategies: (1) sampling from an approxima-
tion via a Gumbel distribution; and (2) sampling functions
from the posterior Gaussian distribution and maximizing
the functions to obtain samples of y∗. We present the MES
algorithm in Alg. 1.

3.1. Gumbel Sampling

The marginal distribution of f (x) for any x is a one-
dimensional Gaussian, and hence the distribution of y∗ may
be viewed as the maximum of an inﬁnite collection of de-
pendent Gaussian random variables. Since this distribution
is difﬁcult to compute, we make two simpliﬁcations. First,
we replace the continuous set X by a discrete (ﬁnite), dense
subset ˆX of representative points. If we select ˆX to be an (cid:15)-
cover of X and the function f is Lipschitz continuous with
constant L, then we obtain a valid upper bound on f (X) by
adding (cid:15)L to any upper bound on f ( ˆX).

Second, we use a “mean ﬁeld” approximation and treat the
function values at the points in ˆX as independent. This ap-
proximation tends to over-estimate the maximum; this fol-
lows from Slepian’s lemma if k(x, x(cid:48)) ≥ 0. Such upper
bounds still lead to optimization strategies with vanishing
regret, whereas lower bounds may not (Wang et al., 2016).

We sample from the approximation ˆp(y∗|Dn) via its cu-
mulative distribution function (CDF) (cid:99)Pr[y∗ < z] =
(cid:81)
x∈ ˆX Ψ(γz(x)). That means we sample r uniformly from

Algorithm 1 Max-value Entropy Search (MES)
1: function MES (f, D0)
for t = 1, · · · , T do
2:
3:
4:
5:
6:
end for
7:
8: end function

αt−1(·) ←APPROX-MI (Dt−1)
xt ← arg maxx∈X αt−1(x)
yt ← f (xt) + (cid:15)t, (cid:15)t ∼ N (0, σ2)
Dt ← Dt−1 ∪ {xt, yt}

if Sample with Gumbel then

approximate Pr[ˆy∗ < y] with G(a, b)
sample a K-length vector r ∼ Unif([0, 1])
y∗ ← a − b log(− log r)

else

9: function Approx-MI (Dt)
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22: end function

end if
return αt(·) in Eq. (6)

end for
y∗ ← [y∗(i)]K
i=1

for i = 1, · · · , K do

sample ˜f ∼ GP (µt, kt | Dt)
y∗(i) ← maxx∈X

˜f (x)

[0, 1] and ﬁnd z such that Pr[y∗ < z] = r. A binary search
for z to accuracy δ requires O(log 1
δ ) queries to the CDF,
and each query takes O(| ˆX|) ≈ O(nd) time, so we obtain
an overall time of O(M | ˆX| log 1
δ ) for drawing M samples.
To sample more efﬁciently, we propose a O(M +
| ˆX| log 1
δ )-time strategy, by approximating the CDF by a
Gumbel distribution: (cid:99)Pr[y∗ < z] ≈ G(a, b) = e−e− z−a
.
This choice is motivated by the Fisher-Tippett-Gnedenko
theorem (Fisher, 1930), which states that the maximum of
a set of i.i.d. Gaussian variables is asymptotically described
by a Gumbel distribution (see the appendix for further de-
tails). This does not in general extend to non-i.i.d. Gaus-
sian variables, but we nevertheless observe that in practice,
this approach yields a good and fast approximation.

b

We sample from the Gumbel distribution via the Gumbel
quantile function: we sample r uniformly from [0, 1], and
let the sample be y = G−1(a, b) = a − b log(− log r).
We set the appropriate Gumbel distribution parameters a
and b by percentile matching and solve the two-variable
linear equations a − b log(− log r1) = y1 and a −
b log(− log r2) = y2, where Pr[y∗ < y1] = r1 and
Pr[y∗ < y2] = r2.
In practice, we use r1 = 0.25 and
r2 = 0.75 so that the scale of the approximated Gumbel
distribution is proportional to the interquartile range of the
CDF ˆPr[y∗ < z].

Max-value Entropy Search for Efﬁcient Bayesian Optimization

3.2. Sampling y∗ via Posterior Functions

For an alternative sampling strategy we follow (Hern´andez-
Lobato et al., 2014): we draw functions from the poste-
rior GP and then maximize each of the sampled functions.
Given the observations Dt = {(xτ , yτ )t
τ =1}, we can ap-
proximate the posterior Gaussian process using a 1-hidden-
layer neural network ˜f (x) = aT
t φ(x) where φ(x) ∈ RD
is a vector of feature functions (Neal, 1996; Rahimi et al.,
2007) and the Gaussian weight at ∈ RD is distributed ac-
cording to a multivariate Gaussian N (νt, Σt).

Computing φ(x).
By Bochner’s theorem (Rudin,
the Fourier transform ˆk of a continuous and
2011),
translation-invariant kernel k is guaranteed to be a prob-
Hence we can write the kernel
ability distribution.
ω∼ˆk(ω)[eiωT(x−x(cid:48))] =
of the GP to be k(x, x(cid:48)) = E
Ec∼U [0,2π]Eˆk[2 cos(ωTx + c) cos(ωTx(cid:48) + c)] and approx-
imate the expectation by k(x, x(cid:48)) ≈ φT(x)φ(x(cid:48)) where
i x + ci), ωi ∼ ˆκ(ω), and ci ∼
φi(x) =
U [0, 2π] for i = 1, . . . , D.

D cos(ωT

(cid:113) 2

Computing νt, Σt. By writing the GP as a random linear
combination of feature functions aT
t φ(x), we are deﬁn-
ing the mean and covariance of the GP to be µt(x) =
νTφ(x) and k(x, x(cid:48)) = φ(x)TΣtφ(x(cid:48)). Let Z =
[z1, · · · , zt] ∈ RD×t, where zτ := φ(xτ ) ∈ RD. The
GP posterior mean and covariance in Section 2.1 become
µt(x) = zTZ(Z TZ + σ2I)−1yt and kt(x, x(cid:48)) = zTz(cid:48) −
zTZ(Z TZ + σ2I)−1Z Tz(cid:48). Because Z(Z TZ + σ2I)−1 =
(ZZ T+σ2I)−1Z, we can simplify the above equations and
obtain νt = σ−2ΣtZtyt and Σt = (ZZ Tσ−2 + I)−1.
To sample a function from this random 1-hidden-layer neu-
ral network, we sample ˜a from N (νt, Σt) and construct
the sampled function ˜f = ˜aTφ(x). Then we optimize ˜f
with respect to its input to get a sample of the maximum of
the function maxx∈X

˜f (x).

3.3. Relation to Other BO Methods

As a side effect, our new acquisition function draws con-
nections between ES/PES and other popular BO methods.
The connection between MES and ES/PES follows from
the information-theoretic viewpoint; the following lemma
makes the connections to other methods explicit.
Lemma 3.1. The following methods are equivalent:

1. MES, where we only use a single sample y∗ for αt(x);
2. EST with m = y∗;
3. GP-UCB with β 1
4. PI with θ = y∗.

2 = minx∈X

y∗−µt(x)
σt(x)

;

Proof. The equivalence among 2,3,4 is stated in Lemma
2.1 in (Wang et al., 2016). What remains to be shown
is the equivalence between 1 and 2. When using a sin-
gle y∗ in MES, the next point to evaluate is chosen by
maximizing αt(x) = γy∗ (x) ψ(γy∗ (x))
2Ψ(γy∗ (x)) − log(Ψ(γy∗ (x)))
and γy∗ = y∗−µt(x)
. For EST with m = y∗, the next
point to evaluate is chosen by minimizing γy∗ (x). Let us
deﬁne a function g(u) = u ψ(u)
2Ψ(u) − log(Ψ(u)). Clearly,
αt(x) = g(γy∗ (x)). Because g(u) is a monotonically de-
creasing function, maximizing g(γy∗ (x)) is equivalent to
minimizing γy∗ (x). Hence 1 and 2 are equivalent.

σt(x)

3.4. Regret Bound

The connection with EST directly leads to a bound on the
simple regret of MES, when using only one sample of y∗.
We prove Theorem 3.2 in the appendix.

Theorem 3.2. Let F be the cumulative probability distri-
bution for the maximum of any function f sampled from
GP (µ, k) over the compact search space X ⊂ Rd, where
k(x, x(cid:48)) ≤ 1, ∀x, x(cid:48) ∈ X. Let f∗ = maxx∈X f (x) and
w = F (f∗) ∈ (0, 1), and assume the observation noise is
iid N (0, σ). If in each iteration t, the query point is chosen

as xt = arg maxx∈X γyt

(x)

∗

(x))
(x)) −log(Ψ(γyt

∗

(x))),

∗

(x) = yt

∗−µt(x)
where γyt
σt(x)
with probability at least 1 − δ, in T (cid:48) = (cid:80)T
number of iterations, the simple regret satisﬁes

∗ is drawn from F , then
δ
2πi

i=1 logw

ψ(γyt
∗
2Ψ(γyt
∗
and yt

rT (cid:48) ≤

(νt∗ + ζT )

(7)

(cid:114)

CρT
T

where C = 2/ log(1 + σ−2) and ζT = (2 log( πT
satisﬁes (cid:80)T
with νt (cid:44) minx∈X,yt
information gain of at most T selected points.

2 ; π
i ≤ 1 and πt > 0, and t∗ = arg maxt νt
(x), and ρT is the maximum

i=1 π−1

∗>f∗ γyt

δ )) 1

∗

3.5. Model Adaptation

In practice we do not know the hyper-parameters of the GP,
so we must adapt our GP model as we observe more data.
A standard way to learn the GP hyper-parameters is to opti-
mize the marginal data likelihood with respect to the hyper-
parameters. As a full Bayesian treatment, we can also draw
samples of the hyper-parameters using slice sampling (Van-
hatalo et al., 2013), and then marginalize out the hyper-
parameters in our acquisition function in Eq. (6). Namely,
if we use E to denote the set of sampled settings for the GP
hyper-parameters, our acquisition function becomes

This equivalence no longer holds if we use M > 1 samples
of y∗ in MES.

αt(x) =

(cid:88)

(cid:88)

η∈E

y∗∈Y∗

(cid:20) γη
(x)ψ(γη
y∗
y∗
2Ψ(γη
y∗ (x))

(x))

− log(Ψ(γη
y∗

(x)))

,

(cid:21)

Max-value Entropy Search for Efﬁcient Bayesian Optimization

(x) = y∗−µη
t (x)
where γη
and the posterior inference on
ση
y∗
t (x)
the mean function µη
t and ση
t depends on the GP hyper-
parameter setting η. Similar approaches have been used
in (Hern´andez-Lobato et al., 2014; Snoek et al., 2012).

4. High Dimensional MES with Add-GP

The high-dimensional input setting has been a challenge
for many BO methods. We extend MES to this setting via
additive Gaussian processes (Add-GP). In the past, Add-
GP has been used and analyzed for GP-UCB (Kandasamy
et al., 2015), which assumed the high dimensional black-
box function is a summation of several disjoint lower di-
mensional functions. Utilizing this special additive struc-
ture, we overcome the statistical problem of having insufﬁ-
cient data to recover a complex function, and the difﬁculty
of optimizing acquisition functions in high dimensions.

Since the function components f (m) are independent, we
can maximize the mutual information between the input in
the active dimensions Am and maximum of f (m) for each
component separately. Hence, we have a separate acquisi-
tion function for each component, where y(m) is the evalu-
ation of f (m):

(x)

. Analogously to the non-

∗ −µ(m)
y∗ (x) = y(m)
where γ(m)
t
σ(m)
(x)
t
additive case, we sample y(m)
, separately for each function
component. We select the ﬁnal xt by choosing a sub-vector
x(m)
(x(m)) and concatenating
t
the components.

∈ arg maxx(m)∈Am α(m)

∗

t

Sampling y(m)
∗ with a Gumbel distribution. The Gum-
bel sampling from Section 3.1 directly extends to sam-
pling y(m)
, approximately. We simply need to sam-
ple from the component-wise CDF (cid:99)Pr[y(m)
< z] =
(cid:81)
(x))), and use the same Gumbel approxi-

x∈ ˆX Ψ(γ(m)

∗

∗

y

mation.

∗

Sampling y(m)
via posterior functions. The additive
structure removes some connections on the input-to-hidden
layer of our 1-hidden-layer neural network approximation
˜f (x) = aT
t φ(x). Namely, for each feature function φ there
exists a unique group m such that φ is only active on xAm,
D cos(ωTxAm + c) where R|Am| (cid:51) ω ∼
and φ(x) =

(cid:113) 2

ˆκ(m)(ω) and c ∼ U [0, 2π]. Similar to the non-additive
case, we may draw a posterior sample at ∼ N (νt, Σt)
where νt = σ−2ΣtZtyt and Σt = (ZZ Tσ−2 + I)−1.
Let Bm = {i : φi(x) is active on xAm}. The posterior
sample for the function component f (m) is ˜f (m)(x) =
)TφBm(xAm). Then we can maximize ˜f (m) to ob-
(aBm
t
tain a sample for y(m)

.

∗

The algorithm for the additive max-value entropy search
method (add-MES) is shown in Algorithm 2. The function
APPROX-MI does the pre-computation for approximating
the mutual information in a similar way as in Algorithm 1,
except that it only acts on the active dimensions in the m-th
group.

Algorithm 2 Additive Max-value Entropy Search
1: function Add-MES (f, D0)
for t = 1, · · · , T do
2:
3:
4:

for m = 1, · · · , M do

α(m)
t−1(·) ←APPROX-MI (Dt−1)
t ← arg maxxAm ∈XAm α(m)
xAm
end for
yt ← f (xt) + (cid:15)t, (cid:15)t ∼ N (0, σ2)
Dt ← Dt−1 ∪ {xt, yt}

t−1(x)

5:
6:
7:
8:
9:
10: end function

end for

In this section, we probe the empirical performance of MES
and add-MES on a variety of tasks. Here, MES-G de-
notes MES with y∗ sampled from the approximate Gumbel
distribution, and MES-R denotes MES with y∗ computed
by maximizing a sampled function represented by random
features. Following (Hennig & Schuler, 2012; Hern´andez-
Lobato et al., 2014), we adopt the zero mean function and
non-isotropic squared exponential kernel as the prior for
the GP. We compare to methods from the entropy search
family, i.e., ES and PES, and to other popular Bayesian op-
timization methods including GP-UCB (denoted by UCB),
PI, EI and EST. The parameter for GP-UCB was set ac-
cording to Theorem 2 in (Srinivas et al., 2010); the param-
eter for PI was set to be the observation noise σ. For the
functions with unknown GP hyper-parameters, every 10 it-
erations, we learn the GP hyper-parameters using the same
approach as was used by PES (Hern´andez-Lobato et al.,
2014). For the high dimensional tasks, we follow (Kan-
dasamy et al., 2015) and sample the additive structure/GP
parameters with the highest data likelihood when they are
unknown. We evaluate performance according to the sim-
ple regret and inference regret as deﬁned in Section 2.3.
We used the open source Matlab implementation of PES,
ES and EST (Hennig & Schuler, 2012; Hern´andez-Lobato

(x) = I({xAm, y(m)}; y(m)

α(m)
t
= H(p(y(m) | Dt, xAm ))

∗

| Dt)

− E[H(p(y(m) | Dt, xAm, y(m)

∗

))]

(cid:88)

≈

γ(m)
y∗

(x)

y(m)
∗

ψ(γ(m)
2Ψ(γ(m)

y∗ (x))
y∗ (x))

(8)

(9)

− log(Ψ(γ(m)

y∗

(x))) (10)

5. Experiments

Max-value Entropy Search for Efﬁcient Bayesian Optimization

Figure 1 shows the simple and inference regrets. For both
regret measures, PES is very sensitive to the the number
of x∗ sampled for the acquisition function: 100 samples
lead to much better results than 10 or 1. In contrast, both
MES-G and MES-R perform competitively even with 1 or
10 samples. Overall, MES-G is slightly better than MES-
R, and both MES methods performed better than other ES
methods. MES methods performed better than all other
methods with respect to simple regret. For inference re-
gret, MES methods performed similarly to EST, and much
better than all other methods including PES and ES.

In Table 1, we show the runtime of selecting the next in-
put per iteration1 using GP-UCB, PI, EI, EST, ES, PES,
MES-R and MES-G on the synthetic data with ﬁxed GP
hyper-parameters. For PES and MES-R, every x∗ or y∗ re-
quires running an optimization sub-procedure, so their run-
ning time grows noticeably with the number of samples.
MES-G avoids this optimization, and competes with the
fastest methods EI and UCB.

In the following experiments, we set the number of x∗ sam-
pled for PES to be 200, and the number of y∗ sampled for
MES-R and MES-G to be 100 unless otherwise mentioned.

5.2. Optimization Test Functions

We test on three challenging optimization test functions:
the 2-dimensional eggholder function, the 10-dimensional
Shekel function and the 10-dimensional Michalewicz func-
tion. All of these functions have many local optima. We
randomly sample 1000 points to learn a good GP hyper-
parameter setting, and then run the BO methods with the
same hyper-parameters. The ﬁrst observation is the same
for all methods. We repeat the experiments 10 times. The
averaged simple regret is shown in the appendix, and the
inference regret is shown in Table 2. On the 2-d eggholder
function, PES was able to achieve better function values
faster than all other methods, which veriﬁed the good per-
formance of PES when sufﬁciently many x∗ are sampled.
However, for higher-dimensional test functions, the 10-d
Shekel and 10-d Michalewicz function, MES methods per-
formed much better than PES and ES, and MES-G per-
formed better than all other methods.

5.3. Tuning Hyper-parameters for Neural Networks

Next, we experiment with Levenberg-Marquardt optimiza-
tion for training a 1-hidden-layer neural network. The 4 pa-
rameters we tune with BO are the number of neurons, the
damping factor µ, the µ-decrease factor, and the µ-increase
factor. We test regression on the Boston housing dataset

1All the timing experiments were run exclusively on an In-
tel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz. The function eval-
uation time is excluded.

Figure 1. (a) Inference regret; (b) simple regret. MES methods
are much less sensitive to the number of maxima y∗ sampled for
the acquisition function (1, 10 or 100) than PES is to the number
of argmaxes x∗.

Table 1. The runtime of selecting the next input. PES 100 is sig-
niﬁcantly slower than other methods. MES-G’s runtime is com-
parable to the fastest method EI while it performs better in terms
of simple and inference regrets.

METHOD

TIME (S)

METHOD

TIME (S)

UCB
PI
EI
EST
ES
PES 100
PES 10

PES 1

0.08 ± 0.05
0.10 ± 0.02 MES-R 100
0.07 ± 0.03 MES-R 10
0.15 ± 0.02 MES-R 1
8.07 ± 3.02 MES-G 100
15.24 ± 4.44 MES-G 10
1.61 ± 0.50 MES-G 1

0.20 ± 0.06
5.85 ± 0.86
0.67 ± 0.11
0.13 ± 0.03
0.12 ± 0.02
0.09 ± 0.02
0.09 ± 0.03

et al., 2014; Wang et al., 2016). Our Matlab code and
test functions are available at https://github.com/
zi-w/Max-value-Entropy-Search/.

5.1. Synthetic Functions

We begin with a comparison on synthetic functions sam-
pled from a 3-dimensional GP, to probe our conjecture that
MES is much more robust to the number of y∗ sampled to
estimate the acquisition function than PES is to the num-
ber of x∗ samples. For PES, we sample 100 (PES 100),
10 (PES 10) and 1 (PES 1) argmaxes for the acquisition
function. Similarly, we sample 100, 10, 1 y∗ values for
MES-R and MES-G. We average the results on 100 func-
tions sampled from the same Gaussian kernel with scale
parameter 5.0 and bandwidth parameter 0.0625, and obser-
vation noise N (0, 0.012).

(a)(b)50100150200t-0.3-0.2-0.100.10.20.30.40.50.60.7log10 Rt50100150200t-0.3-0.2-0.100.10.20.30.40.50.60.7log10 rtUCBPIEIESTESPES 100PES 10PES 1MES-R 100MES-R 10MES-R 1MES-G 100MES-G 10MES-G 1Max-value Entropy Search for Efﬁcient Bayesian Optimization

Table 2. Inference regret RT for optimizing the eggholder func-
tion, Shekel function, and Michalewicz function.

Table 3. Inference regret RT for tuning neural network hyper-
parameters on the Boston housing and breast cancer datasets.

METHOD

EGGHOLDER

SHEKEL

MICHALEWICZ

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

141.00 ± 70.96
52.04 ± 39.03
71.18 ± 59.18
55.84 ± 24.85
48.85 ± 29.11
37.94 ± 26.05
54.47 ± 37.71
46.56 ± 27.05

9.40 ± 0.26
6.64 ± 2.00
6.63 ± 0.87
5.57 ± 2.56
6.43 ± 2.73
8.73 ± 0.67
6.17 ± 1.80
5.45 ± 2.07

6.07 ± 0.53
4.97 ± 0.39
4.80 ± 0.60
5.33 ± 0.46
5.11 ± 0.73
5.17 ± 0.74
4.97 ± 0.59
4.49 ± 0.51

Table 4. Inference regret RT for action selection in robot pushing.

METHOD

BOSTON

CANCER (%)

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

1.64 ± 0.43
2.15 ± 0.99
1.99 ± 1.03
1.65 ± 0.57
1.79 ± 0.61
1.52 ± 0.32
1.54 ± 0.56
1.51 ± 0.61

3.83 ± 0.01
4.40 ± 0.01
4.40 ± 0.01
3.93 ± 0.01
4.14 ± 0.00
3.84 ± 0.01
3.96 ± 0.01
3.83 ± 0.01

METHOD

3-D ACTION

4-D ACTION

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

1.10 ± 0.66
2.03 ± 1.77
1.89 ± 1.87
0.70 ± 0.90
0.62 ± 0.59
0.81 ± 1.27
0.61 ± 1.23
0.61 ± 1.26

0.56 ± 0.44
0.16 ± 0.20
0.30 ± 0.33
0.24 ± 0.17
0.25 ± 0.20
0.38 ± 0.38
0.16 ± 0.10
0.24 ± 0.25

Figure 2. Tuning hyper-parameters for training a neural network,
(a) Boston housing dataset; (b) breast cancer dataset. MES meth-
ods perform better than other methods on (a), while for (b), MES-
G, UCB, PES perform similarly and better than others.

and classiﬁcation on the breast cancer dataset (Bache &
Lichman, 2013). The experiments are repeated 20 times,
and the neural network’s weight initialization and all other
parameters are set to be the same to ensure a fair com-
parison. Both of the datasets were randomly split into
train/validation/test sets. We initialize the observation set
to have 10 random function evaluations which were set to
be the same across all the methods. The averaged simple
regret for the regression L2-loss on the validation set of the
Boston housing dataset is shown in Fig. 2(a), and the classi-
ﬁcation accuracy on the validation set of the breast cancer
dataset is shown in Fig. 2(b). For the classiﬁcation prob-
lem on the breast cancer dataset, MES-G, PES and UCB
achieved a similar simple regret. On the Boston housing
dataset, MES methods achieved a lower simple regret. We
also show the inference regrets for both datasets in Table 3.

5.4. Active Learning for Robot Pushing

We use BO to do active learning for the pre-image learning
problem for pushing (Kaelbling & Lozano-P´erez, 2017).
The function we optimize takes as input the pushing action
of the robot, and outputs the distance of the pushed object
to the goal location. We use BO to minimize the function in

order to ﬁnd a good pre-image for pushing the object to the
designated goal location. The ﬁrst function we tested has
a 3-dimensional input: robot location (rx, ry) and pushing
duration tr. We initialize the observation size to be one,
the same across all methods. The second function has a
4-dimensional input: robot location and angle (rx, ry, rθ),
and pushing duration tr. We initialize the observation to be
50 random points and set them the same for all the methods.
We select 20 random goal locations for each function to
test if BO can learn where to push for these locations. We
show the simple regret in Fig. 4 and the inference regret in
Table 4. MES methods performed on a par with or better
than their competitors.

5.5. High Dimensional BO with Add-MES

In this section, we test our add-MES algorithm on high
dimensional black-box function optimization problems.
First we compare add-MES and add-GP-UCB (Kandasamy
et al., 2015) on a set of synthetic additive functions with
known additive structure and GP hyper-parameters. Each
function component of the synthetic additive function is
active on at most three input dimensions, and is sampled
from a GP with zero mean and Gaussian kernel (band-
width = 0.1 and scale = 5). For the parameter of add-
GP-UCB, we follow (Kandasamy et al., 2015) and set
= |Am| log 2t/5. We set the number of y(m)
β(m)
sam-
t
pled for each function component in add-MES-R and add-
MES-G to be 1. We repeat each experiment for 50 times

∗

(a)(b)t50100150rt11.522.533.54UCBPIEIESTESPESMES-RMES-Gt50100150rt0.0360.0380.040.0420.0440.0460.0480.050.052UCBPIEIESTESPESMES-RMES-GMax-value Entropy Search for Efﬁcient Bayesian Optimization

Figure 3. Simple regrets for add-GP-UCB and add-MES methods on the synthetic add-GP functions. Both add-MES methods outperform
add-GP-UCB except for add-MES-G on the input dimension d = 100. Add-MES-G achieves the lowest simple regret when d is
relatively low, while for higher d add-MES-R becomes better than add-MES-G.

by a robot which has 14 parameters2. The other function re-
turns the walking speed of a planar bipedal robot, with 25
parameters to tune (Westervelt et al., 2007). In Fig. 5, we
show the simple regrets achieved by add-GP-UCB and add-
MES. Add-MES methods performed competitively com-
pared to add-GP-UCB on both tasks.

Figure 4. BO for active data selection on two robot pushing tasks
for minimizing the distance to a random goal with (a) 3-D ac-
tions and (b) 4-D actions. MES methods perform better than other
methods on the 3-D function. For the 4-D function, MES methods
converge faster to a good regret, while PI achieves lower regret in
the very end.

for each dimension setting. The results for simple regret
are shown in Fig. 3. Add-MES methods perform much
better than add-GP-UCB in terms of simple regret.
In-
terestingly, add-MES-G works better in lower dimensional
cases where d = 10, 20, 30, while add-MES-R outperforms
both add-MES-G and add-GP-UCB for higher dimensions
where d = 50, 100. In general, MES-G tends to overesti-
mate the maximum of the function because of the indepen-
dence assumption, and MES-R tends to underestimate the
maximum of the function because of the imperfect global
optimization of the posterior function samples. We con-
jecture that MES-R is better for settings where exploitation
is preferred over exploration (e.g., not too many local op-
tima), and MES-G works better if exploration is preferred.

To further verify the performance of add-MES in high di-
mensional problems, we test on two real-world high dimen-
sional experiments. One is a function that returns the dis-
tance between a goal location and two objects being pushed

Figure 5. Simple regrets for add-GP-UCB and add-MES methods
on (a) a robot pushing task with 14 parameters and (b) a planar
bipedal walker optimization task with 25 parameters. Both MES
methods perform competitively comparing to add-GP-UCB.

6. Conclusion

We proposed a new information-theoretic approach, max-
value entropy search (MES), for optimizing expensive
black-box functions. MES is competitive with or better
than previous entropy search methods, but at a much lower
computational cost. Via additive GPs, MES is adaptable
to high-dimensional settings. We theoretically connected
MES to other popular Bayesian optimization methods in-
cluding entropy search, GP-UCB, PI, and EST, and showed
a bound on the simple regret for a variant of MES. Empiri-
cally, MES performs well on a variety of tasks.

2We implemented the function in (Catto, 2011).

t200400rt20406080Add-GP-UCBAdd-MES-RAdd-MES-Gt200400rt0204060Add-GP-UCBAdd-MES-RAdd-MES-Gt200400rt010203040Add-GP-UCBAdd-MES-RAdd-MES-Gt200400rt0510152025Add-GP-UCBAdd-MES-RAdd-MES-Gd=10d=20d=30d=50d=100t200400rt406080100120140Add-GP-UCBAdd-MES-RAdd-MES-G(a)(b)t10203040rt0.10.20.30.40.50.60.70.80.9UCBPIEIESTESPESMES-RMES-Gt10203040rt012345678UCBPIEIESTESPESMES-RMES-Gt200400rt3456789Add-GP-UCBAdd-MES-RAdd-MES-Gt200400rt0.511.522.533.54Add-GP-UCBAdd-MES-RAdd-MES-G(a)(b)Max-value Entropy Search for Efﬁcient Bayesian Optimization

Acknowledgements

We thank Prof. Leslie Pack Kaelbling and Prof. Tom´as
Lozano-P´erez for discussions on active learning and
Dr. William Huber for his solution to “Extreme Value
to Gumbel” at stats.
Theory - Show: Normal
stackexchange.com, which leads to our Gumbel ap-
proximation in Section 3.1. We gratefully acknowledge
support from NSF CAREER award 1553284, NSF grants
1420927 and 1523767, from ONR grant N00014-14-1-
0486, and from ARO grant W911NF1410433. We thank
MIT Supercloud and the Lincoln Laboratory Supercom-
puting Center for providing computational resources. Any
opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do
not necessarily reﬂect the views of our sponsors.

References

Auer, Peter. Using conﬁdence bounds for exploitation-exploration
tradeoffs. Journal of Machine Learning Research, 3:397–422,
2002.

Bache, Kevin and Lichman, Moshe. UCI machine learning repos-

itory. 2013.

Brochu, Eric, Cora, Vlad M, and De Freitas, Nando. A tutorial on
Bayesian optimization of expensive cost functions, with appli-
cation to active user modeling and hierarchical reinforcement
learning. Technical Report TR-2009-023, University of British
Columbia, 2009.

Calandra, Roberto, Seyfarth, Andr´e, Peters, Jan, and Deisenroth,
Marc Peter. An experimental comparison of Bayesian opti-
mization for bipedal locomotion. In International Conference
on Robotics and Automation (ICRA), 2014.

Catto, Erin. Box2D, a 2D physics engine for games. http:

//box2d.org, 2011.

Duvenaud, David K, Nickisch, Hannes, and Rasmussen, Carl E.
Additive Gaussian processes. In Advances in Neural Informa-
tion Processing Systems (NIPS), 2011.

Fisher, Ronald Aylmer. The genetical theory of natural selection:
a complete variorum edition. Oxford University Press, 1930.

Hennig, Philipp and Schuler, Christian J. Entropy search for
information-efﬁcient global optimization. Journal of Machine
Learning Research, 13:1809–1837, 2012.

Hern´andez-Lobato, Jos´e Miguel, Hoffman, Matthew W, and
Ghahramani, Zoubin. Predictive entropy search for efﬁcient
In Advances in
global optimization of black-box functions.
Neural Information Processing Systems (NIPS), 2014.

Hoffman, Matthew W and Ghahramani, Zoubin. Output-space
predictive entropy search for ﬂexible global optimization. In
NIPS workshop on Bayesian Optimization, 2015.

Kandasamy, Kirthevasan, Schneider, Jeff, and Poczos, Barnabas.
High dimensional Bayesian optimisation and bandits via addi-
tive models. In International Conference on Machine Learning
(ICML), 2015.

Krause, Andreas and Ong, Cheng S. Contextual Gaussian pro-
cess bandit optimization. In Advances in Neural Information
Processing Systems (NIPS), 2011.

Kushner, Harold J. A new method of locating the maximum point
of an arbitrary multipeak curve in the presence of noise. Jour-
nal of Fluids Engineering, 86(1):97–106, 1964.

Lizotte, Daniel J, Wang, Tao, Bowling, Michael H, and Schuur-
mans, Dale. Automatic gait optimization with Gaussian pro-
cess regression. In International Conference on Artiﬁcial In-
telligence (IJCAI), 2007.

Mo˘ckus, J. On Bayesian methods for seeking the extremum. In
Optimization Techniques IFIP Technical Conference, 1974.

Neal, R.M. Bayesian Learning for Neural networks. Lecture

Notes in Statistics 118. Springer, 1996.

Rahimi, Ali, Recht, Benjamin, et al. Random features for large-
scale kernel machines. In Advances in Neural Information Pro-
cessing Systems (NIPS), 2007.

Rasmussen, Carl Edward and Williams, Christopher KI. Gaussian

processes for machine learning. The MIT Press, 2006.

Rudin, Walter. Fourier analysis on groups. John Wiley & Sons,

2011.

Snoek, Jasper, Larochelle, Hugo, and Adams, Ryan P. Practi-
cal Bayesian optimization of machine learning algorithms. In
Advances in Neural Information Processing Systems (NIPS),
2012.

Srinivas, Niranjan, Krause, Andreas, Kakade, Sham M, and
Seeger, Matthias. Gaussian process optimization in the ban-
dit setting: no regret and experimental design. In International
Conference on Machine Learning (ICML), 2010.

Thornton, Chris, Hutter, Frank, Hoos, Holger H, and Leyton-
Brown, Kevin. Auto-WEKA: combined selection and hyper-
In ACM
parameter optimization of classiﬁcation algorithms.
SIGKDD Conference on Knowledge Discovery and Data Min-
ing (KDD), 2013.

Vanhatalo, Jarno, Riihim¨aki, Jaakko, Hartikainen, Jouni, Jyl¨anki,
Pasi, Tolvanen, Ville, and Vehtari, Aki. Gpstuff: Bayesian
modeling with gaussian processes. Journal of Machine Learn-
ing Research, 14(Apr):1175–1179, 2013.

Wang, Zi, Zhou, Bolei, and Jegelka, Stefanie. Optimization as
estimation with Gaussian processes in bandit settings. In In-
ternational Conference on Artiﬁcial Intelligence and Statistics
(AISTATS), 2016.

Wang, Zi, Jegelka, Stefanie, Kaelbling, Leslie Pack, and Lozano-
P´erez, Tom´as. Focused model-learning and planning for non-
In International
Gaussian continuous state-action systems.
Conference on Robotics and Automation (ICRA), 2017.

Kaelbling, Leslie Pack and Lozano-P´erez, Tom´as. Learning com-
posable models of primitive actions. In International Confer-
ence on Robotics and Automation (ICRA), 2017.

Westervelt, Eric R, Grizzle, Jessy W, Chevallereau, Christine,
Choi, Jun Ho, and Morris, Benjamin. Feedback control of dy-
namic bipedal robot locomotion, volume 28. CRC press, 2007.

